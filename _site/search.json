[
  {
    "objectID": "1.2_meta_storage.html",
    "href": "1.2_meta_storage.html",
    "title": "元数据存储机制",
    "section": "",
    "text": "DICOM 作为医学影像的基石，其设计源于上世纪末，采用了“一文件一图像（切片）”的存储模式。这种模式在当时是合理的，但随着影像设备采集的图像层数急剧增加（从几十层到数千层），其固有的元数据冗余问题成为了一个巨大的性能瓶颈和存储负担。\n在一个包含数百个 .dcm 文件的CT序列中，绝大部分描述患者身份、检查信息、设备参数的元数据在每个文件中都被完整地复制了一遍。只有像切片位置、实例编号这类与特定切片相关的少数信息是变化的。\n\nimport pydicom\nimport os\nfrom pathlib import Path\n\n# 探查DICOM序列中的元数据冗余\ndicom_dir = \"dicube-testdata/dicom/sample_200\"\n# 我们仅选取前两个文件进行对比\ndicom_files = list(Path(dicom_dir).glob(\"*\"))[:2]\n\n# 读取元数据（stop_before_pixels=True 避免加载像素数据，加快速度）\nds1 = pydicom.dcmread(dicom_files[0], stop_before_pixels=True)\nds2 = pydicom.dcmread(dicom_files[1], stop_before_pixels=True)\n\n# 校验序列级元数据和实例级元数据的异同\npatient_same = ds1.PatientName == ds2.PatientName\nseries_same = ds1.SeriesInstanceUID == ds2.SeriesInstanceUID\ninstance_same = ds1.InstanceNumber == ds2.InstanceNumber\n\nprint(f\"两个切片的 PatientName 相同: {patient_same}\")\nprint(f\"两个切片的 SeriesInstanceUID 相同: {series_same}\")\nprint(f\"两个切片的 InstanceNumber 相同: {instance_same}\")\n\n两个切片的 PatientName 相同: True\n两个切片的 SeriesInstanceUID 相同: True\n两个切片的 InstanceNumber 相同: False\n\n\n正如代码所示，绝大多数元数据是序列共享的，而 InstanceNumber 等则是切片独有的。这种设计不仅浪费了大量存储空间，更严重的是，当需要获取整个序列的某个信息时（例如窗宽窗位），程序必须遍历并解析数百个文件，导致了极低的 I/O 效率。",
    "crumbs": [
      "首页",
      "DiCube",
      "元数据存储机制"
    ]
  },
  {
    "objectID": "1.2_meta_storage.html#传统dicom的历史包袱元数据冗余",
    "href": "1.2_meta_storage.html#传统dicom的历史包袱元数据冗余",
    "title": "元数据存储机制",
    "section": "",
    "text": "DICOM 作为医学影像的基石，其设计源于上世纪末，采用了“一文件一图像（切片）”的存储模式。这种模式在当时是合理的，但随着影像设备采集的图像层数急剧增加（从几十层到数千层），其固有的元数据冗余问题成为了一个巨大的性能瓶颈和存储负担。\n在一个包含数百个 .dcm 文件的CT序列中，绝大部分描述患者身份、检查信息、设备参数的元数据在每个文件中都被完整地复制了一遍。只有像切片位置、实例编号这类与特定切片相关的少数信息是变化的。\n\nimport pydicom\nimport os\nfrom pathlib import Path\n\n# 探查DICOM序列中的元数据冗余\ndicom_dir = \"dicube-testdata/dicom/sample_200\"\n# 我们仅选取前两个文件进行对比\ndicom_files = list(Path(dicom_dir).glob(\"*\"))[:2]\n\n# 读取元数据（stop_before_pixels=True 避免加载像素数据，加快速度）\nds1 = pydicom.dcmread(dicom_files[0], stop_before_pixels=True)\nds2 = pydicom.dcmread(dicom_files[1], stop_before_pixels=True)\n\n# 校验序列级元数据和实例级元数据的异同\npatient_same = ds1.PatientName == ds2.PatientName\nseries_same = ds1.SeriesInstanceUID == ds2.SeriesInstanceUID\ninstance_same = ds1.InstanceNumber == ds2.InstanceNumber\n\nprint(f\"两个切片的 PatientName 相同: {patient_same}\")\nprint(f\"两个切片的 SeriesInstanceUID 相同: {series_same}\")\nprint(f\"两个切片的 InstanceNumber 相同: {instance_same}\")\n\n两个切片的 PatientName 相同: True\n两个切片的 SeriesInstanceUID 相同: True\n两个切片的 InstanceNumber 相同: False\n\n\n正如代码所示，绝大多数元数据是序列共享的，而 InstanceNumber 等则是切片独有的。这种设计不仅浪费了大量存储空间，更严重的是，当需要获取整个序列的某个信息时（例如窗宽窗位），程序必须遍历并解析数百个文件，导致了极低的 I/O 效率。",
    "crumbs": [
      "首页",
      "DiCube",
      "元数据存储机制"
    ]
  },
  {
    "objectID": "1.2_meta_storage.html#拥抱标准基于dicom-json构建",
    "href": "1.2_meta_storage.html#拥抱标准基于dicom-json构建",
    "title": "元数据存储机制",
    "section": "2. 拥抱标准：基于DICOM JSON构建",
    "text": "2. 拥抱标准：基于DICOM JSON构建\n为了让DICOM更好地融入现代Web和数据科学生态，DICOM标准委员会在 PS3.18 部分正式引入了 DICOM JSON模型。它为DICOM元数据提供了一种标准化的、人类可读的JSON表示形式，极大地简化了非医疗专业软件对DICOM信息的解析和利用。\nDiCube 没有重新发明轮子，而是完全遵从这一现代化标准来组织其内部的元数据。\n\nimport json\n\n# PyDICOM原生支持将元数据导出为DICOM JSON\nds = pydicom.dcmread(dicom_files[0], stop_before_pixels=True)\ndicom_json_str = ds.to_json()\n\n# 解析并展示部分关键字段\njson_data = json.loads(dicom_json_str)\n# 字段的键是其十六进制的Tag编码\nkey_tags = [\"00100010\", \"00080021\", \"00200013\"]  # PatientName, SeriesDate, InstanceNumber\n\nfor tag in key_tags:\n    if tag in json_data:\n        # VR (Value Representation) 字段描述了值的类型\n        vr = json_data[tag][\"vr\"]\n        value = json_data[tag].get(\"Value\", [\"N/A\"])[0]\n        print(f\"Tag {tag} (VR: {vr}): {value}\")\n\nTag 00100010 (VR: PN): {'Alphabetic': 'Anonymous'}\nTag 00080021 (VR: DA): 20241120\nTag 00200013 (VR: IS): 73\n\n\n通过采用DICOM JSON标准，DiCube确保了其元数据的互操作性和未来兼容性。",
    "crumbs": [
      "首页",
      "DiCube",
      "元数据存储机制"
    ]
  },
  {
    "objectID": "1.2_meta_storage.html#dicommeta的核心设计共享与非共享元数据的分离",
    "href": "1.2_meta_storage.html#dicommeta的核心设计共享与非共享元数据的分离",
    "title": "元数据存储机制",
    "section": "3. DicomMeta的核心设计：共享与非共享元数据的分离",
    "text": "3. DicomMeta的核心设计：共享与非共享元数据的分离\nDicomMeta 是 DiCube 中负责高效管理元数据的核心类。它的设计理念直击传统DICOM的痛点，通过引入共享/非共享元数据分离机制，从根本上解决了冗余问题。\n\n共享 (Shared) 元数据: 在整个图像序列中保持不变的信息，如 PatientID、StudyInstanceUID、Modality 等。这部分数据只存储一次。\n非共享 (Per-Slice) 元数据: 每个切片独有的信息，如 InstanceNumber、ImagePositionPatient、SliceLocation 等。这部分数据会为每个切片单独存储。\n\n当从DICOM文件夹加载数据时，DiCube会自动分析并分离这两类元数据。\n\nimport dicube\n\n# 从DICOM文件夹加载数据，DiCube在内部自动完成元数据分离\ndcb_image = dicube.load_from_dicom_folder(dicom_dir)\ndicube.save(dcb_image, \"temp_demo.dcbs\")\n\n# 获取DicomMeta对象有两种方式：\n# 方式1：直接从DiCube文件加载元数据\nmeta = dicube.load_meta(\"temp_demo.dcbs\")\n# 方式2：从已加载的DiCubeImage对象中获取\nmeta = dcb_image.dicom_meta\n\n# display() 方法可以清晰地展示元数据的分层结构\nmeta.display()\n\nShared Metadata:\n        Tag                                 Name                                                          Value\n(0010,0010)                          PatientName                                    {'Alphabetic': 'Anonymous'}\n(0010,0020)                            PatientID                                                        ID12345\n(0008,0020)                            StudyDate                                                       20230720\n(0008,1030)                     StudyDescription                                                       31111568\n(0008,103E)                    SeriesDescription                                             MonoE 90keV[HU] 90\n(0008,0060)                             Modality                                                             CT\n(0008,0005)                 SpecificCharacterSet                                                     ISO_IR 100\n(0008,0008)                            ImageType                       [DERIVED, SECONDARY, AXIAL, MONO_ENERGY]\n(0008,0012)                 InstanceCreationDate                                                       20241120\n(0008,0016)                          SOPClassUID                                      1.2.840.10008.5.1.4.1.1.2\n(0008,0021)                           SeriesDate                                                       20241120\n(0008,0022)                      AcquisitionDate                                                       20230720\n(0008,0023)                          ContentDate                                                       20230720\n(0008,002A)                  AcquisitionDateTime                                          20230720104604.080000\n(0008,0030)                            StudyTime                                                  103922.235000\n(0008,0031)                           SeriesTime                                                  202944.289009\n(0008,0032)                      AcquisitionTime                                                         104604\n(0008,0050)                      AccessionNumber                                                           None\n(0008,0064)                       ConversionType                                                            WSD\n(0008,0070)                         Manufacturer                                                        Philips\n(0008,0080)                      InstitutionName                                                   Hospital XYZ\n(0008,0081)                   InstitutionAddress                                                    123 Fake St\n(0008,0090)               ReferringPhysicianName                                 {'Alphabetic': 'Dr. John Doe'}\n(0008,1010)                          StationName                                                           None\n(0008,1040)          InstitutionalDepartmentName                                                           None\n(0008,1080)        AdmittingDiagnosesDescription                                                           None\n(0008,1090)                ManufacturerModelName                                                    Spectral CT\n(0008,3010)                  IrradiationEventUID 1.3.46.670589.33.1.63825446729785071000004.5383234939564892192\n(0010,0030)                     PatientBirthDate                                                       19000101\n(0010,0040)                           PatientSex                                                              O\n(0010,1010)                           PatientAge                                                           045Y\n(0018,0010)                   ContrastBolusAgent                                                         Iodine\n(0018,0015)                     BodyPartExamined                                                          HEART\n(0018,0022)                          ScanOptions                                                          HELIX\n(0018,0050)                       SliceThickness                                                            0.9\n(0018,0060)                                  KVP                                                          120.0\n(0018,0090)               DataCollectionDiameter                                                          500.0\n(0018,1000)                   DeviceSerialNumber                                                          10071\n(0018,1020)                     SoftwareVersions                                                    [4.1.0.0, ]\n(0018,1030)                         ProtocolName                                 HX Coronary CTA HR&lt;75 /Cardiac\n(0018,1040)                   ContrastBolusRoute                                                             IV\n(0018,1041)                  ContrastBolusVolume                                                            0.0\n(0018,1044)               ContrastBolusTotalDose                                                            0.0\n(0018,1046)                     ContrastFlowRate                                                           None\n(0018,1047)                 ContrastFlowDuration                                                           None\n(0018,1049) ContrastBolusIngredientConcentration                                                            0.0\n(0018,1088)                            HeartRate                                                           None\n(0018,1100)               ReconstructionDiameter                                                          220.0\n(0018,1110)             DistanceSourceToDetector                                                         1040.0\n(0018,1111)              DistanceSourceToPatient                                                          570.0\n(0018,1120)                   GantryDetectorTilt                                                            0.0\n(0018,1130)                          TableHeight                                                          161.3\n(0018,1150)                         ExposureTime                                                           1359\n(0018,1151)                      XRayTubeCurrent                                                            359\n(0018,1152)                             Exposure                                                            488\n(0018,1160)                           FilterType                                                             CB\n(0018,1210)                    ConvolutionKernel                                                             CB\n(0018,5100)                      PatientPosition                                                            FFS\n(0018,9302)                      AcquisitionType                                                         SPIRAL\n(0018,9305)                       RevolutionTime                                                          0.272\n(0018,9306)               SingleCollimationWidth                                                          0.625\n(0018,9307)                TotalCollimationWidth                                                           80.0\n(0018,9309)                           TableSpeed                                                           58.8\n(0018,9310)                 TableFeedPerRotation                                                           16.0\n(0018,9311)                    SpiralPitchFactor                                                            0.2\n(0018,9323)               ExposureModulationType                                                            ACS\n(0018,9324)                  EstimatedDoseSaving                                                           None\n(0018,9334)                      FluoroscopyFlag                                                             NO\n(0018,9345)                              CTDIvol                                                           37.8\n(0020,000D)                     StudyInstanceUID   1.3.46.670589.50.2.37266317681035895631.31745749383280305035\n(0020,000E)                    SeriesInstanceUID    1.3.46.670589.50.2.5382016093075676224.32125520682478807182\n(0020,0010)                              StudyID                                                           8802\n(0020,0011)                         SeriesNumber                                                          20214\n(0020,0012)                    AcquisitionNumber                                                              5\n(0020,0037)              ImageOrientationPatient                                 [1.0, 0.0, 0.0, 0.0, 1.0, 0.0]\n(0020,0052)                  FrameOfReferenceUID 1.3.46.670589.33.1.63825446449932213200002.5629594368916637476\n(0020,1040)           PositionReferenceIndicator                                                           None\n(0020,4000)                        ImageComments                                             MonoE 90keV[HU] 90\n(0028,0002)                      SamplesPerPixel                                                              1\n(0028,0004)            PhotometricInterpretation                                                    MONOCHROME2\n(0028,0010)                                 Rows                                                            512\n(0028,0011)                              Columns                                                            512\n(0028,0030)                         PixelSpacing                                         [0.4296875, 0.4296875]\n(0028,0100)                        BitsAllocated                                                             16\n(0028,0101)                           BitsStored                                                             16\n(0028,0102)                              HighBit                                                             15\n(0028,0103)                  PixelRepresentation                                                              0\n(0028,1050)                         WindowCenter                                                   [90.0, 90.0]\n(0028,1051)                          WindowWidth                                                 [750.0, 750.0]\n(0028,1052)                     RescaleIntercept                                                        -1024.0\n(0028,1053)                         RescaleSlope                                                            1.0\n(0028,1054)                          RescaleType                                                             HU\n(0028,2110)                LossyImageCompression                                                             00\n(0032,1032)                  RequestingPhysician                                                           None\n(00E1,0010)                                                                                            ELSCINT1\n(00E1,1002)                                                                                               Adult\n(00E1,1036)                                                                                                 YES\n(00E1,1040)                                                                                     MonoE 90keV[HU]\n(00E1,1042)                                                                              Noah_HP_Manual_SPTable\n(00E1,1046)                                                                                                None\n(00E1,1050)                                                                                               3.622\n(00E1,1063)                                                                                    MANDARIN_CHINESE\n(00E1,10A0)                                                            Patient Data was modified on 2024?11?20?\n(00E1,10E1)                                                                                                   6\n(01E1,0010)                                                                                            ELSCINT1\n(01E1,1017)                                         1.3.46.670589.50.2.2479212041345812297.27881271853652245233\n(01E1,1023)                                                                                                  No\n(01E1,1053)                                                                                                None\n(01F1,0010)                                                                                            ELSCINT1\n(01F1,1001)                                                                                              SPIRAL\n(01F1,1002)                                                                                            STANDARD\n(01F1,1004)                                                                                              NORMAL\n(01F1,1008)                                                                                               104.4\n(01F1,100C)                                                                                      [0.068, 0.036]\n(01F1,100E)                                                                                                 0.0\n(01F1,100F)                                                                                                 OUT\n(01F1,1026)                                                                                                 0.2\n(01F1,1027)                                                                                               0.272\n(01F1,1032)                                                                                       RIGHT_ON_LEFT\n(01F1,1039)                                                                                                 ECG\n(01F1,1041)                                                                                                 75%\n(01F1,1044)                                                                                                None\n(01F1,1045)                                                                                                  64\n(01F1,1046)                                                                                               0.625\n(01F1,1047)                                                                                                  3D\n(01F1,1049)                                                                                                None\n(01F1,104A)                                                                                                NONE\n(01F1,104B)                                                                                           128x0.625\n(01F1,104D)                                                                                       YES (CARDIAC)\n(01F1,104E)                                                                                             Cardiac\n(01F1,104F)                                                                                                  31\n(01F1,1054)                                                                                                  32\n(01F1,1055)                                                                                    27.0607663040348\n(01F7,0010)                                                                                            ELSCINT1\n(01F7,1014)                                                                                                None\n(01F7,1019)                                                                                                None\n(01F7,1029)                                                                                                None\n(01F7,1031)                                                                                                None\n(01F7,1077)                                                                                                None\n(01F7,1078)                                                                                                None\n(01F7,1081)                                                                                                None\n(01F7,108B)                                                                                                None\n(01F7,1095)                                                                                                None\n(01F7,1097)                                                                                                None\n(01F7,1099)                                                                                                None\n(01F7,109B)                                                                                                None\n(01F7,109E)                                                                                                None\n(01F7,10C1)                                                                                                None\n(01F7,10C2)                                                                                                None\n(01F7,10C3)                                                                                                None\n(01F7,10CB)                                                                                                90.0\n(01F7,10CD)                                                                                                 YES\n(01F7,10D0)                                                                                                None\n(01F7,10D1)                                                                                                None\n(01F7,10D2)                                                                                                None\n(01F7,10D4)                                                                                                body\n(01F7,10D5)                                                                                                None\n(01F7,10D6)                                                                                                   5\n(01F7,10D7)                                                                                                None\n(07A1,0010)                                                                                            ELSCINT1\n(07A1,1010)                                                                                               4.0.0\n(1001,0010)                                                                              Philips Imaging DD 124\n(1001,0011)                                                                              Philips Imaging DD 001\n(1001,1118)                                                                                                 YES\n(2001,0010)                                                                              Philips Imaging DD 001\n(2001,106E)                                                                                            SCSeries\n(2005,0010)                                                                           Philips MR Imaging DD 005\n(2005,0011)                                                                           Philips MR Imaging DD 004\n(2005,0012)                                                                           Philips MR Imaging DD 003\n(2005,1026)                                                                                                   N\n(2005,1182)                                                                                                   0\n(2005,1213)                                                                                                   0\n\nNon-Shared Metadata:\n          (0020,0013)    (0020,1041)                 (0020,0032)           (0008,0013)                                                   (0008,0018)  (0008,0033)                          (0018,9318)    (0018,9327)  (00E1,10C4)  (01F7,1027)                                                                                                                                      (01F7,10CC)                             (1001,1003)\nTag       (0020,0013)    (0020,1041)                 (0020,0032)           (0008,0013)                                                   (0008,0018)  (0008,0033)                          (0018,9318)    (0018,9327)  (00E1,10C4)  (01F7,1027)                                                                                                                                      (01F7,10CC)                             (1001,1003)\nName   InstanceNumber  SliceLocation        ImagePositionPatient  InstanceCreationTime                                                SOPInstanceUID  ContentTime    ReconstructionTargetCenterPatient  TablePosition                                                                                                                                                                                                                   \nI10                 1       -1371.75  [-102.08, -31.26, 1371.75]         202944.307946    1.3.46.670589.50.2.1881579110924413767.2507494869181507701   104604.937  [-0.068, 93.73599999999999, 2743.5]         721.75       721.75         None  5.1: Build:1 29-Dec-2016 11:34 COMB_SCATT(250)_PE(250)_N_B_U_C cns:T, CFGs:7 created: 20-Jul-2023 10:50:10 isp9_compatible edge(1,0)subvol(1,0)  MR Import Filter 9/11/2024 10:39:59 PM\nI20                 2        -1371.3   [-102.08, -31.26, 1371.3]         202944.314926  1.3.46.670589.50.2.35721399143651105609.24968344664115237489   104604.944  [-0.068, 93.73599999999999, 2742.6]     722.200012   722.200012         None  5.1: Build:1 29-Dec-2016 11:34 COMB_SCATT(250)_PE(250)_N_B_U_C cns:T, CFGs:7 created: 20-Jul-2023 10:50:10 isp9_compatible edge(0,0)subvol(0,0)  MR Import Filter 9/11/2024 10:40:00 PM\nI30                 3       -1370.85  [-102.08, -31.26, 1370.85]         202944.317912   1.3.46.670589.50.2.8789317754255285067.23081326131168745474   104604.952  [-0.068, 93.73599999999999, 2741.7]     722.650024   722.650024         None  5.1: Build:1 29-Dec-2016 11:34 COMB_SCATT(250)_PE(250)_N_B_U_C cns:T, CFGs:7 created: 20-Jul-2023 10:50:10 isp9_compatible edge(0,0)subvol(0,0)  MR Import Filter 9/11/2024 10:40:00 PM\nI40                 4        -1370.4   [-102.08, -31.26, 1370.4]         202944.320903  1.3.46.670589.50.2.18669684383987645770.29880994014088560851   104604.960  [-0.068, 93.73599999999999, 2740.8]     723.099976   723.099976         None  5.1: Build:1 29-Dec-2016 11:34 COMB_SCATT(250)_PE(250)_N_B_U_C cns:T, CFGs:7 created: 20-Jul-2023 10:50:10 isp9_compatible edge(0,0)subvol(0,0)  MR Import Filter 9/11/2024 10:40:00 PM\nI50                 5       -1369.95  [-102.08, -31.26, 1369.95]         202944.323896   1.3.46.670589.50.2.2882641883710023247.22761359293705351605   104604.967  [-0.068, 93.73599999999999, 2739.9]     723.549988   723.549988         None  5.1: Build:1 29-Dec-2016 11:34 COMB_SCATT(250)_PE(250)_N_B_U_C cns:T, CFGs:7 created: 20-Jul-2023 10:50:10 isp9_compatible edge(0,0)subvol(0,0)  MR Import Filter 9/11/2024 10:40:00 PM\nI60                 6        -1369.5   [-102.08, -31.26, 1369.5]         202944.326883    1.3.46.670589.50.2.537526400662512962.28124135962015285099   104604.975  [-0.068, 93.73599999999999, 2739.0]          724.0        724.0         None  5.1: Build:1 29-Dec-2016 11:34 COMB_SCATT(250)_PE(250)_N_B_U_C cns:T, CFGs:7 created: 20-Jul-2023 10:50:10 isp9_compatible edge(0,0)subvol(0,0)  MR Import Filter 9/11/2024 10:40:00 PM\nI70                 7       -1369.05  [-102.08, -31.26, 1369.05]         202944.328880   1.3.46.670589.50.2.38525026053482635342.2485010123835666701   104604.983  [-0.068, 93.73599999999999, 2738.1]     724.450012   724.450012         None  5.1: Build:1 29-Dec-2016 11:34 COMB_SCATT(250)_PE(250)_N_B_U_C cns:T, CFGs:7 created: 20-Jul-2023 10:50:10 isp9_compatible edge(0,0)subvol(0,0)  MR Import Filter 9/11/2024 10:40:00 PM\nI80                 8        -1368.6   [-102.08, -31.26, 1368.6]         202944.331865  1.3.46.670589.50.2.14498080441156526668.23204457564223125097   104604.990  [-0.068, 93.73599999999999, 2737.2]     724.900024   724.900024         None  5.1: Build:1 29-Dec-2016 11:34 COMB_SCATT(250)_PE(250)_N_B_U_C cns:T, CFGs:7 created: 20-Jul-2023 10:50:10 isp9_compatible edge(0,0)subvol(0,0)  MR Import Filter 9/11/2024 10:40:01 PM\nI90                 9       -1368.15  [-102.08, -31.26, 1368.15]         202944.335852   1.3.46.670589.50.2.4028538749459669057.24933309493507334305   104604.998  [-0.068, 93.73599999999999, 2736.3]     725.349976   725.349976         None  5.1: Build:1 29-Dec-2016 11:34 COMB_SCATT(250)_PE(250)_N_B_U_C cns:T, CFGs:7 created: 20-Jul-2023 10:50:10 isp9_compatible edge(0,0)subvol(0,0)  MR Import Filter 9/11/2024 10:40:01 PM\nI100               10        -1367.7   [-102.08, -31.26, 1367.7]         202944.338843  1.3.46.670589.50.2.28711831953619332680.22747989282102013363   104605.006  [-0.068, 93.73599999999999, 2735.4]     725.799988   725.799988         None  5.1: Build:1 29-Dec-2016 11:34 COMB_SCATT(250)_PE(250)_N_B_U_C cns:T, CFGs:7 created: 20-Jul-2023 10:50:10 isp9_compatible edge(0,0)subvol(0,0)  MR Import Filter 9/11/2024 10:40:01 PM\nI110               11       -1367.25  [-102.08, -31.26, 1367.25]         202944.341833    1.3.46.670589.50.2.42742310733576484417.302211981169669052   104605.014  [-0.068, 93.73599999999999, 2734.5]         726.25       726.25         None  5.1: Build:1 29-Dec-2016 11:34 COMB_SCATT(250)_PE(250)_N_B_U_C cns:T, CFGs:7 created: 20-Jul-2023 10:50:10 isp9_compatible edge(0,0)subvol(0,0)  MR Import Filter 9/11/2024 10:40:01 PM\nI120               12        -1366.8   [-102.08, -31.26, 1366.8]         202944.343829    1.3.46.670589.50.2.818035494244150599.26461679241234279800   104605.021  [-0.068, 93.73599999999999, 2733.6]     726.700012   726.700012         None  5.1: Build:1 29-Dec-2016 11:34 COMB_SCATT(250)_PE(250)_N_B_U_C cns:T, CFGs:7 created: 20-Jul-2023 10:50:10 isp9_compatible edge(0,0)subvol(0,0)  MR Import Filter 9/11/2024 10:40:01 PM\nI130               13       -1366.35  [-102.08, -31.26, 1366.35]         202944.346816  1.3.46.670589.50.2.11175331902977939789.25000696192939990054   104605.029  [-0.068, 93.73599999999999, 2732.7]     727.150024   727.150024         None  5.1: Build:1 29-Dec-2016 11:34 COMB_SCATT(250)_PE(250)_N_B_U_C cns:T, CFGs:7 created: 20-Jul-2023 10:50:10 isp9_compatible edge(0,0)subvol(0,0)  MR Import Filter 9/11/2024 10:40:01 PM\nI140               14        -1365.9   [-102.08, -31.26, 1365.9]         202944.349806   1.3.46.670589.50.2.19145860261463789126.2172275137314738258   104605.037  [-0.068, 93.73599999999999, 2731.8]     727.599976   727.599976         None  5.1: Build:1 29-Dec-2016 11:34 COMB_SCATT(250)_PE(250)_N_B_U_C cns:T, CFGs:7 created: 20-Jul-2023 10:50:10 isp9_compatible edge(0,0)subvol(0,0)  MR Import Filter 9/11/2024 10:40:01 PM\nI150               15       -1365.45  [-102.08, -31.26, 1365.45]         202944.352796   1.3.46.670589.50.2.3474340299541519426.26123409782206202112   104605.044  [-0.068, 93.73599999999999, 2730.9]     728.049988   728.049988         None  5.1: Build:1 29-Dec-2016 11:34 COMB_SCATT(250)_PE(250)_N_B_U_C cns:T, CFGs:7 created: 20-Jul-2023 10:50:10 isp9_compatible edge(0,0)subvol(0,0)  MR Import Filter 9/11/2024 10:39:59 PM\nI160               16        -1365.0   [-102.08, -31.26, 1365.0]         202944.356786   1.3.46.670589.50.2.3145507384937819460.28736036911768858832   104605.052  [-0.068, 93.73599999999999, 2730.0]          728.5        728.5         None  5.1: Build:1 29-Dec-2016 11:34 COMB_SCATT(250)_PE(250)_N_B_U_C cns:T, CFGs:7 created: 20-Jul-2023 10:50:10 isp9_compatible edge(0,0)subvol(0,0)  MR Import Filter 9/11/2024 10:40:00 PM\nI170               17       -1364.55  [-102.08, -31.26, 1364.55]         202944.358776  1.3.46.670589.50.2.33520882772653497415.22164274502430963933   104605.060  [-0.068, 93.73599999999999, 2729.1]     728.950012   728.950012         None  5.1: Build:1 29-Dec-2016 11:34 COMB_SCATT(250)_PE(250)_N_B_U_C cns:T, CFGs:7 created: 20-Jul-2023 10:50:10 isp9_compatible edge(0,0)subvol(0,0)  MR Import Filter 9/11/2024 10:40:00 PM\nI180               18        -1364.1   [-102.08, -31.26, 1364.1]         202944.361766  1.3.46.670589.50.2.39904464152523108160.27654372753159686712   104605.068  [-0.068, 93.73599999999999, 2728.2]     729.400024   729.400024         None  5.1: Build:1 29-Dec-2016 11:34 COMB_SCATT(250)_PE(250)_N_B_U_C cns:T, CFGs:7 created: 20-Jul-2023 10:50:10 isp9_compatible edge(0,0)subvol(0,0)  MR Import Filter 9/11/2024 10:40:00 PM\nI190               19       -1363.65  [-102.08, -31.26, 1363.65]         202944.364755    1.3.46.670589.50.2.4162642840370907972.2751014168124679299   104605.075  [-0.068, 93.73599999999999, 2727.3]     729.849976   729.849976         None  5.1: Build:1 29-Dec-2016 11:34 COMB_SCATT(250)_PE(250)_N_B_U_C cns:T, CFGs:7 created: 20-Jul-2023 10:50:10 isp9_compatible edge(0,0)subvol(0,0)  MR Import Filter 9/11/2024 10:40:00 PM\nI200               20        -1363.2   [-102.08, -31.26, 1363.2]         202944.368742    1.3.46.670589.50.2.3520501671890697281.2198189180933487009   104605.083  [-0.068, 93.73599999999999, 2726.4]     730.299988   730.299988         None  5.1: Build:1 29-Dec-2016 11:34 COMB_SCATT(250)_PE(250)_N_B_U_C cns:T, CFGs:7 created: 20-Jul-2023 10:50:10 isp9_compatible edge(0,0)subvol(0,0)  MR Import Filter 9/11/2024 10:40:00 PM\nI210               21       -1362.75  [-102.08, -31.26, 1362.75]         202944.371733  1.3.46.670589.50.2.38838436363005208643.29429751954165345142   104605.091  [-0.068, 93.73599999999999, 2725.5]         730.75       730.75         None  5.1: Build:1 29-Dec-2016 11:34 COMB_SCATT(250)_PE(250)_N_B_U_C cns:T, CFGs:7 created: 20-Jul-2023 10:50:10 isp9_compatible edge(0,0)subvol(0,0)  MR Import Filter 9/11/2024 10:40:00 PM\nI220               22        -1362.3   [-102.08, -31.26, 1362.3]         202944.374723  1.3.46.670589.50.2.19790223862128516686.24004072123596768947   104605.098  [-0.068, 93.73599999999999, 2724.6]     731.200012   731.200012         None  5.1: Build:1 29-Dec-2016 11:34 COMB_SCATT(250)_PE(250)_N_B_U_C cns:T, CFGs:7 created: 20-Jul-2023 10:50:10 isp9_compatible edge(0,0)subvol(0,0)  MR Import Filter 9/11/2024 10:40:01 PM\nI230               23       -1361.85  [-102.08, -31.26, 1361.85]         202944.377712  1.3.46.670589.50.2.38384420134198217807.24901860612753601276   104605.106  [-0.068, 93.73599999999999, 2723.7]     731.650024   731.650024         None  5.1: Build:1 29-Dec-2016 11:34 COMB_SCATT(250)_PE(250)_N_B_U_C cns:T, CFGs:7 created: 20-Jul-2023 10:50:10 isp9_compatible edge(0,0)subvol(0,0)  MR Import Filter 9/11/2024 10:40:01 PM\nI240               24        -1361.4   [-102.08, -31.26, 1361.4]         202944.380703  1.3.46.670589.50.2.13988458773088610890.26270840142276533369   104605.114  [-0.068, 93.73599999999999, 2722.8]     732.099976   732.099976         None  5.1: Build:1 29-Dec-2016 11:34 COMB_SCATT(250)_PE(250)_N_B_U_C cns:T, CFGs:7 created: 20-Jul-2023 10:50:10 isp9_compatible edge(0,0)subvol(0,0)  MR Import Filter 9/11/2024 10:40:01 PM\nI250               25       -1360.95  [-102.08, -31.26, 1360.95]         202944.386682  1.3.46.670589.50.2.29874135333976679753.30101939221087907731   104605.121  [-0.068, 93.73599999999999, 2721.9]     732.549988   732.549988         None  5.1: Build:1 29-Dec-2016 11:34 COMB_SCATT(250)_PE(250)_N_B_U_C cns:T, CFGs:7 created: 20-Jul-2023 10:50:10 isp9_compatible edge(0,0)subvol(0,0)  MR Import Filter 9/11/2024 10:40:01 PM\nI260               26        -1360.5   [-102.08, -31.26, 1360.5]         202944.394656   1.3.46.670589.50.2.2517720122575099723.21648816312142063122   104605.129  [-0.068, 93.73599999999999, 2721.0]          733.0        733.0         None  5.1: Build:1 29-Dec-2016 11:34 COMB_SCATT(250)_PE(250)_N_B_U_C cns:T, CFGs:7 created: 20-Jul-2023 10:50:10 isp9_compatible edge(0,0)subvol(0,0)  MR Import Filter 9/11/2024 10:40:01 PM\nI270               27       -1360.05  [-102.08, -31.26, 1360.05]         202944.396653  1.3.46.670589.50.2.28834477103151143239.23675564683532779167   104605.137  [-0.068, 93.73599999999999, 2720.1]     733.450012   733.450012         None  5.1: Build:1 29-Dec-2016 11:34 COMB_SCATT(250)_PE(250)_N_B_U_C cns:T, CFGs:7 created: 20-Jul-2023 10:50:10 isp9_compatible edge(0,0)subvol(0,0)  MR Import Filter 9/11/2024 10:40:01 PM\nI280               28        -1359.6   [-102.08, -31.26, 1359.6]         202944.400636  1.3.46.670589.50.2.14770051801058197574.31550421101024182255   104605.144  [-0.068, 93.73599999999999, 2719.2]     733.900024   733.900024         None  5.1: Build:1 29-Dec-2016 11:34 COMB_SCATT(250)_PE(250)_N_B_U_C cns:T, CFGs:7 created: 20-Jul-2023 10:50:10 isp9_compatible edge(0,0)subvol(0,0)  MR Import Filter 9/11/2024 10:40:01 PM\nI290               29       -1359.15  [-102.08, -31.26, 1359.15]         202944.403626   1.3.46.670589.50.2.1637684601179615048.31978496763692194713   104605.152  [-0.068, 93.73599999999999, 2718.3]     734.349976   734.349976         None  5.1: Build:1 29-Dec-2016 11:34 COMB_SCATT(250)_PE(250)_N_B_U_C cns:T, CFGs:7 created: 20-Jul-2023 10:50:10 isp9_compatible edge(0,0)subvol(0,0)  MR Import Filter 9/11/2024 10:39:59 PM\nI300               30        -1358.7   [-102.08, -31.26, 1358.7]         202944.406616  1.3.46.670589.50.2.22907237351087620931.26482103603152131214   104605.160  [-0.068, 93.73599999999999, 2717.4]     734.799988   734.799988         None  5.1: Build:1 29-Dec-2016 11:34 COMB_SCATT(250)_PE(250)_N_B_U_C cns:T, CFGs:7 created: 20-Jul-2023 10:50:10 isp9_compatible edge(0,0)subvol(0,0)  MR Import Filter 9/11/2024 10:40:00 PM\nI310               31       -1358.25  [-102.08, -31.26, 1358.25]         202944.408613  1.3.46.670589.50.2.23545346223075884616.30472950653813260901   104605.167  [-0.068, 93.73599999999999, 2716.5]         735.25       735.25         None  5.1: Build:1 29-Dec-2016 11:34 COMB_SCATT(250)_PE(250)_N_B_U_C cns:T, CFGs:7 created: 20-Jul-2023 10:50:10 isp9_compatible edge(0,0)subvol(0,0)  MR Import Filter 9/11/2024 10:40:00 PM\nI320               32        -1357.8   [-102.08, -31.26, 1357.8]         202944.411599  1.3.46.670589.50.2.13039769912633275212.25503874602606992538   104605.175  [-0.068, 93.73599999999999, 2715.6]     735.700012   735.700012         None  5.1: Build:1 29-Dec-2016 11:34 COMB_SCATT(250)_PE(250)_N_B_U_C cns:T, CFGs:7 created: 20-Jul-2023 10:50:10 isp9_compatible edge(0,0)subvol(0,0)  MR Import Filter 9/11/2024 10:40:00 PM\nI330               33       -1357.35  [-102.08, -31.26, 1357.35]         202944.414590  1.3.46.670589.50.2.34142106921013941836.21789504503825411425   104605.183  [-0.068, 93.73599999999999, 2714.7]     736.150024   736.150024         None  5.1: Build:1 29-Dec-2016 11:34 COMB_SCATT(250)_PE(250)_N_B_U_C cns:T, CFGs:7 created: 20-Jul-2023 10:50:10 isp9_compatible edge(0,0)subvol(0,0)  MR Import Filter 9/11/2024 10:40:00 PM\nI340               34        -1356.9   [-102.08, -31.26, 1356.9]         202944.417579   1.3.46.670589.50.2.7444960951866650700.23274109453714377838   104605.191  [-0.068, 93.73599999999999, 2713.8]     736.599976   736.599976         None  5.1: Build:1 29-Dec-2016 11:34 COMB_SCATT(250)_PE(250)_N_B_U_C cns:T, CFGs:7 created: 20-Jul-2023 10:50:10 isp9_compatible edge(0,0)subvol(0,0)  MR Import Filter 9/11/2024 10:40:00 PM\nI350               35       -1356.45  [-102.08, -31.26, 1356.45]         202944.420570    1.3.46.670589.50.2.608113865456718145.29557067033605916937   104605.198  [-0.068, 93.73599999999999, 2712.9]     737.049988   737.049988         None  5.1: Build:1 29-Dec-2016 11:34 COMB_SCATT(250)_PE(250)_N_B_U_C cns:T, CFGs:7 created: 20-Jul-2023 10:50:10 isp9_compatible edge(0,0)subvol(0,0)  MR Import Filter 9/11/2024 10:40:00 PM\nI360               36        -1356.0   [-102.08, -31.26, 1356.0]         202944.423563   1.3.46.670589.50.2.2139329972022183746.28100104742658937957   104605.206  [-0.068, 93.73599999999999, 2712.0]          737.5        737.5         None  5.1: Build:1 29-Dec-2016 11:34 COMB_SCATT(250)_PE(250)_N_B_U_C cns:T, CFGs:7 created: 20-Jul-2023 10:50:10 isp9_compatible edge(0,0)subvol(0,0)  MR Import Filter 9/11/2024 10:40:01 PM\nI370               37       -1355.55  [-102.08, -31.26, 1355.55]         202944.429540   1.3.46.670589.50.2.1325257796320374607.29210806051110662913   104605.214  [-0.068, 93.73599999999999, 2711.1]     737.950012   737.950012         None  5.1: Build:1 29-Dec-2016 11:34 COMB_SCATT(250)_PE(250)_N_B_U_C cns:T, CFGs:7 created: 20-Jul-2023 10:50:10 isp9_compatible edge(0,0)subvol(0,0)  MR Import Filter 9/11/2024 10:40:01 PM\nI380               38        -1355.1   [-102.08, -31.26, 1355.1]         202944.431533  1.3.46.670589.50.2.31053468801141740355.25915358591648271034   104605.221  [-0.068, 93.73599999999999, 2710.2]     738.400024   738.400024         None  5.1: Build:1 29-Dec-2016 11:34 COMB_SCATT(250)_PE(250)_N_B_U_C cns:T, CFGs:7 created: 20-Jul-2023 10:50:10 isp9_compatible edge(0,0)subvol(0,0)  MR Import Filter 9/11/2024 10:40:01 PM\nI390               39       -1354.65  [-102.08, -31.26, 1354.65]         202944.441499  1.3.46.670589.50.2.32406761151315628104.21679589224050184276   104605.229  [-0.068, 93.73599999999999, 2709.3]     738.849976   738.849976         None  5.1: Build:1 29-Dec-2016 11:34 COMB_SCATT(250)_PE(250)_N_B_U_C cns:T, CFGs:7 created: 20-Jul-2023 10:50:10 isp9_compatible edge(0,0)subvol(0,0)  MR Import Filter 9/11/2024 10:40:01 PM\nI400               40        -1354.2   [-102.08, -31.26, 1354.2]         202944.444489  1.3.46.670589.50.2.11729766592564690249.31937865511723303641   104605.237  [-0.068, 93.73599999999999, 2708.4]     739.299988   739.299988         None  5.1: Build:1 29-Dec-2016 11:34 COMB_SCATT(250)_PE(250)_N_B_U_C cns:T, CFGs:7 created: 20-Jul-2023 10:50:10 isp9_compatible edge(0,0)subvol(0,0)  MR Import Filter 9/11/2024 10:40:01 PM\nI410               41       -1353.75  [-102.08, -31.26, 1353.75]         202944.447480  1.3.46.670589.50.2.19128938762745574478.26084267841659422513   104605.244  [-0.068, 93.73599999999999, 2707.5]         739.75       739.75         None  5.1: Build:1 29-Dec-2016 11:34 COMB_SCATT(250)_PE(250)_N_B_U_C cns:T, CFGs:7 created: 20-Jul-2023 10:50:10 isp9_compatible edge(0,0)subvol(0,0)  MR Import Filter 9/11/2024 10:40:01 PM\nI420               42        -1353.3   [-102.08, -31.26, 1353.3]         202944.450470      1.3.46.670589.50.2.9579915128632133.25971655883358142962   104605.252  [-0.068, 93.73599999999999, 2706.6]     740.200012   740.200012         None  5.1: Build:1 29-Dec-2016 11:34 COMB_SCATT(250)_PE(250)_N_B_U_C cns:T, CFGs:7 created: 20-Jul-2023 10:50:10 isp9_compatible edge(0,0)subvol(0,0)  MR Import Filter 9/11/2024 10:40:01 PM\nI430               43       -1352.85  [-102.08, -31.26, 1352.85]         202944.453460      1.3.46.670589.50.2.77815846236629574.2285790074676204849   104605.260  [-0.068, 93.73599999999999, 2705.7]     740.650024   740.650024         None  5.1: Build:1 29-Dec-2016 11:34 COMB_SCATT(250)_PE(250)_N_B_U_C cns:T, CFGs:7 created: 20-Jul-2023 10:50:10 isp9_compatible edge(0,0)subvol(0,0)  MR Import Filter 9/11/2024 10:40:01 PM\nI440               44        -1352.4   [-102.08, -31.26, 1352.4]         202944.456455  1.3.46.670589.50.2.31190304712339958340.31659747702825744811   104605.267  [-0.068, 93.73599999999999, 2704.8]     741.099976   741.099976         None  5.1: Build:1 29-Dec-2016 11:34 COMB_SCATT(250)_PE(250)_N_B_U_C cns:T, CFGs:7 created: 20-Jul-2023 10:50:10 isp9_compatible edge(0,0)subvol(0,0)  MR Import Filter 9/11/2024 10:40:01 PM\nI450               45       -1351.95  [-102.08, -31.26, 1351.95]         202944.461437   1.3.46.670589.50.2.5545379061324578380.24948609772945500259   104605.275  [-0.068, 93.73599999999999, 2703.9]     741.549988   741.549988         None  5.1: Build:1 29-Dec-2016 11:34 COMB_SCATT(250)_PE(250)_N_B_U_C cns:T, CFGs:7 created: 20-Jul-2023 10:50:10 isp9_compatible edge(0,0)subvol(0,0)  MR Import Filter 9/11/2024 10:40:01 PM\nI460               46        -1351.5   [-102.08, -31.26, 1351.5]         202944.464427   1.3.46.670589.50.2.3444839864640050502.28366435461862118558   104605.283  [-0.068, 93.73599999999999, 2703.0]          742.0        742.0         None  5.1: Build:1 29-Dec-2016 11:34 COMB_SCATT(250)_PE(250)_N_B_U_C cns:T, CFGs:7 created: 20-Jul-2023 10:50:10 isp9_compatible edge(0,0)subvol(0,0)  MR Import Filter 9/11/2024 10:40:01 PM\nI470               47       -1351.05  [-102.08, -31.26, 1351.05]         202944.467413  1.3.46.670589.50.2.12383102362904014666.21769974191287950195   104605.291  [-0.068, 93.73599999999999, 2702.1]     742.450012   742.450012         None  5.1: Build:1 29-Dec-2016 11:34 COMB_SCATT(250)_PE(250)_N_B_U_C cns:T, CFGs:7 created: 20-Jul-2023 10:50:10 isp9_compatible edge(0,0)subvol(0,0)  MR Import Filter 9/11/2024 10:40:01 PM\nI480               48        -1350.6   [-102.08, -31.26, 1350.6]         202944.470403  1.3.46.670589.50.2.15784408592712384330.27859551453048532958   104605.298  [-0.068, 93.73599999999999, 2701.2]     742.900024   742.900024         None  5.1: Build:1 29-Dec-2016 11:34 COMB_SCATT(250)_PE(250)_N_B_U_C cns:T, CFGs:7 created: 20-Jul-2023 10:50:10 isp9_compatible edge(0,0)subvol(0,0)  MR Import Filter 9/11/2024 10:40:02 PM\nI490               49       -1350.15  [-102.08, -31.26, 1350.15]         202944.472396   1.3.46.670589.50.2.5840737721629939014.30138206622609146281   104605.306  [-0.068, 93.73599999999999, 2700.3]     743.349976   743.349976         None  5.1: Build:1 29-Dec-2016 11:34 COMB_SCATT(250)_PE(250)_N_B_U_C cns:T, CFGs:7 created: 20-Jul-2023 10:50:10 isp9_compatible edge(0,0)subvol(0,0)  MR Import Filter 9/11/2024 10:40:02 PM\nI500               50        -1349.7   [-102.08, -31.26, 1349.7]         202944.475390   1.3.46.670589.50.2.13617490931079190855.2661636005406387566   104605.314  [-0.068, 93.73599999999999, 2699.4]     743.799988   743.799988         None  5.1: Build:1 29-Dec-2016 11:34 COMB_SCATT(250)_PE(250)_N_B_U_C cns:T, CFGs:7 created: 20-Jul-2023 10:50:10 isp9_compatible edge(0,0)subvol(0,0)  MR Import Filter 9/11/2024 10:40:02 PM\nI510               51       -1349.25  [-102.08, -31.26, 1349.25]         202944.478378  1.3.46.670589.50.2.23405758041385828938.28054086131934980985   104605.321  [-0.068, 93.73599999999999, 2698.5]         744.25       744.25         None  5.1: Build:1 29-Dec-2016 11:34 COMB_SCATT(250)_PE(250)_N_B_U_C cns:T, CFGs:7 created: 20-Jul-2023 10:50:10 isp9_compatible edge(0,0)subvol(0,0)  MR Import Filter 9/11/2024 10:40:02 PM\nI520               52        -1348.8   [-102.08, -31.26, 1348.8]         202944.481370     1.3.46.670589.50.2.1641851554559033924.287738689872555441   104605.329  [-0.068, 93.73599999999999, 2697.6]     744.700012   744.700012         None  5.1: Build:1 29-Dec-2016 11:34 COMB_SCATT(250)_PE(250)_N_B_U_C cns:T, CFGs:7 created: 20-Jul-2023 10:50:10 isp9_compatible edge(0,0)subvol(0,0)  MR Import Filter 9/11/2024 10:40:02 PM\nI530               53       -1348.35  [-102.08, -31.26, 1348.35]         202944.483363  1.3.46.670589.50.2.32688233032542835531.28203653712259846294   104605.337  [-0.068, 93.73599999999999, 2696.7]     745.150024   745.150024         None  5.1: Build:1 29-Dec-2016 11:34 COMB_SCATT(250)_PE(250)_N_B_U_C cns:T, CFGs:7 created: 20-Jul-2023 10:50:10 isp9_compatible edge(0,0)subvol(0,0)  MR Import Filter 9/11/2024 10:40:02 PM\nI540               54        -1347.9   [-102.08, -31.26, 1347.9]         202944.487346   1.3.46.670589.50.2.3509870361279112012.30265821514179655516   104605.345  [-0.068, 93.73599999999999, 2695.8]     745.599976   745.599976         None  5.1: Build:1 29-Dec-2016 11:34 COMB_SCATT(250)_PE(250)_N_B_U_C cns:T, CFGs:7 created: 20-Jul-2023 10:50:10 isp9_compatible edge(0,0)subvol(0,0)  MR Import Filter 9/11/2024 10:40:02 PM\nI550               55       -1347.45  [-102.08, -31.26, 1347.45]         202944.491333  1.3.46.670589.50.2.20397105963092202312.23984413662887483638   104605.352  [-0.068, 93.73599999999999, 2694.9]     746.049988   746.049988         None  5.1: Build:1 29-Dec-2016 11:34 COMB_SCATT(250)_PE(250)_N_B_U_C cns:T, CFGs:7 created: 20-Jul-2023 10:50:10 isp9_compatible edge(0,0)subvol(0,0)  MR Import Filter 9/11/2024 10:40:02 PM\nI560               56        -1347.0   [-102.08, -31.26, 1347.0]         202944.493326    1.3.46.670589.50.2.39010196091576029251.274837657019541656   104605.360  [-0.068, 93.73599999999999, 2694.0]          746.5        746.5         None  5.1: Build:1 29-Dec-2016 11:34 COMB_SCATT(250)_PE(250)_N_B_U_C cns:T, CFGs:7 created: 20-Jul-2023 10:50:10 isp9_compatible edge(0,0)subvol(0,0)  MR Import Filter 9/11/2024 10:40:02 PM\nI570               57       -1346.55  [-102.08, -31.26, 1346.55]         202944.496316    1.3.46.670589.50.2.5048733482838732879.2745523687403650455   104605.367  [-0.068, 93.73599999999999, 2693.1]     746.950012   746.950012         None  5.1: Build:1 29-Dec-2016 11:34 COMB_SCATT(250)_PE(250)_N_B_U_C cns:T, CFGs:7 created: 20-Jul-2023 10:50:10 isp9_compatible edge(0,0)subvol(0,1)  MR Import Filter 9/11/2024 10:40:01 PM\nI580               58        -1346.1   [-102.08, -31.26, 1346.1]         202944.499307  1.3.46.670589.50.2.38973201072869533772.29413871023816339774   104605.375  [-0.068, 93.73599999999999, 2692.2]     747.400024   747.400024         None  5.1: Build:1 29-Dec-2016 11:34 COMB_SCATT(250)_PE(250)_N_B_U_C cns:T, CFGs:7 created: 20-Jul-2023 10:53:18 isp9_compatible edge(0,0)subvol(1,0)  MR Import Filter 9/11/2024 10:40:02 PM\nI590               59       -1345.65  [-102.08, -31.26, 1345.65]         202944.502296   1.3.46.670589.50.2.2877687643583571533.25326827201626478271   104605.383  [-0.068, 93.73599999999999, 2691.3]     747.849976   747.849976         None  5.1: Build:1 29-Dec-2016 11:34 COMB_SCATT(250)_PE(250)_N_B_U_C cns:T, CFGs:7 created: 20-Jul-2023 10:53:18 isp9_compatible edge(0,0)subvol(0,0)  MR Import Filter 9/11/2024 10:40:02 PM\nI600               60        -1345.2   [-102.08, -31.26, 1345.2]         202944.505286  1.3.46.670589.50.2.10712915423151865412.26214522752449349203   104605.391  [-0.068, 93.73599999999999, 2690.4]     748.299988   748.299988         None  5.1: Build:1 29-Dec-2016 11:34 COMB_SCATT(250)_PE(250)_N_B_U_C cns:T, CFGs:7 created: 20-Jul-2023 10:53:18 isp9_compatible edge(0,0)subvol(0,0)  MR Import Filter 9/11/2024 10:40:02 PM\nI610               61       -1344.75  [-102.08, -31.26, 1344.75]         202944.508276   1.3.46.670589.50.2.37183327363488976453.2475281078609651821   104605.398  [-0.068, 93.73599999999999, 2689.5]         748.75       748.75         None  5.1: Build:1 29-Dec-2016 11:34 COMB_SCATT(250)_PE(250)_N_B_U_C cns:T, CFGs:7 created: 20-Jul-2023 10:53:18 isp9_compatible edge(0,0)subvol(0,0)  MR Import Filter 9/11/2024 10:40:02 PM\nI620               62        -1344.3   [-102.08, -31.26, 1344.3]         202944.511267  1.3.46.670589.50.2.31341849681844700737.26779576234285234906   104605.406  [-0.068, 93.73599999999999, 2688.6]     749.200012   749.200012         None  5.1: Build:1 29-Dec-2016 11:34 COMB_SCATT(250)_PE(250)_N_B_U_C cns:T, CFGs:7 created: 20-Jul-2023 10:53:18 isp9_compatible edge(0,0)subvol(0,0)  MR Import Filter 9/11/2024 10:40:02 PM\nI630               63       -1343.85  [-102.08, -31.26, 1343.85]         202944.513263   1.3.46.670589.50.2.14743352631064844367.2877201512806891356   104605.414  [-0.068, 93.73599999999999, 2687.7]     749.650024   749.650024         None  5.1: Build:1 29-Dec-2016 11:34 COMB_SCATT(250)_PE(250)_N_B_U_C cns:T, CFGs:7 created: 20-Jul-2023 10:53:18 isp9_compatible edge(0,0)subvol(0,0)  MR Import Filter 9/11/2024 10:40:02 PM\nI640               64        -1343.4   [-102.08, -31.26, 1343.4]         202944.516250  1.3.46.670589.50.2.26176216924122517837.25278308781901153441   104605.421  [-0.068, 93.73599999999999, 2686.8]     750.099976   750.099976         None  5.1: Build:1 29-Dec-2016 11:34 COMB_SCATT(250)_PE(250)_N_B_U_C cns:T, CFGs:7 created: 20-Jul-2023 10:53:18 isp9_compatible edge(0,0)subvol(0,0)  MR Import Filter 9/11/2024 10:40:02 PM\nI650               65       -1342.95  [-102.08, -31.26, 1342.95]         202944.519240   1.3.46.670589.50.2.3039775751610097731.31161502581180888146   104605.429  [-0.068, 93.73599999999999, 2685.9]     750.549988   750.549988         None  5.1: Build:1 29-Dec-2016 11:34 COMB_SCATT(250)_PE(250)_N_B_U_C cns:T, CFGs:7 created: 20-Jul-2023 10:53:18 isp9_compatible edge(0,0)subvol(0,0)  MR Import Filter 9/11/2024 10:40:02 PM\nI660               66        -1342.5   [-102.08, -31.26, 1342.5]         202944.522229  1.3.46.670589.50.2.33494887932991130445.31066656952887976194   104605.437  [-0.068, 93.73599999999999, 2685.0]          751.0        751.0         None  5.1: Build:1 29-Dec-2016 11:34 COMB_SCATT(250)_PE(250)_N_B_U_C cns:T, CFGs:7 created: 20-Jul-2023 10:53:18 isp9_compatible edge(0,0)subvol(0,0)  MR Import Filter 9/11/2024 10:40:02 PM\nI670               67       -1342.05  [-102.08, -31.26, 1342.05]         202944.525221   1.3.46.670589.50.2.4283507089895224654.25120369653377430964   104605.444  [-0.068, 93.73599999999999, 2684.1]     751.450012   751.450012         None  5.1: Build:1 29-Dec-2016 11:34 COMB_SCATT(250)_PE(250)_N_B_U_C cns:T, CFGs:7 created: 20-Jul-2023 10:53:18 isp9_compatible edge(0,0)subvol(0,0)  MR Import Filter 9/11/2024 10:40:02 PM\nI680               68        -1341.6   [-102.08, -31.26, 1341.6]         202944.528211  1.3.46.670589.50.2.33095675803601316431.29234665691555237658   104605.452  [-0.068, 93.73599999999999, 2683.2]     751.900024   751.900024         None  5.1: Build:1 29-Dec-2016 11:34 COMB_SCATT(250)_PE(250)_N_B_U_C cns:T, CFGs:7 created: 20-Jul-2023 10:53:18 isp9_compatible edge(0,0)subvol(0,0)  MR Import Filter 9/11/2024 10:40:02 PM\nI690               69       -1341.15  [-102.08, -31.26, 1341.15]         202944.530204    1.3.46.670589.50.2.131314116548301896.25856215233718643823   104605.460  [-0.068, 93.73599999999999, 2682.3]     752.349976   752.349976         None  5.1: Build:1 29-Dec-2016 11:34 COMB_SCATT(250)_PE(250)_N_B_U_C cns:T, CFGs:7 created: 20-Jul-2023 10:53:18 isp9_compatible edge(0,0)subvol(0,0)  MR Import Filter 9/11/2024 10:40:02 PM\nI700               70        -1340.7   [-102.08, -31.26, 1340.7]         202944.533194    1.3.46.670589.50.2.9032234901835324736.2567973322618820214   104605.468  [-0.068, 93.73599999999999, 2681.4]     752.799988   752.799988         None  5.1: Build:1 29-Dec-2016 11:34 COMB_SCATT(250)_PE(250)_N_B_U_C cns:T, CFGs:7 created: 20-Jul-2023 10:53:18 isp9_compatible edge(0,0)subvol(0,0)  MR Import Filter 9/11/2024 10:40:02 PM\nI710               71       -1340.25  [-102.08, -31.26, 1340.25]         202944.537181    1.3.46.670589.50.2.28964665632645037125.258007921398742605   104605.475  [-0.068, 93.73599999999999, 2680.5]         753.25       753.25         None  5.1: Build:1 29-Dec-2016 11:34 COMB_SCATT(250)_PE(250)_N_B_U_C cns:T, CFGs:7 created: 20-Jul-2023 10:53:18 isp9_compatible edge(0,0)subvol(0,0)  MR Import Filter 9/11/2024 10:40:02 PM\nI720               72        -1339.8   [-102.08, -31.26, 1339.8]         202944.541224  1.3.46.670589.50.2.19143605842063418432.29240951733332439030   104605.483  [-0.068, 93.73599999999999, 2679.6]     753.700012   753.700012         None  5.1: Build:1 29-Dec-2016 11:34 COMB_SCATT(250)_PE(250)_N_B_U_C cns:T, CFGs:7 created: 20-Jul-2023 10:53:18 isp9_compatible edge(0,0)subvol(0,0)  MR Import Filter 9/11/2024 10:40:02 PM\nI730               73       -1339.35  [-102.08, -31.26, 1339.35]         202944.544222     1.3.46.670589.50.2.35126862618312268.29537632962531288174   104605.491  [-0.068, 93.73599999999999, 2678.7]     754.150024   754.150024         None  5.1: Build:1 29-Dec-2016 11:34 COMB_SCATT(250)_PE(250)_N_B_U_C cns:T, CFGs:7 created: 20-Jul-2023 10:53:18 isp9_compatible edge(0,0)subvol(0,0)  MR Import Filter 9/11/2024 10:40:02 PM\nI740               74        -1338.9   [-102.08, -31.26, 1338.9]         202944.547207  1.3.46.670589.50.2.15338811662540969797.22106917272639534813   104605.498  [-0.068, 93.73599999999999, 2677.8]     754.599976   754.599976         None  5.1: Build:1 29-Dec-2016 11:34 COMB_SCATT(250)_PE(250)_N_B_U_C cns:T, CFGs:7 created: 20-Jul-2023 10:53:18 isp9_compatible edge(0,0)subvol(0,0)  MR Import Filter 9/11/2024 10:40:02 PM\nI750               75       -1338.45  [-102.08, -31.26, 1338.45]         202944.549140  1.3.46.670589.50.2.22060190731351349066.24712459382644089933   104605.506  [-0.068, 93.73599999999999, 2676.9]     755.049988   755.049988         None  5.1: Build:1 29-Dec-2016 11:34 COMB_SCATT(250)_PE(250)_N_B_U_C cns:T, CFGs:7 created: 20-Jul-2023 10:53:18 isp9_compatible edge(0,0)subvol(0,0)  MR Import Filter 9/11/2024 10:40:03 PM\nI760               76        -1338.0   [-102.08, -31.26, 1338.0]         202944.553126   1.3.46.670589.50.2.10120452012856116552.2635943537177069149   104605.514  [-0.068, 93.73599999999999, 2676.0]          755.5        755.5         None  5.1: Build:1 29-Dec-2016 11:34 COMB_SCATT(250)_PE(250)_N_B_U_C cns:T, CFGs:7 created: 20-Jul-2023 10:53:18 isp9_compatible edge(0,0)subvol(0,0)  MR Import Filter 9/11/2024 10:40:03 PM\nI770               77       -1337.55  [-102.08, -31.26, 1337.55]         202944.556117   1.3.46.670589.50.2.4125451320581616454.26999744141574613848   104605.521  [-0.068, 93.73599999999999, 2675.1]     755.950012   755.950012         None  5.1: Build:1 29-Dec-2016 11:34 COMB_SCATT(250)_PE(250)_N_B_U_C cns:T, CFGs:7 created: 20-Jul-2023 10:53:18 isp9_compatible edge(0,0)subvol(0,0)  MR Import Filter 9/11/2024 10:40:03 PM\nI780               78        -1337.1   [-102.08, -31.26, 1337.1]         202944.559106  1.3.46.670589.50.2.31201191702904157764.29020233953666852344   104605.529  [-0.068, 93.73599999999999, 2674.2]     756.400024   756.400024         None  5.1: Build:1 29-Dec-2016 11:34 COMB_SCATT(250)_PE(250)_N_B_U_C cns:T, CFGs:7 created: 20-Jul-2023 10:53:18 isp9_compatible edge(0,0)subvol(0,0)  MR Import Filter 9/11/2024 10:40:03 PM\nI790               79       -1336.65  [-102.08, -31.26, 1336.65]         202944.562101  1.3.46.670589.50.2.35337407763590771532.26296529093252488682   104605.537  [-0.068, 93.73599999999999, 2673.3]     756.849976   756.849976         None  5.1: Build:1 29-Dec-2016 11:34 COMB_SCATT(250)_PE(250)_N_B_U_C cns:T, CFGs:7 created: 20-Jul-2023 10:53:18 isp9_compatible edge(0,0)subvol(0,0)  MR Import Filter 9/11/2024 10:40:03 PM\nI800               80        -1336.2   [-102.08, -31.26, 1336.2]         202944.565087   1.3.46.670589.50.2.18402716561848084302.3118588432955643073   104605.544  [-0.068, 93.73599999999999, 2672.4]     757.299988   757.299988         None  5.1: Build:1 29-Dec-2016 11:34 COMB_SCATT(250)_PE(250)_N_B_U_C cns:T, CFGs:7 created: 20-Jul-2023 10:53:18 isp9_compatible edge(0,0)subvol(0,0)  MR Import Filter 9/11/2024 10:40:03 PM\nI810               81       -1335.75  [-102.08, -31.26, 1335.75]         202944.568077    1.3.46.670589.50.2.2276178992212230977.2672151761395527993   104605.552  [-0.068, 93.73599999999999, 2671.5]         757.75       757.75         None  5.1: Build:1 29-Dec-2016 11:34 COMB_SCATT(250)_PE(250)_N_B_U_C cns:T, CFGs:7 created: 20-Jul-2023 10:53:18 isp9_compatible edge(0,0)subvol(0,0)  MR Import Filter 9/11/2024 10:40:03 PM\nI820               82        -1335.3   [-102.08, -31.26, 1335.3]         202944.572063   1.3.46.670589.50.2.3233985560374003274.31939149661207500934   104605.560  [-0.068, 93.73599999999999, 2670.6]     758.200012   758.200012         None  5.1: Build:1 29-Dec-2016 11:34 COMB_SCATT(250)_PE(250)_N_B_U_C cns:T, CFGs:7 created: 20-Jul-2023 10:53:18 isp9_compatible edge(0,0)subvol(0,0)  MR Import Filter 9/11/2024 10:40:03 PM\nI830               83       -1334.85  [-102.08, -31.26, 1334.85]         202944.575053  1.3.46.670589.50.2.13986389523695597633.21780542852373689838   104605.568  [-0.068, 93.73599999999999, 2669.7]     758.650024   758.650024         None  5.1: Build:1 29-Dec-2016 11:34 COMB_SCATT(250)_PE(250)_N_B_U_C cns:T, CFGs:7 created: 20-Jul-2023 10:53:18 isp9_compatible edge(0,0)subvol(0,0)  MR Import Filter 9/11/2024 10:40:03 PM\nI840               84        -1334.4   [-102.08, -31.26, 1334.4]         202944.578043  1.3.46.670589.50.2.39027857322977557323.26202058953055165377   104605.575  [-0.068, 93.73599999999999, 2668.8]     759.099976   759.099976         None  5.1: Build:1 29-Dec-2016 11:34 COMB_SCATT(250)_PE(250)_N_B_U_C cns:T, CFGs:7 created: 20-Jul-2023 10:53:18 isp9_compatible edge(0,0)subvol(0,0)  MR Import Filter 9/11/2024 10:40:03 PM\nI850               85       -1333.95  [-102.08, -31.26, 1333.95]         202944.580037   1.3.46.670589.50.2.6729522773928479814.25754110293081861047   104605.583  [-0.068, 93.73599999999999, 2667.9]     759.549988   759.549988         None  5.1: Build:1 29-Dec-2016 11:34 COMB_SCATT(250)_PE(250)_N_B_U_C cns:T, CFGs:7 created: 20-Jul-2023 10:53:18 isp9_compatible edge(0,0)subvol(0,0)  MR Import Filter 9/11/2024 10:40:03 PM\nI860               86        -1333.5   [-102.08, -31.26, 1333.5]         202944.584023   1.3.46.670589.50.2.1797911292232859724.24391926252004069600   104605.591  [-0.068, 93.73599999999999, 2667.0]          760.0        760.0         None  5.1: Build:1 29-Dec-2016 11:34 COMB_SCATT(250)_PE(250)_N_B_U_C cns:T, CFGs:7 created: 20-Jul-2023 10:53:18 isp9_compatible edge(0,0)subvol(0,0)  MR Import Filter 9/11/2024 10:40:03 PM\nI870               87       -1333.05  [-102.08, -31.26, 1333.05]         202944.588014     1.3.46.670589.50.2.805135472689964612.2259626228425660348   104605.598  [-0.068, 93.73599999999999, 2666.1]     760.450012   760.450012         None  5.1: Build:1 29-Dec-2016 11:34 COMB_SCATT(250)_PE(250)_N_B_U_C cns:T, CFGs:7 created: 20-Jul-2023 10:53:18 isp9_compatible edge(0,0)subvol(0,0)  MR Import Filter 9/11/2024 10:40:03 PM\nI880               88        -1332.6   [-102.08, -31.26, 1332.6]         202944.591000    1.3.46.670589.50.2.3070178017390688846.2162872311645214363   104605.606  [-0.068, 93.73599999999999, 2665.2]     760.900024   760.900024         None  5.1: Build:1 29-Dec-2016 11:34 COMB_SCATT(250)_PE(250)_N_B_U_C cns:T, CFGs:7 created: 20-Jul-2023 10:53:18 isp9_compatible edge(0,0)subvol(0,0)  MR Import Filter 9/11/2024 10:40:03 PM\nI890               89       -1332.15  [-102.08, -31.26, 1332.15]         202944.593990  1.3.46.670589.50.2.17372168801275958857.30588854972785154558   104605.614  [-0.068, 93.73599999999999, 2664.3]     761.349976   761.349976         None  5.1: Build:1 29-Dec-2016 11:34 COMB_SCATT(250)_PE(250)_N_B_U_C cns:T, CFGs:7 created: 20-Jul-2023 10:53:18 isp9_compatible edge(0,0)subvol(0,0)  MR Import Filter 9/11/2024 10:40:03 PM\nI900               90        -1331.7   [-102.08, -31.26, 1331.7]         202944.596980  1.3.46.670589.50.2.14996475021260779848.26834826081669185277   104605.622  [-0.068, 93.73599999999999, 2663.4]     761.799988   761.799988         None  5.1: Build:1 29-Dec-2016 11:34 COMB_SCATT(250)_PE(250)_N_B_U_C cns:T, CFGs:7 created: 20-Jul-2023 10:53:18 isp9_compatible edge(0,0)subvol(0,0)  MR Import Filter 9/11/2024 10:40:04 PM\nI910               91       -1331.25  [-102.08, -31.26, 1331.25]         202944.599971     1.3.46.670589.50.2.97298795476133442.31542712303365059448   104605.629  [-0.068, 93.73599999999999, 2662.5]         762.25       762.25         None  5.1: Build:1 29-Dec-2016 11:34 COMB_SCATT(250)_PE(250)_N_B_U_C cns:T, CFGs:7 created: 20-Jul-2023 10:53:18 isp9_compatible edge(0,0)subvol(0,0)  MR Import Filter 9/11/2024 10:40:04 PM\nI920               92        -1330.8   [-102.08, -31.26, 1330.8]         202944.602961   1.3.46.670589.50.2.26969265593628864329.2826899571234234571   104605.637  [-0.068, 93.73599999999999, 2661.6]     762.700012   762.700012         None  5.1: Build:1 29-Dec-2016 11:34 COMB_SCATT(250)_PE(250)_N_B_U_C cns:T, CFGs:7 created: 20-Jul-2023 10:53:18 isp9_compatible edge(0,0)subvol(0,0)  MR Import Filter 9/11/2024 10:40:04 PM\nI930               93       -1330.35  [-102.08, -31.26, 1330.35]         202944.605954  1.3.46.670589.50.2.25870617103800193860.26401852102463950537   104605.644  [-0.068, 93.73599999999999, 2660.7]     763.150024   763.150024         None  5.1: Build:1 29-Dec-2016 11:34 COMB_SCATT(250)_PE(250)_N_B_U_C cns:T, CFGs:7 created: 20-Jul-2023 10:53:18 isp9_compatible edge(0,0)subvol(0,0)  MR Import Filter 9/11/2024 10:40:04 PM\nI940               94        -1329.9   [-102.08, -31.26, 1329.9]         202944.608943  1.3.46.670589.50.2.39878130183059639619.28419907701111518919   104605.652  [-0.068, 93.73599999999999, 2659.8]     763.599976   763.599976         None  5.1: Build:1 29-Dec-2016 11:34 COMB_SCATT(250)_PE(250)_N_B_U_C cns:T, CFGs:7 created: 20-Jul-2023 10:53:18 isp9_compatible edge(0,0)subvol(0,0)  MR Import Filter 9/11/2024 10:40:03 PM\nI950               95       -1329.45  [-102.08, -31.26, 1329.45]         202944.611934     1.3.46.670589.50.2.315577785985390912.3208486305465999828   104605.660  [-0.068, 93.73599999999999, 2658.9]     764.049988   764.049988         None  5.1: Build:1 29-Dec-2016 11:34 COMB_SCATT(250)_PE(250)_N_B_U_C cns:T, CFGs:7 created: 20-Jul-2023 10:53:18 isp9_compatible edge(0,0)subvol(0,0)  MR Import Filter 9/11/2024 10:40:03 PM\nI960               96        -1329.0   [-102.08, -31.26, 1329.0]         202944.614920   1.3.46.670589.50.2.29824219953646149194.2782691394301447090   104605.668  [-0.068, 93.73599999999999, 2658.0]          764.5        764.5         None  5.1: Build:1 29-Dec-2016 11:34 COMB_SCATT(250)_PE(250)_N_B_U_C cns:T, CFGs:7 created: 20-Jul-2023 10:53:18 isp9_compatible edge(0,0)subvol(0,0)  MR Import Filter 9/11/2024 10:40:03 PM\nI970               97       -1328.55  [-102.08, -31.26, 1328.55]         202944.618907  1.3.46.670589.50.2.37714681462827801920.26349339163011170873   104605.675  [-0.068, 93.73599999999999, 2657.1]     764.950012   764.950012         None  5.1: Build:1 29-Dec-2016 11:34 COMB_SCATT(250)_PE(250)_N_B_U_C cns:T, CFGs:7 created: 20-Jul-2023 10:53:18 isp9_compatible edge(0,0)subvol(0,0)  MR Import Filter 9/11/2024 10:40:03 PM\nI980               98        -1328.1   [-102.08, -31.26, 1328.1]         202944.622897   1.3.46.670589.50.2.39719953892354288719.2935958825806994195   104605.683  [-0.068, 93.73599999999999, 2656.2]     765.400024   765.400024         None  5.1: Build:1 29-Dec-2016 11:34 COMB_SCATT(250)_PE(250)_N_B_U_C cns:T, CFGs:7 created: 20-Jul-2023 10:53:18 isp9_compatible edge(0,0)subvol(0,0)  MR Import Filter 9/11/2024 10:40:03 PM\nI990               99       -1327.65  [-102.08, -31.26, 1327.65]         202944.625887  1.3.46.670589.50.2.40865162911725953090.22268474364246096563   104605.691  [-0.068, 93.73599999999999, 2655.3]     765.849976   765.849976         None  5.1: Build:1 29-Dec-2016 11:34 COMB_SCATT(250)_PE(250)_N_B_U_C cns:T, CFGs:7 created: 20-Jul-2023 10:53:18 isp9_compatible edge(0,0)subvol(0,0)  MR Import Filter 9/11/2024 10:40:03 PM\nI1000             100        -1327.2   [-102.08, -31.26, 1327.2]         202944.627877   1.3.46.670589.50.2.3751784895207456588.30315490653169659246   104605.698  [-0.068, 93.73599999999999, 2654.4]     766.299988   766.299988         None  5.1: Build:1 29-Dec-2016 11:34 COMB_SCATT(250)_PE(250)_N_B_U_C cns:T, CFGs:7 created: 20-Jul-2023 10:53:18 isp9_compatible edge(0,0)subvol(0,0)  MR Import Filter 9/11/2024 10:40:03 PM\nI1010             101       -1326.75  [-102.08, -31.26, 1326.75]         202944.630866   1.3.46.670589.50.2.6459573033938848329.30990842433442677664   104605.706  [-0.068, 93.73599999999999, 2653.5]         766.75       766.75         None  5.1: Build:1 29-Dec-2016 11:34 COMB_SCATT(250)_PE(250)_N_B_U_C cns:T, CFGs:7 created: 20-Jul-2023 10:53:18 isp9_compatible edge(0,0)subvol(0,0)  MR Import Filter 9/11/2024 10:40:04 PM\nI1020             102        -1326.3   [-102.08, -31.26, 1326.3]         202944.633858  1.3.46.670589.50.2.12445697872428031554.30710688283487405174   104605.714  [-0.068, 93.73599999999999, 2652.6]     767.200012   767.200012         None  5.1: Build:1 29-Dec-2016 11:34 COMB_SCATT(250)_PE(250)_N_B_U_C cns:T, CFGs:7 created: 20-Jul-2023 10:53:18 isp9_compatible edge(0,0)subvol(0,0)  MR Import Filter 9/11/2024 10:40:04 PM\nI1030             103       -1325.85  [-102.08, -31.26, 1325.85]         202944.636846  1.3.46.670589.50.2.36172352722862608460.22657502523406072581   104605.721  [-0.068, 93.73599999999999, 2651.7]     767.650024   767.650024         None  5.1: Build:1 29-Dec-2016 11:34 COMB_SCATT(250)_PE(250)_N_B_U_C cns:T, CFGs:7 created: 20-Jul-2023 10:53:18 isp9_compatible edge(0,0)subvol(0,0)  MR Import Filter 9/11/2024 10:40:04 PM\nI1040             104        -1325.4   [-102.08, -31.26, 1325.4]         202944.639838  1.3.46.670589.50.2.26992253641526833739.28972431371388322931   104605.729  [-0.068, 93.73599999999999, 2650.8]     768.099976   768.099976         None  5.1: Build:1 29-Dec-2016 11:34 COMB_SCATT(250)_PE(250)_N_B_U_C cns:T, CFGs:7 created: 20-Jul-2023 10:53:18 isp9_compatible edge(0,0)subvol(0,0)  MR Import Filter 9/11/2024 10:40:04 PM\nI1050             105       -1324.95  [-102.08, -31.26, 1324.95]         202944.642831   1.3.46.670589.50.2.34164084261057892680.2181364023109640488   104605.737  [-0.068, 93.73599999999999, 2649.9]     768.549988   768.549988         None  5.1: Build:1 29-Dec-2016 11:34 COMB_SCATT(250)_PE(250)_N_B_U_C cns:T, CFGs:7 created: 20-Jul-2023 10:53:18 isp9_compatible edge(0,0)subvol(0,0)  MR Import Filter 9/11/2024 10:40:04 PM\nI1060             106        -1324.5   [-102.08, -31.26, 1324.5]         202944.645817  1.3.46.670589.50.2.29998894672807797838.23806779761747355658   104605.745  [-0.068, 93.73599999999999, 2649.0]          769.0        769.0         None  5.1: Build:1 29-Dec-2016 11:34 COMB_SCATT(250)_PE(250)_N_B_U_C cns:T, CFGs:7 created: 20-Jul-2023 10:53:18 isp9_compatible edge(0,0)subvol(0,0)  MR Import Filter 9/11/2024 10:40:04 PM\nI1070             107       -1324.05  [-102.08, -31.26, 1324.05]         202944.652793  1.3.46.670589.50.2.34762479712965456708.31741213392332656840   104605.752  [-0.068, 93.73599999999999, 2648.1]     769.450012   769.450012         None  5.1: Build:1 29-Dec-2016 11:34 COMB_SCATT(250)_PE(250)_N_B_U_C cns:T, CFGs:7 created: 20-Jul-2023 10:53:18 isp9_compatible edge(0,0)subvol(0,1)  MR Import Filter 9/11/2024 10:40:04 PM\nI1080             108        -1323.6   [-102.08, -31.26, 1323.6]         202944.656784   1.3.46.670589.50.2.2466219994616663113.22503813881629856040   104605.760  [-0.068, 93.73599999999999, 2647.2]     769.900024   769.900024         None  5.1: Build:1 29-Dec-2016 11:34 COMB_SCATT(250)_PE(250)_N_B_U_C cns:T, CFGs:7 created: 20-Jul-2023 10:53:24 isp9_compatible edge(0,0)subvol(1,0)  MR Import Filter 9/11/2024 10:40:04 PM\nI1090             109       -1323.15  [-102.08, -31.26, 1323.15]         202944.658773   1.3.46.670589.50.2.27583694953098994511.2434434804987346045   104605.768  [-0.068, 93.73599999999999, 2646.3]     770.349976   770.349976         None  5.1: Build:1 29-Dec-2016 11:34 COMB_SCATT(250)_PE(250)_N_B_U_C cns:T, CFGs:7 created: 20-Jul-2023 10:53:24 isp9_compatible edge(0,0)subvol(0,0)  MR Import Filter 9/11/2024 10:40:04 PM\nI1100             110        -1322.7   [-102.08, -31.26, 1322.7]         202944.662760   1.3.46.670589.50.2.4156663147684664386.25797419752660157337   104605.775  [-0.068, 93.73599999999999, 2645.4]     770.799988   770.799988         None  5.1: Build:1 29-Dec-2016 11:34 COMB_SCATT(250)_PE(250)_N_B_U_C cns:T, CFGs:7 created: 20-Jul-2023 10:53:24 isp9_compatible edge(0,0)subvol(0,0)  MR Import Filter 9/11/2024 10:40:04 PM\nI1110             111       -1322.25  [-102.08, -31.26, 1322.25]         202944.665750   1.3.46.670589.50.2.1892151844616063301.25903155212533469261   104605.783  [-0.068, 93.73599999999999, 2644.5]         771.25       771.25         None  5.1: Build:1 29-Dec-2016 11:34 COMB_SCATT(250)_PE(250)_N_B_U_C cns:T, CFGs:7 created: 20-Jul-2023 10:53:24 isp9_compatible edge(0,0)subvol(0,0)  MR Import Filter 9/11/2024 10:40:05 PM\nI1120             112        -1321.8   [-102.08, -31.26, 1321.8]         202944.669737   1.3.46.670589.50.2.4098193763524872013.31913600433558318774   104605.791  [-0.068, 93.73599999999999, 2643.6]     771.700012   771.700012         None  5.1: Build:1 29-Dec-2016 11:34 COMB_SCATT(250)_PE(250)_N_B_U_C cns:T, CFGs:7 created: 20-Jul-2023 10:53:24 isp9_compatible edge(0,0)subvol(0,0)  MR Import Filter 9/11/2024 10:40:05 PM\nI1130             113       -1321.35  [-102.08, -31.26, 1321.35]         202944.672727    1.3.46.670589.50.2.400182987395357507.27523557293648061286   104605.798  [-0.068, 93.73599999999999, 2642.7]     772.150024   772.150024         None  5.1: Build:1 29-Dec-2016 11:34 COMB_SCATT(250)_PE(250)_N_B_U_C cns:T, CFGs:7 created: 20-Jul-2023 10:53:24 isp9_compatible edge(0,0)subvol(0,0)  MR Import Filter 9/11/2024 10:40:05 PM\nI1140             114        -1320.9   [-102.08, -31.26, 1320.9]         202944.675717   1.3.46.670589.50.2.3200805619269596741.24840351844048599277   104605.806  [-0.068, 93.73599999999999, 2641.8]     772.599976   772.599976         None  5.1: Build:1 29-Dec-2016 11:34 COMB_SCATT(250)_PE(250)_N_B_U_C cns:T, CFGs:7 created: 20-Jul-2023 10:53:24 isp9_compatible edge(0,0)subvol(0,0)  MR Import Filter 9/11/2024 10:40:05 PM\nI1150             115       -1320.45  [-102.08, -31.26, 1320.45]         202944.678706  1.3.46.670589.50.2.16141321032548683073.23440513762043484845   104605.814  [-0.068, 93.73599999999999, 2640.9]     773.049988   773.049988         None  5.1: Build:1 29-Dec-2016 11:34 COMB_SCATT(250)_PE(250)_N_B_U_C cns:T, CFGs:7 created: 20-Jul-2023 10:53:24 isp9_compatible edge(0,0)subvol(0,0)  MR Import Filter 9/11/2024 10:40:06 PM\nI1160             116        -1320.0   [-102.08, -31.26, 1320.0]         202944.681697   1.3.46.670589.50.2.6804581812555172173.22227684032853575320   104605.822  [-0.068, 93.73599999999999, 2640.0]          773.5        773.5         None  5.1: Build:1 29-Dec-2016 11:34 COMB_SCATT(250)_PE(250)_N_B_U_C cns:T, CFGs:7 created: 20-Jul-2023 10:53:24 isp9_compatible edge(0,0)subvol(0,0)  MR Import Filter 9/11/2024 10:40:06 PM\nI1170             117       -1319.55  [-102.08, -31.26, 1319.55]         202944.685683  1.3.46.670589.50.2.18870077691232796229.25099157483818253734   104605.829  [-0.068, 93.73599999999999, 2639.1]     773.950012   773.950012         None  5.1: Build:1 29-Dec-2016 11:34 COMB_SCATT(250)_PE(250)_N_B_U_C cns:T, CFGs:7 created: 20-Jul-2023 10:53:24 isp9_compatible edge(0,0)subvol(0,0)  MR Import Filter 9/11/2024 10:40:04 PM\nI1180             118        -1319.1   [-102.08, -31.26, 1319.1]         202944.689671  1.3.46.670589.50.2.29462221064126397007.23966810104097178654   104605.837  [-0.068, 93.73599999999999, 2638.2]     774.400024   774.400024         None  5.1: Build:1 29-Dec-2016 11:34 COMB_SCATT(250)_PE(250)_N_B_U_C cns:T, CFGs:7 created: 20-Jul-2023 10:53:24 isp9_compatible edge(0,0)subvol(0,0)  MR Import Filter 9/11/2024 10:40:05 PM\nI1190             119       -1318.65  [-102.08, -31.26, 1318.65]         202944.692660    1.3.46.670589.50.2.2646958254250736193.2777563780821395039   104605.845  [-0.068, 93.73599999999999, 2637.3]     774.849976   774.849976         None  5.1: Build:1 29-Dec-2016 11:34 COMB_SCATT(250)_PE(250)_N_B_U_C cns:T, CFGs:7 created: 20-Jul-2023 10:53:24 isp9_compatible edge(0,0)subvol(0,0)  MR Import Filter 9/11/2024 10:40:06 PM\nI1200             120        -1318.2   [-102.08, -31.26, 1318.2]         202944.695654   1.3.46.670589.50.2.4078236116347171659.27613127822909630525   104605.852  [-0.068, 93.73599999999999, 2636.4]     775.299988   775.299988         None  5.1: Build:1 29-Dec-2016 11:34 COMB_SCATT(250)_PE(250)_N_B_U_C cns:T, CFGs:7 created: 20-Jul-2023 10:53:24 isp9_compatible edge(0,0)subvol(0,0)  MR Import Filter 9/11/2024 10:40:04 PM\nI1210             121       -1317.75  [-102.08, -31.26, 1317.75]         202944.698640    1.3.46.670589.50.2.122574952235758914.28595721402703914107   104605.860  [-0.068, 93.73599999999999, 2635.5]         775.75       775.75         None  5.1: Build:1 29-Dec-2016 11:34 COMB_SCATT(250)_PE(250)_N_B_U_C cns:T, CFGs:7 created: 20-Jul-2023 10:53:24 isp9_compatible edge(0,0)subvol(0,0)  MR Import Filter 9/11/2024 10:40:04 PM\nI1220             122        -1317.3   [-102.08, -31.26, 1317.3]         202944.702627  1.3.46.670589.50.2.35564570633448517450.28160323072978403714   104605.868  [-0.068, 93.73599999999999, 2634.6]     776.200012   776.200012         None  5.1: Build:1 29-Dec-2016 11:34 COMB_SCATT(250)_PE(250)_N_B_U_C cns:T, CFGs:7 created: 20-Jul-2023 10:53:24 isp9_compatible edge(0,0)subvol(0,0)  MR Import Filter 9/11/2024 10:40:04 PM\nI1230             123       -1316.85  [-102.08, -31.26, 1316.85]         202944.706613     1.3.46.670589.50.2.819248467732407371.2185624503676601810   104605.875  [-0.068, 93.73599999999999, 2633.7]     776.650024   776.650024         None  5.1: Build:1 29-Dec-2016 11:34 COMB_SCATT(250)_PE(250)_N_B_U_C cns:T, CFGs:7 created: 20-Jul-2023 10:53:24 isp9_compatible edge(0,0)subvol(0,0)  MR Import Filter 9/11/2024 10:40:05 PM\nI1240             124        -1316.4   [-102.08, -31.26, 1316.4]         202944.710602  1.3.46.670589.50.2.21724756062863234378.21987556393930437454   104605.883  [-0.068, 93.73599999999999, 2632.8]     777.099976   777.099976         None  5.1: Build:1 29-Dec-2016 11:34 COMB_SCATT(250)_PE(250)_N_B_U_C cns:T, CFGs:7 created: 20-Jul-2023 10:53:24 isp9_compatible edge(0,0)subvol(0,0)  MR Import Filter 9/11/2024 10:40:05 PM\nI1250             125       -1315.95  [-102.08, -31.26, 1315.95]         202944.713590  1.3.46.670589.50.2.23671279052076599873.24084909304008440426   104605.891  [-0.068, 93.73599999999999, 2631.9]     777.549988   777.549988         None  5.1: Build:1 29-Dec-2016 11:34 COMB_SCATT(250)_PE(250)_N_B_U_C cns:T, CFGs:7 created: 20-Jul-2023 10:53:24 isp9_compatible edge(0,0)subvol(0,0)  MR Import Filter 9/11/2024 10:40:04 PM\nI1260             126        -1315.5   [-102.08, -31.26, 1315.5]         202944.716580   1.3.46.670589.50.2.6290884584132483657.26049283932982180002   104605.899  [-0.068, 93.73599999999999, 2631.0]          778.0        778.0         None  5.1: Build:1 29-Dec-2016 11:34 COMB_SCATT(250)_PE(250)_N_B_U_C cns:T, CFGs:7 created: 20-Jul-2023 10:53:24 isp9_compatible edge(0,0)subvol(0,0)  MR Import Filter 9/11/2024 10:40:05 PM\nI1270             127       -1315.05  [-102.08, -31.26, 1315.05]         202944.720570   1.3.46.670589.50.2.8827167773017685056.25712991061868753919   104605.906  [-0.068, 93.73599999999999, 2630.1]     778.450012   778.450012         None  5.1: Build:1 29-Dec-2016 11:34 COMB_SCATT(250)_PE(250)_N_B_U_C cns:T, CFGs:7 created: 20-Jul-2023 10:53:24 isp9_compatible edge(0,0)subvol(0,0)  MR Import Filter 9/11/2024 10:40:05 PM\nI1280             128        -1314.6   [-102.08, -31.26, 1314.6]         202944.725550   1.3.46.670589.50.2.1121812156869668939.25444322033991279259   104605.914  [-0.068, 93.73599999999999, 2629.2]     778.900024   778.900024         None  5.1: Build:1 29-Dec-2016 11:34 COMB_SCATT(250)_PE(250)_N_B_U_C cns:T, CFGs:7 created: 20-Jul-2023 10:53:24 isp9_compatible edge(0,0)subvol(0,0)  MR Import Filter 9/11/2024 10:40:05 PM\nI1290             129       -1314.15  [-102.08, -31.26, 1314.15]         202944.728545  1.3.46.670589.50.2.40822147754129352010.26565435252987680969   104605.922  [-0.068, 93.73599999999999, 2628.3]     779.349976   779.349976         None  5.1: Build:1 29-Dec-2016 11:34 COMB_SCATT(250)_PE(250)_N_B_U_C cns:T, CFGs:7 created: 20-Jul-2023 10:53:24 isp9_compatible edge(0,0)subvol(0,0)  MR Import Filter 9/11/2024 10:40:05 PM\nI1300             130        -1313.7   [-102.08, -31.26, 1313.7]         202944.731534  1.3.46.670589.50.2.19789636641041060427.21813505853643394280   104605.929  [-0.068, 93.73599999999999, 2627.4]     779.799988   779.799988         None  5.1: Build:1 29-Dec-2016 11:34 COMB_SCATT(250)_PE(250)_N_B_U_C cns:T, CFGs:7 created: 20-Jul-2023 10:53:24 isp9_compatible edge(0,0)subvol(0,0)  MR Import Filter 9/11/2024 10:40:05 PM\nI1310             131       -1313.25  [-102.08, -31.26, 1313.25]         202944.736513  1.3.46.670589.50.2.24868141541256918859.29829337173081143096   104605.937  [-0.068, 93.73599999999999, 2626.5]         780.25       780.25         None  5.1: Build:1 29-Dec-2016 11:34 COMB_SCATT(250)_PE(250)_N_B_U_C cns:T, CFGs:7 created: 20-Jul-2023 10:53:24 isp9_compatible edge(0,0)subvol(0,0)  MR Import Filter 9/11/2024 10:40:05 PM\nI1320             132        -1312.8   [-102.08, -31.26, 1312.8]         202944.739505   1.3.46.670589.50.2.8797892111540402248.26716663103185110424   104605.945  [-0.068, 93.73599999999999, 2625.6]     780.700012   780.700012         None  5.1: Build:1 29-Dec-2016 11:34 COMB_SCATT(250)_PE(250)_N_B_U_C cns:T, CFGs:7 created: 20-Jul-2023 10:53:24 isp9_compatible edge(0,0)subvol(0,0)  MR Import Filter 9/11/2024 10:40:06 PM\nI1330             133       -1312.35  [-102.08, -31.26, 1312.35]         202944.742493     1.3.46.670589.50.2.33689626608125261.23376229562969535504   104605.952  [-0.068, 93.73599999999999, 2624.7]     781.150024   781.150024         None  5.1: Build:1 29-Dec-2016 11:34 COMB_SCATT(250)_PE(250)_N_B_U_C cns:T, CFGs:7 created: 20-Jul-2023 10:53:24 isp9_compatible edge(0,0)subvol(0,0)  MR Import Filter 9/11/2024 10:40:04 PM\nI1340             134        -1311.9   [-102.08, -31.26, 1311.9]         202944.745483    1.3.46.670589.50.2.2698612841483936325.2707756400268872360   104605.960  [-0.068, 93.73599999999999, 2623.8]     781.599976   781.599976         None  5.1: Build:1 29-Dec-2016 11:34 COMB_SCATT(250)_PE(250)_N_B_U_C cns:T, CFGs:7 created: 20-Jul-2023 10:53:24 isp9_compatible edge(0,0)subvol(0,0)  MR Import Filter 9/11/2024 10:40:06 PM\nI1350             135       -1311.45  [-102.08, -31.26, 1311.45]         202944.749470   1.3.46.670589.50.2.28588804092186092099.3047642722304696154   104605.968  [-0.068, 93.73599999999999, 2622.9]     782.049988   782.049988         None  5.1: Build:1 29-Dec-2016 11:34 COMB_SCATT(250)_PE(250)_N_B_U_C cns:T, CFGs:7 created: 20-Jul-2023 10:53:24 isp9_compatible edge(0,0)subvol(0,0)  MR Import Filter 9/11/2024 10:40:04 PM\nI1360             136        -1311.0   [-102.08, -31.26, 1311.0]         202944.752460   1.3.46.670589.50.2.34591189162524399938.2642631208203813215   104605.975  [-0.068, 93.73599999999999, 2622.0]          782.5        782.5         None  5.1: Build:1 29-Dec-2016 11:34 COMB_SCATT(250)_PE(250)_N_B_U_C cns:T, CFGs:7 created: 20-Jul-2023 10:53:24 isp9_compatible edge(0,0)subvol(0,0)  MR Import Filter 9/11/2024 10:40:05 PM\nI1370             137       -1310.55  [-102.08, -31.26, 1310.55]         202944.755450  1.3.46.670589.50.2.24908237161157794122.27027016602066595007   104605.983  [-0.068, 93.73599999999999, 2621.1]     782.950012   782.950012         None  5.1: Build:1 29-Dec-2016 11:34 COMB_SCATT(250)_PE(250)_N_B_U_C cns:T, CFGs:7 created: 20-Jul-2023 10:53:24 isp9_compatible edge(0,0)subvol(0,0)  MR Import Filter 9/11/2024 10:40:05 PM\nI1380             138        -1310.1   [-102.08, -31.26, 1310.1]         202944.758440  1.3.46.670589.50.2.36649292764222517324.28052016611756486646   104605.991  [-0.068, 93.73599999999999, 2620.2]     783.400024   783.400024         None  5.1: Build:1 29-Dec-2016 11:34 COMB_SCATT(250)_PE(250)_N_B_U_C cns:T, CFGs:7 created: 20-Jul-2023 10:53:24 isp9_compatible edge(0,0)subvol(0,0)  MR Import Filter 9/11/2024 10:40:05 PM\nI1390             139       -1309.65  [-102.08, -31.26, 1309.65]         202944.762156   1.3.46.670589.50.2.32023286272237508430.2163244558304397300   104605.998  [-0.068, 93.73599999999999, 2619.3]     783.849976   783.849976         None  5.1: Build:1 29-Dec-2016 11:34 COMB_SCATT(250)_PE(250)_N_B_U_C cns:T, CFGs:7 created: 20-Jul-2023 10:53:24 isp9_compatible edge(0,0)subvol(0,0)  MR Import Filter 9/11/2024 10:40:06 PM\nI1400             140        -1309.2   [-102.08, -31.26, 1309.2]         202944.765128  1.3.46.670589.50.2.30383268632384480324.27924279141566752892   104606.006  [-0.068, 93.73599999999999, 2618.4]     784.299988   784.299988         None  5.1: Build:1 29-Dec-2016 11:34 COMB_SCATT(250)_PE(250)_N_B_U_C cns:T, CFGs:7 created: 20-Jul-2023 10:53:24 isp9_compatible edge(0,0)subvol(0,0)  MR Import Filter 9/11/2024 10:40:06 PM\nI1410             141       -1308.75  [-102.08, -31.26, 1308.75]         202944.769110  1.3.46.670589.50.2.16975916911934847298.24012603081700105225   104606.014  [-0.068, 93.73599999999999, 2617.5]         784.75       784.75         None  5.1: Build:1 29-Dec-2016 11:34 COMB_SCATT(250)_PE(250)_N_B_U_C cns:T, CFGs:7 created: 20-Jul-2023 10:53:24 isp9_compatible edge(0,0)subvol(0,0)  MR Import Filter 9/11/2024 10:40:05 PM\nI1420             142        -1308.3   [-102.08, -31.26, 1308.3]         202944.773097     1.3.46.670589.50.2.709677656663500613.2908583019617755996   104606.022  [-0.068, 93.73599999999999, 2616.6]     785.200012   785.200012         None  5.1: Build:1 29-Dec-2016 11:34 COMB_SCATT(250)_PE(250)_N_B_U_C cns:T, CFGs:7 created: 20-Jul-2023 10:53:24 isp9_compatible edge(0,0)subvol(0,0)  MR Import Filter 9/11/2024 10:40:06 PM\nI1430             143       -1307.85  [-102.08, -31.26, 1307.85]         202944.776090  1.3.46.670589.50.2.24830279051588191055.28888981363376083299   104606.029  [-0.068, 93.73599999999999, 2615.7]     785.650024   785.650024         None  5.1: Build:1 29-Dec-2016 11:34 COMB_SCATT(250)_PE(250)_N_B_U_C cns:T, CFGs:7 created: 20-Jul-2023 10:53:24 isp9_compatible edge(0,0)subvol(0,0)  MR Import Filter 9/11/2024 10:40:06 PM\nI1440             144        -1307.4   [-102.08, -31.26, 1307.4]         202944.779077  1.3.46.670589.50.2.13072265944208416590.27347662333866466103   104606.037  [-0.068, 93.73599999999999, 2614.8]     786.099976   786.099976         None  5.1: Build:1 29-Dec-2016 11:34 COMB_SCATT(250)_PE(250)_N_B_U_C cns:T, CFGs:7 created: 20-Jul-2023 10:53:24 isp9_compatible edge(0,0)subvol(0,0)  MR Import Filter 9/11/2024 10:40:04 PM\nI1450             145       -1306.95  [-102.08, -31.26, 1306.95]         202944.782071  1.3.46.670589.50.2.10300778014042385984.28326732294217354644   104606.045  [-0.068, 93.73599999999999, 2613.9]     786.549988   786.549988         None  5.1: Build:1 29-Dec-2016 11:34 COMB_SCATT(250)_PE(250)_N_B_U_C cns:T, CFGs:7 created: 20-Jul-2023 10:53:24 isp9_compatible edge(0,0)subvol(0,0)  MR Import Filter 9/11/2024 10:40:04 PM\nI1460             146        -1306.5   [-102.08, -31.26, 1306.5]         202944.787050  1.3.46.670589.50.2.13450746442463069007.24981103282862497588   104606.052  [-0.068, 93.73599999999999, 2613.0]          787.0        787.0         None  5.1: Build:1 29-Dec-2016 11:34 COMB_SCATT(250)_PE(250)_N_B_U_C cns:T, CFGs:7 created: 20-Jul-2023 10:53:24 isp9_compatible edge(0,0)subvol(0,0)  MR Import Filter 9/11/2024 10:40:06 PM\nI1470             147       -1306.05  [-102.08, -31.26, 1306.05]         202944.790040    1.3.46.670589.50.2.2100447643577889096.2748458639131065246   104606.060  [-0.068, 93.73599999999999, 2612.1]     787.450012   787.450012         None  5.1: Build:1 29-Dec-2016 11:34 COMB_SCATT(250)_PE(250)_N_B_U_C cns:T, CFGs:7 created: 20-Jul-2023 10:53:24 isp9_compatible edge(0,0)subvol(0,0)  MR Import Filter 9/11/2024 10:40:04 PM\nI1480             148        -1305.6   [-102.08, -31.26, 1305.6]         202944.793029  1.3.46.670589.50.2.15733055323648378945.28928960042818815244   104606.068  [-0.068, 93.73599999999999, 2611.2]     787.900024   787.900024         None  5.1: Build:1 29-Dec-2016 11:34 COMB_SCATT(250)_PE(250)_N_B_U_C cns:T, CFGs:7 created: 20-Jul-2023 10:53:24 isp9_compatible edge(0,0)subvol(0,0)  MR Import Filter 9/11/2024 10:40:05 PM\nI1490             149       -1305.15  [-102.08, -31.26, 1305.15]         202944.796024   1.3.46.670589.50.2.33595640114176505412.2995482972227385256   104606.076  [-0.068, 93.73599999999999, 2610.3]     788.349976   788.349976         None  5.1: Build:1 29-Dec-2016 11:34 COMB_SCATT(250)_PE(250)_N_B_U_C cns:T, CFGs:7 created: 20-Jul-2023 10:53:24 isp9_compatible edge(0,0)subvol(0,0)  MR Import Filter 9/11/2024 10:40:05 PM\nI1500             150        -1304.7   [-102.08, -31.26, 1304.7]         202944.799011     1.3.46.670589.50.2.22552828290527556.30335793031366063638   104606.083  [-0.068, 93.73599999999999, 2609.4]     788.799988   788.799988         None  5.1: Build:1 29-Dec-2016 11:34 COMB_SCATT(250)_PE(250)_N_B_U_C cns:T, CFGs:7 created: 20-Jul-2023 10:53:24 isp9_compatible edge(0,0)subvol(0,0)  MR Import Filter 9/11/2024 10:40:05 PM\nI1510             151       -1304.25  [-102.08, -31.26, 1304.25]         202944.802996  1.3.46.670589.50.2.38261117663057406789.24415750432557216733   104606.091  [-0.068, 93.73599999999999, 2608.5]         789.25       789.25         None  5.1: Build:1 29-Dec-2016 11:34 COMB_SCATT(250)_PE(250)_N_B_U_C cns:T, CFGs:7 created: 20-Jul-2023 10:53:24 isp9_compatible edge(0,0)subvol(0,0)  MR Import Filter 9/11/2024 10:40:06 PM\nI1520             152        -1303.8   [-102.08, -31.26, 1303.8]         202944.805987  1.3.46.670589.50.2.33978901911734849605.29043900141172871223   104606.099  [-0.068, 93.73599999999999, 2607.6]     789.700012   789.700012         None  5.1: Build:1 29-Dec-2016 11:34 COMB_SCATT(250)_PE(250)_N_B_U_C cns:T, CFGs:7 created: 20-Jul-2023 10:53:24 isp9_compatible edge(0,0)subvol(0,0)  MR Import Filter 9/11/2024 10:40:06 PM\nI1530             153       -1303.35  [-102.08, -31.26, 1303.35]         202944.808977   1.3.46.670589.50.2.7844639372820316493.31192649152827522069   104606.106  [-0.068, 93.73599999999999, 2606.7]     790.150024   790.150024         None  5.1: Build:1 29-Dec-2016 11:34 COMB_SCATT(250)_PE(250)_N_B_U_C cns:T, CFGs:7 created: 20-Jul-2023 10:53:24 isp9_compatible edge(0,0)subvol(0,0)  MR Import Filter 9/11/2024 10:40:06 PM\nI1540             154        -1302.9   [-102.08, -31.26, 1302.9]         202944.811971    1.3.46.670589.50.2.5244302461605832777.3048233495977910062   104606.114  [-0.068, 93.73599999999999, 2605.8]     790.599976   790.599976         None  5.1: Build:1 29-Dec-2016 11:34 COMB_SCATT(250)_PE(250)_N_B_U_C cns:T, CFGs:7 created: 20-Jul-2023 10:53:24 isp9_compatible edge(0,0)subvol(0,0)  MR Import Filter 9/11/2024 10:40:06 PM\nI1550             155       -1302.45  [-102.08, -31.26, 1302.45]         202944.813960   1.3.46.670589.50.2.5312135692556539723.23427904334293318844   104606.122  [-0.068, 93.73599999999999, 2604.9]     791.049988   791.049988         None  5.1: Build:1 29-Dec-2016 11:34 COMB_SCATT(250)_PE(250)_N_B_U_C cns:T, CFGs:7 created: 20-Jul-2023 10:53:24 isp9_compatible edge(0,0)subvol(0,0)  MR Import Filter 9/11/2024 10:40:05 PM\nI1560             156        -1302.0   [-102.08, -31.26, 1302.0]         202944.816950   1.3.46.670589.50.2.12918973923535758659.2390422648968192028   104606.130  [-0.068, 93.73599999999999, 2604.0]          791.5        791.5         None  5.1: Build:1 29-Dec-2016 11:34 COMB_SCATT(250)_PE(250)_N_B_U_C cns:T, CFGs:7 created: 20-Jul-2023 10:53:24 isp9_compatible edge(0,0)subvol(0,0)  MR Import Filter 9/11/2024 10:40:04 PM\nI1570             157       -1301.55  [-102.08, -31.26, 1301.55]         202944.819941  1.3.46.670589.50.2.31023875581023120200.29040808051557943348   104606.137  [-0.068, 93.73599999999999, 2603.1]     791.950012   791.950012         None  5.1: Build:1 29-Dec-2016 11:34 COMB_SCATT(250)_PE(250)_N_B_U_C cns:T, CFGs:7 created: 20-Jul-2023 10:53:24 isp9_compatible edge(0,0)subvol(0,1)  MR Import Filter 9/11/2024 10:40:04 PM\nI1580             158        -1301.1   [-102.08, -31.26, 1301.1]         202944.822930  1.3.46.670589.50.2.25512203223674405956.29516816891901030313   104606.145  [-0.068, 93.73599999999999, 2602.2]     792.400024   792.400024         None  5.1: Build:1 29-Dec-2016 11:34 COMB_SCATT(250)_PE(250)_N_B_U_C cns:T, CFGs:7 created: 20-Jul-2023 10:53:26 isp9_compatible edge(0,0)subvol(1,0)  MR Import Filter 9/11/2024 10:40:06 PM\nI1590             159       -1300.65  [-102.08, -31.26, 1300.65]         202944.825920  1.3.46.670589.50.2.27676430991547857485.24059314961266654523   104606.152  [-0.068, 93.73599999999999, 2601.3]     792.849976   792.849976         None  5.1: Build:1 29-Dec-2016 11:34 COMB_SCATT(250)_PE(250)_N_B_U_C cns:T, CFGs:7 created: 20-Jul-2023 10:53:26 isp9_compatible edge(0,0)subvol(0,0)  MR Import Filter 9/11/2024 10:40:06 PM\nI1600             160        -1300.2   [-102.08, -31.26, 1300.2]         202944.828910   1.3.46.670589.50.2.2875500856239373888.28668186952067607160   104606.160  [-0.068, 93.73599999999999, 2600.4]     793.299988   793.299988         None  5.1: Build:1 29-Dec-2016 11:34 COMB_SCATT(250)_PE(250)_N_B_U_C cns:T, CFGs:7 created: 20-Jul-2023 10:53:26 isp9_compatible edge(0,0)subvol(0,0)  MR Import Filter 9/11/2024 10:40:07 PM\nI1610             161       -1299.75  [-102.08, -31.26, 1299.75]         202944.830903  1.3.46.670589.50.2.32083570212391169864.21620613481040516728   104606.168  [-0.068, 93.73599999999999, 2599.5]         793.75       793.75         None  5.1: Build:1 29-Dec-2016 11:34 COMB_SCATT(250)_PE(250)_N_B_U_C cns:T, CFGs:7 created: 20-Jul-2023 10:53:26 isp9_compatible edge(0,0)subvol(0,0)  MR Import Filter 9/11/2024 10:40:08 PM\nI1620             162        -1299.3   [-102.08, -31.26, 1299.3]         202944.833894    1.3.46.670589.50.2.2119746151766561346.3065804926585672579   104606.176  [-0.068, 93.73599999999999, 2598.6]     794.200012   794.200012         None  5.1: Build:1 29-Dec-2016 11:34 COMB_SCATT(250)_PE(250)_N_B_U_C cns:T, CFGs:7 created: 20-Jul-2023 10:53:26 isp9_compatible edge(0,0)subvol(0,0)  MR Import Filter 9/11/2024 10:40:08 PM\nI1630             163       -1298.85  [-102.08, -31.26, 1298.85]         202944.837880   1.3.46.670589.50.2.8555325142844670285.27611786241085410420   104606.183  [-0.068, 93.73599999999999, 2597.7]     794.650024   794.650024         None  5.1: Build:1 29-Dec-2016 11:34 COMB_SCATT(250)_PE(250)_N_B_U_C cns:T, CFGs:7 created: 20-Jul-2023 10:53:26 isp9_compatible edge(0,0)subvol(0,0)  MR Import Filter 9/11/2024 10:40:08 PM\nI1640             164        -1298.4   [-102.08, -31.26, 1298.4]         202944.840870  1.3.46.670589.50.2.24016375621453168705.22127295803920929089   104606.191  [-0.068, 93.73599999999999, 2596.8]     795.099976   795.099976         None  5.1: Build:1 29-Dec-2016 11:34 COMB_SCATT(250)_PE(250)_N_B_U_C cns:T, CFGs:7 created: 20-Jul-2023 10:53:26 isp9_compatible edge(0,0)subvol(0,0)  MR Import Filter 9/11/2024 10:40:08 PM\nI1650             165       -1297.95  [-102.08, -31.26, 1297.95]         202944.843860   1.3.46.670589.50.2.14122154163101473099.2945644139190043340   104606.198  [-0.068, 93.73599999999999, 2595.9]     795.549988   795.549988         None  5.1: Build:1 29-Dec-2016 11:34 COMB_SCATT(250)_PE(250)_N_B_U_C cns:T, CFGs:7 created: 20-Jul-2023 10:53:26 isp9_compatible edge(0,0)subvol(0,0)  MR Import Filter 9/11/2024 10:40:08 PM\nI1660             166        -1297.5   [-102.08, -31.26, 1297.5]         202944.845853  1.3.46.670589.50.2.38915498173220111937.21832518722397436331   104606.206  [-0.068, 93.73599999999999, 2595.0]          796.0        796.0         None  5.1: Build:1 29-Dec-2016 11:34 COMB_SCATT(250)_PE(250)_N_B_U_C cns:T, CFGs:7 created: 20-Jul-2023 10:53:26 isp9_compatible edge(0,0)subvol(0,0)  MR Import Filter 9/11/2024 10:40:08 PM\nI1670             167       -1297.05  [-102.08, -31.26, 1297.05]         202944.848843  1.3.46.670589.50.2.20355150232768524865.29002583293374146363   104606.214  [-0.068, 93.73599999999999, 2594.1]     796.450012   796.450012         None  5.1: Build:1 29-Dec-2016 11:34 COMB_SCATT(250)_PE(250)_N_B_U_C cns:T, CFGs:7 created: 20-Jul-2023 10:53:26 isp9_compatible edge(0,0)subvol(0,0)  MR Import Filter 9/11/2024 10:40:08 PM\nI1680             168        -1296.6   [-102.08, -31.26, 1296.6]         202944.852830  1.3.46.670589.50.2.29580344642974068299.21500991642850868922   104606.222  [-0.068, 93.73599999999999, 2593.2]     796.900024   796.900024         None  5.1: Build:1 29-Dec-2016 11:34 COMB_SCATT(250)_PE(250)_N_B_U_C cns:T, CFGs:7 created: 20-Jul-2023 10:53:26 isp9_compatible edge(0,0)subvol(0,0)  MR Import Filter 9/11/2024 10:40:08 PM\nI1690             169       -1296.15  [-102.08, -31.26, 1296.15]         202944.855820  1.3.46.670589.50.2.28183318072220371012.22291523923590949124   104606.229  [-0.068, 93.73599999999999, 2592.3]     797.349976   797.349976         None  5.1: Build:1 29-Dec-2016 11:34 COMB_SCATT(250)_PE(250)_N_B_U_C cns:T, CFGs:7 created: 20-Jul-2023 10:53:26 isp9_compatible edge(0,0)subvol(0,0)  MR Import Filter 9/11/2024 10:40:08 PM\nI1700             170        -1295.7   [-102.08, -31.26, 1295.7]         202944.858810   1.3.46.670589.50.2.2749726055651153734.32071777543757534930   104606.237  [-0.068, 93.73599999999999, 2591.4]     797.799988   797.799988         None  5.1: Build:1 29-Dec-2016 11:34 COMB_SCATT(250)_PE(250)_N_B_U_C cns:T, CFGs:7 created: 20-Jul-2023 10:53:26 isp9_compatible edge(0,0)subvol(0,0)  MR Import Filter 9/11/2024 10:40:08 PM\nI1710             171       -1295.25  [-102.08, -31.26, 1295.25]         202944.860804    1.3.46.670589.50.2.709469836799352142.24146916511877377695   104606.245  [-0.068, 93.73599999999999, 2590.5]         798.25       798.25         None  5.1: Build:1 29-Dec-2016 11:34 COMB_SCATT(250)_PE(250)_N_B_U_C cns:T, CFGs:7 created: 20-Jul-2023 10:53:26 isp9_compatible edge(0,0)subvol(0,0)  MR Import Filter 9/11/2024 10:40:06 PM\nI1720             172        -1294.8   [-102.08, -31.26, 1294.8]         202944.863805  1.3.46.670589.50.2.14319102253121366592.23192864734096958973   104606.253  [-0.068, 93.73599999999999, 2589.6]     798.700012   798.700012         None  5.1: Build:1 29-Dec-2016 11:34 COMB_SCATT(250)_PE(250)_N_B_U_C cns:T, CFGs:7 created: 20-Jul-2023 10:53:26 isp9_compatible edge(0,0)subvol(0,0)  MR Import Filter 9/11/2024 10:40:07 PM\nI1730             173       -1294.35  [-102.08, -31.26, 1294.35]         202944.866798     1.3.46.670589.50.2.613724579319702852.2699485627443631095   104606.260  [-0.068, 93.73599999999999, 2588.7]     799.150024   799.150024         None  5.1: Build:1 29-Dec-2016 11:34 COMB_SCATT(250)_PE(250)_N_B_U_C cns:T, CFGs:7 created: 20-Jul-2023 10:53:26 isp9_compatible edge(0,0)subvol(0,0)  MR Import Filter 9/11/2024 10:40:08 PM\nI1740             174        -1293.9   [-102.08, -31.26, 1293.9]         202944.869785  1.3.46.670589.50.2.37931660243737798470.31280001251035122650   104606.268  [-0.068, 93.73599999999999, 2587.8]     799.599976   799.599976         None  5.1: Build:1 29-Dec-2016 11:34 COMB_SCATT(250)_PE(250)_N_B_U_C cns:T, CFGs:7 created: 20-Jul-2023 10:53:26 isp9_compatible edge(0,0)subvol(0,0)  MR Import Filter 9/11/2024 10:40:08 PM\nI1750             175       -1293.45  [-102.08, -31.26, 1293.45]         202944.872775   1.3.46.670589.50.2.25684073602765880896.2292685904706791858   104606.275  [-0.068, 93.73599999999999, 2586.9]     800.049988   800.049988         None  5.1: Build:1 29-Dec-2016 11:34 COMB_SCATT(250)_PE(250)_N_B_U_C cns:T, CFGs:7 created: 20-Jul-2023 10:53:26 isp9_compatible edge(0,0)subvol(0,0)  MR Import Filter 9/11/2024 10:40:07 PM\nI1760             176        -1293.0   [-102.08, -31.26, 1293.0]         202944.875764  1.3.46.670589.50.2.13886924032808316748.25348243493874588176   104606.283  [-0.068, 93.73599999999999, 2586.0]          800.5        800.5         None  5.1: Build:1 29-Dec-2016 11:34 COMB_SCATT(250)_PE(250)_N_B_U_C cns:T, CFGs:7 created: 20-Jul-2023 10:53:26 isp9_compatible edge(0,0)subvol(0,0)  MR Import Filter 9/11/2024 10:40:08 PM\nI1770             177       -1292.55  [-102.08, -31.26, 1292.55]         202944.877761   1.3.46.670589.50.2.37904360963031407948.2758872427620620134   104606.291  [-0.068, 93.73599999999999, 2585.1]     800.950012   800.950012         None  5.1: Build:1 29-Dec-2016 11:34 COMB_SCATT(250)_PE(250)_N_B_U_C cns:T, CFGs:7 created: 20-Jul-2023 10:53:26 isp9_compatible edge(0,0)subvol(0,0)  MR Import Filter 9/11/2024 10:40:08 PM\nI1780             178        -1292.1   [-102.08, -31.26, 1292.1]         202944.880748   1.3.46.670589.50.2.31987507272111209537.2294361487827209983   104606.299  [-0.068, 93.73599999999999, 2584.2]     801.400024   801.400024         None  5.1: Build:1 29-Dec-2016 11:34 COMB_SCATT(250)_PE(250)_N_B_U_C cns:T, CFGs:7 created: 20-Jul-2023 10:53:26 isp9_compatible edge(0,0)subvol(0,0)  MR Import Filter 9/11/2024 10:40:07 PM\nI1790             179       -1291.65  [-102.08, -31.26, 1291.65]         202944.883738   1.3.46.670589.50.2.1406097504164174921.25616858733420838279   104606.306  [-0.068, 93.73599999999999, 2583.3]     801.849976   801.849976         None  5.1: Build:1 29-Dec-2016 11:34 COMB_SCATT(250)_PE(250)_N_B_U_C cns:T, CFGs:7 created: 20-Jul-2023 10:53:26 isp9_compatible edge(0,0)subvol(0,0)  MR Import Filter 9/11/2024 10:40:07 PM\nI1800             180        -1291.2   [-102.08, -31.26, 1291.2]         202944.886728    1.3.46.670589.50.2.1336253973680733764.2174997045642896263   104606.314  [-0.068, 93.73599999999999, 2582.4]     802.299988   802.299988         None  5.1: Build:1 29-Dec-2016 11:34 COMB_SCATT(250)_PE(250)_N_B_U_C cns:T, CFGs:7 created: 20-Jul-2023 10:53:26 isp9_compatible edge(0,0)subvol(0,0)  MR Import Filter 9/11/2024 10:40:07 PM\nI1810             181       -1290.75  [-102.08, -31.26, 1290.75]         202944.889721    1.3.46.670589.50.2.42209061343171000900.233373516957218421   104606.322  [-0.068, 93.73599999999999, 2581.5]         802.75       802.75         None  5.1: Build:1 29-Dec-2016 11:34 COMB_SCATT(250)_PE(250)_N_B_U_C cns:T, CFGs:7 created: 20-Jul-2023 10:53:26 isp9_compatible edge(0,0)subvol(0,0)  MR Import Filter 9/11/2024 10:40:07 PM\nI1820             182        -1290.3   [-102.08, -31.26, 1290.3]         202944.892712   1.3.46.670589.50.2.3514985489534391360.22699095811140684542   104606.329  [-0.068, 93.73599999999999, 2580.6]     803.200012   803.200012         None  5.1: Build:1 29-Dec-2016 11:34 COMB_SCATT(250)_PE(250)_N_B_U_C cns:T, CFGs:7 created: 20-Jul-2023 10:53:26 isp9_compatible edge(0,0)subvol(0,0)  MR Import Filter 9/11/2024 10:40:06 PM\nI1830             183       -1289.85  [-102.08, -31.26, 1289.85]         202944.894705   1.3.46.670589.50.2.7750704204076689480.32049731993800422930   104606.337  [-0.068, 93.73599999999999, 2579.7]     803.650024   803.650024         None  5.1: Build:1 29-Dec-2016 11:34 COMB_SCATT(250)_PE(250)_N_B_U_C cns:T, CFGs:7 created: 20-Jul-2023 10:53:26 isp9_compatible edge(0,0)subvol(0,0)  MR Import Filter 9/11/2024 10:40:07 PM\nI1840             184        -1289.4   [-102.08, -31.26, 1289.4]         202944.897695  1.3.46.670589.50.2.20022865302022364743.22439884863678308411   104606.345  [-0.068, 93.73599999999999, 2578.8]     804.099976   804.099976         None  5.1: Build:1 29-Dec-2016 11:34 COMB_SCATT(250)_PE(250)_N_B_U_C cns:T, CFGs:7 created: 20-Jul-2023 10:53:26 isp9_compatible edge(0,0)subvol(0,0)  MR Import Filter 9/11/2024 10:40:06 PM\nI1850             185       -1288.95  [-102.08, -31.26, 1288.95]         202944.900681  1.3.46.670589.50.2.29845821671185525832.27131016773886641124   104606.353  [-0.068, 93.73599999999999, 2577.9]     804.549988   804.549988         None  5.1: Build:1 29-Dec-2016 11:34 COMB_SCATT(250)_PE(250)_N_B_U_C cns:T, CFGs:7 created: 20-Jul-2023 10:53:26 isp9_compatible edge(0,0)subvol(0,0)  MR Import Filter 9/11/2024 10:40:07 PM\nI1860             186        -1288.5   [-102.08, -31.26, 1288.5]         202944.903671  1.3.46.670589.50.2.30368315524111623237.31239146961571303626   104606.360  [-0.068, 93.73599999999999, 2577.0]          805.0        805.0         None  5.1: Build:1 29-Dec-2016 11:34 COMB_SCATT(250)_PE(250)_N_B_U_C cns:T, CFGs:7 created: 20-Jul-2023 10:53:26 isp9_compatible edge(0,0)subvol(0,0)  MR Import Filter 9/11/2024 10:40:08 PM\nI1870             187       -1288.05  [-102.08, -31.26, 1288.05]         202944.906665    1.3.46.670589.50.2.1471354685674020175.2869029983751204387   104606.368  [-0.068, 93.73599999999999, 2576.1]     805.450012   805.450012         None  5.1: Build:1 29-Dec-2016 11:34 COMB_SCATT(250)_PE(250)_N_B_U_C cns:T, CFGs:7 created: 20-Jul-2023 10:53:26 isp9_compatible edge(0,0)subvol(0,0)  MR Import Filter 9/11/2024 10:40:07 PM\nI1880             188        -1287.6   [-102.08, -31.26, 1287.6]         202944.909651   1.3.46.670589.50.2.29715734701680831818.2709395311629506546   104606.376  [-0.068, 93.73599999999999, 2575.2]     805.900024   805.900024         None  5.1: Build:1 29-Dec-2016 11:34 COMB_SCATT(250)_PE(250)_N_B_U_C cns:T, CFGs:7 created: 20-Jul-2023 10:53:26 isp9_compatible edge(0,0)subvol(0,0)  MR Import Filter 9/11/2024 10:40:07 PM\nI1890             189       -1287.15  [-102.08, -31.26, 1287.15]         202944.912646   1.3.46.670589.50.2.1418392352663518279.29181496623827615078   104606.383  [-0.068, 93.73599999999999, 2574.3]     806.349976   806.349976         None  5.1: Build:1 29-Dec-2016 11:34 COMB_SCATT(250)_PE(250)_N_B_U_C cns:T, CFGs:7 created: 20-Jul-2023 10:53:26 isp9_compatible edge(0,0)subvol(0,0)  MR Import Filter 9/11/2024 10:40:08 PM\nI1900             190        -1286.7   [-102.08, -31.26, 1286.7]         202944.921612  1.3.46.670589.50.2.27619167602051447629.30673080553354324300   104606.391  [-0.068, 93.73599999999999, 2573.4]     806.799988   806.799988         None  5.1: Build:1 29-Dec-2016 11:34 COMB_SCATT(250)_PE(250)_N_B_U_C cns:T, CFGs:7 created: 20-Jul-2023 10:53:26 isp9_compatible edge(0,0)subvol(0,0)  MR Import Filter 9/11/2024 10:40:07 PM\nI1910             191       -1286.25  [-102.08, -31.26, 1286.25]         202944.924601   1.3.46.670589.50.2.2607952324281162308.21661813323921905294   104606.399  [-0.068, 93.73599999999999, 2572.5]         807.25       807.25         None  5.1: Build:1 29-Dec-2016 11:34 COMB_SCATT(250)_PE(250)_N_B_U_C cns:T, CFGs:7 created: 20-Jul-2023 10:53:26 isp9_compatible edge(0,0)subvol(0,0)  MR Import Filter 9/11/2024 10:40:07 PM\nI1920             192        -1285.8   [-102.08, -31.26, 1285.8]         202944.926598   1.3.46.670589.50.2.34915121324249299011.3145105055882593752   104606.406  [-0.068, 93.73599999999999, 2571.6]     807.700012   807.700012         None  5.1: Build:1 29-Dec-2016 11:34 COMB_SCATT(250)_PE(250)_N_B_U_C cns:T, CFGs:7 created: 20-Jul-2023 10:53:26 isp9_compatible edge(0,0)subvol(0,0)  MR Import Filter 9/11/2024 10:40:07 PM\nI1930             193       -1285.35  [-102.08, -31.26, 1285.35]         202944.929589   1.3.46.670589.50.2.5604276131572879949.24452085643763102348   104606.414  [-0.068, 93.73599999999999, 2570.7]     808.150024   808.150024         None  5.1: Build:1 29-Dec-2016 11:34 COMB_SCATT(250)_PE(250)_N_B_U_C cns:T, CFGs:7 created: 20-Jul-2023 10:53:26 isp9_compatible edge(0,0)subvol(0,0)  MR Import Filter 9/11/2024 10:40:07 PM\nI1940             194        -1284.9   [-102.08, -31.26, 1284.9]         202944.932578   1.3.46.670589.50.2.6591290463726346057.21938960593517249872   104606.422  [-0.068, 93.73599999999999, 2569.8]     808.599976   808.599976         None  5.1: Build:1 29-Dec-2016 11:34 COMB_SCATT(250)_PE(250)_N_B_U_C cns:T, CFGs:7 created: 20-Jul-2023 10:53:26 isp9_compatible edge(0,0)subvol(0,0)  MR Import Filter 9/11/2024 10:40:06 PM\nI1950             195       -1284.45  [-102.08, -31.26, 1284.45]         202944.935564  1.3.46.670589.50.2.20082091841370943821.25331897972040824663   104606.429  [-0.068, 93.73599999999999, 2568.9]     809.049988   809.049988         None  5.1: Build:1 29-Dec-2016 11:34 COMB_SCATT(250)_PE(250)_N_B_U_C cns:T, CFGs:7 created: 20-Jul-2023 10:53:26 isp9_compatible edge(0,0)subvol(0,0)  MR Import Filter 9/11/2024 10:40:07 PM\nI1960             196        -1284.0   [-102.08, -31.26, 1284.0]         202944.938555  1.3.46.670589.50.2.35180862943710998350.22727482841478396089   104606.437  [-0.068, 93.73599999999999, 2568.0]          809.5        809.5         None  5.1: Build:1 29-Dec-2016 11:34 COMB_SCATT(250)_PE(250)_N_B_U_C cns:T, CFGs:7 created: 20-Jul-2023 10:53:26 isp9_compatible edge(0,0)subvol(0,0)  MR Import Filter 9/11/2024 10:40:06 PM\nI1970             197       -1283.55  [-102.08, -31.26, 1283.55]         202944.940554   1.3.46.670589.50.2.27103396084248005443.2281023376645068575   104606.445  [-0.068, 93.73599999999999, 2567.1]     809.950012   809.950012         None  5.1: Build:1 29-Dec-2016 11:34 COMB_SCATT(250)_PE(250)_N_B_U_C cns:T, CFGs:7 created: 20-Jul-2023 10:53:26 isp9_compatible edge(0,0)subvol(0,0)  MR Import Filter 9/11/2024 10:40:07 PM\nI1980             198        -1283.1   [-102.08, -31.26, 1283.1]         202944.943538  1.3.46.670589.50.2.16278189971217472065.21592036754119550864   104606.453  [-0.068, 93.73599999999999, 2566.2]     810.400024   810.400024         None  5.1: Build:1 29-Dec-2016 11:34 COMB_SCATT(250)_PE(250)_N_B_U_C cns:T, CFGs:7 created: 20-Jul-2023 10:53:26 isp9_compatible edge(0,0)subvol(0,0)  MR Import Filter 9/11/2024 10:40:08 PM\nI1990             199       -1282.65  [-102.08, -31.26, 1282.65]         202944.946528   1.3.46.670589.50.2.36470875972426223943.3072596830716477713   104606.460  [-0.068, 93.73599999999999, 2565.3]     810.849976   810.849976         None  5.1: Build:1 29-Dec-2016 11:34 COMB_SCATT(250)_PE(250)_N_B_U_C cns:T, CFGs:7 created: 20-Jul-2023 10:53:26 isp9_compatible edge(0,0)subvol(0,0)  MR Import Filter 9/11/2024 10:40:07 PM\nI2000             200        -1282.2   [-102.08, -31.26, 1282.2]         202944.949518   1.3.46.670589.50.2.6764151184066527051.23245424683217897352   104606.468  [-0.068, 93.73599999999999, 2564.4]     811.299988   811.299988         None  5.1: Build:1 29-Dec-2016 11:34 COMB_SCATT(250)_PE(250)_N_B_U_C cns:T, CFGs:7 created: 20-Jul-2023 10:53:26 isp9_compatible edge(0,0)subvol(0,0)  MR Import Filter 9/11/2024 10:40:07 PM\n\n\n这种智能分离机制带来了立竿见影的好处：元数据存储占用急剧减少，并且访问序列级信息（如患者姓名）时无需遍历，实现了O(1)时间复杂度的查找。\n\nfrom dicube.dicom import CommonTags\n\n# 检查共享元数据\npatient_name = meta.get_shared_value(CommonTags.PatientName)\nis_shared = meta.is_shared(CommonTags.PatientName)\nprint(f\"PatientName: '{patient_name}' (是否为共享数据: {is_shared})\")\n\n# 检查非共享元数据\n# get_values 会返回一个包含所有切片该字段值的列表\ninstance_numbers = meta.get_values(CommonTags.InstanceNumber)\nis_shared_instance = meta.is_shared(CommonTags.InstanceNumber)\nprint(f\"InstanceNumber (是否为共享数据: {is_shared_instance})\")\nprint(f\"共找到 {len(instance_numbers)} 个InstanceNumber\")\nprint(f\"范围从: {min(instance_numbers)} 到 {max(instance_numbers)}\")\n\nPatientName: '{'Alphabetic': 'Anonymous'}' (是否为共享数据: True)\nInstanceNumber (是否为共享数据: False)\n共找到 200 个InstanceNumber\n范围从: 1 到 200",
    "crumbs": [
      "首页",
      "DiCube",
      "元数据存储机制"
    ]
  },
  {
    "objectID": "1.2_meta_storage.html#极致的压缩效率json-与-zstandard-的天作之合",
    "href": "1.2_meta_storage.html#极致的压缩效率json-与-zstandard-的天作之合",
    "title": "元数据存储机制",
    "section": "4. 极致的压缩效率：JSON 与 Zstandard 的天作之合",
    "text": "4. 极致的压缩效率：JSON 与 Zstandard 的天作之合\n分离元数据解决了冗余，但如何高效地存储这些结构化的文本信息呢？DiCube 选择了由Facebook开发的现代化压缩算法 Zstandard (zstd)。\nZstd 特别擅长压缩具有重复模式的结构化文本数据（如JSON），在压缩比和解压速度上均显著优于传统的 gzip。\n\n# 估算原始DICOM头文件的总大小\ndicom_header_total_size = 0\nall_files = list(Path(dicom_dir).glob(\"*\"))\n\nfor dcm_file in all_files:\n    # 获取文件总大小\n    total_size = os.path.getsize(dcm_file)\n    \n    # 读取DICOM文件获取pixel_array大小\n    ds = pydicom.dcmread(dcm_file)\n    if hasattr(ds, 'pixel_array'):\n        pixel_size = ds.pixel_array.nbytes\n    else:\n        pixel_size = 0\n    \n    # 头文件大小 = 总大小 - pixel_array大小\n    header_size = total_size - pixel_size\n    dicom_header_total_size += header_size\n\n\n\n# 获取DiCube压缩后的元数据大小\nmeta_json_str = meta.to_json()\nimport zstandard as zstd\ncompressor = zstd.ZstdCompressor(level=9) # 使用较高的压缩级别\ncompressed_meta = compressor.compress(meta_json_str.encode('utf-8'))\ndicube_meta_size = len(compressed_meta)\n\nprint(f\"原始DICOM头文件总大小 (估算): {dicom_header_total_size / 1024:.2f} KB\")\nprint(f\"DiCube Zstd压缩后元数据大小: {dicube_meta_size / 1024:.2f} KB\")\nprint(f\"元数据压缩比高达: {dicom_header_total_size / dicube_meta_size:.1f}x\")\n\n原始DICOM头文件总大小 (估算): 2280.90 KB\nDiCube Zstd压缩后元数据大小: 25.72 KB\n元数据压缩比高达: 88.7x\n\n\n超过 80 倍的压缩比！这表明 DicomMeta 的共享机制与 zstd 压缩形成了完美的组合拳，将元数据存储开销降至最低。",
    "crumbs": [
      "首页",
      "DiCube",
      "元数据存储机制"
    ]
  },
  {
    "objectID": "1.2_meta_storage.html#提升开发体验commontags-枚举",
    "href": "1.2_meta_storage.html#提升开发体验commontags-枚举",
    "title": "元数据存储机制",
    "section": "5. 提升开发体验：CommonTags 枚举",
    "text": "5. 提升开发体验：CommonTags 枚举\n直接操作 (0010,0010) 这样的十六进制标签不仅难以记忆，而且容易出错。为了提升代码的可读性和健壮性，DiCube 提供了一个便捷的 CommonTags 枚举类，收录了绝大部分常用的DICOM标签。\n开发者可以通过语义化的名称来访问元数据，使代码更加清晰、易于维护。\n\n# 使用CommonTags枚举类，代码更具可读性\ninstance_numbers = meta.get_values(CommonTags.InstanceNumber)\npositions = meta.get_values(CommonTags.ImagePositionPatient)\n\n# positions 是一个包含每个切片 [X, Y, Z] 坐标的列表\nprint(f\"实例编号范围: {min(instance_numbers)} - {max(instance_numbers)}\")\nprint(f\"切片Z轴位置范围: 从 {positions[0][2]:.2f} 到 {positions[-1][2]:.2f}\")\n\n实例编号范围: 1 - 200\n切片Z轴位置范围: 从 1371.75 到 1282.20",
    "crumbs": [
      "首页",
      "DiCube",
      "元数据存储机制"
    ]
  },
  {
    "objectID": "1.2_meta_storage.html#性能的飞跃秒级与毫秒级的较量",
    "href": "1.2_meta_storage.html#性能的飞跃秒级与毫秒级的较量",
    "title": "元数据存储机制",
    "section": "6. 性能的飞跃：秒级与毫秒级的较量",
    "text": "6. 性能的飞跃：秒级与毫秒级的较量\nDicomMeta 的设计优势最终体现在了性能上。让我们来实际对比一下，从一个包含200个切片的序列中读取所有 InstanceNumber 所需的时间。\n\n传统方式：需要循环打开、解析200个独立的文件。\nDiCube方式：只需打开1个文件，解压一小块元数据，并直接访问解析好的列表。\n\n\n\nimport time\n\n# 传统DICOM方式：遍历所有文件\nstart_time = time.time()\ndicom_instance_numbers = []\nfor dcm_file in all_files:\n    ds = pydicom.dcmread(dcm_file, stop_before_pixels=True)\n    dicom_instance_numbers.append(int(ds.InstanceNumber))\ndicom_time = time.time() - start_time\n\n# DiCube方式：一次性加载\nstart_time = time.time()\ndicube_meta = dicube.load_meta(\"temp_demo.dcbs\")\ndicube_instance_numbers = dicube_meta.get_values(CommonTags.InstanceNumber)\ndicube_time = time.time() - start_time\n\nprint(f\"传统DICOM I/O耗时: {dicom_time * 1000:.2f} 毫秒\")\nprint(f\"DiCube DicomMeta 耗时: {dicube_time * 1000:.2f} 毫秒\")\nprint(f\"\\n性能提升: {dicom_time / dicube_time:.1f} 倍\")\n\n# 清理临时文件\nos.remove(\"temp_demo.dcbs\")\n\n传统DICOM I/O耗时: 149.66 毫秒\nDiCube DicomMeta 耗时: 3.30 毫秒\n\n性能提升: 45.4 倍\n\n\n几十倍的性能提升是显而易见的。这背后是 I/O 模式的根本性变革：从多次、琐碎的文件操作，转变为一次性、集中的数据块读取。",
    "crumbs": [
      "首页",
      "DiCube",
      "元数据存储机制"
    ]
  },
  {
    "objectID": "1.2_meta_storage.html#总结",
    "href": "1.2_meta_storage.html#总结",
    "title": "元数据存储机制",
    "section": "7. 总结",
    "text": "7. 总结\nDiCube 的 DicomMeta 机制并非简单的元数据存储，而是一套针对现代医学影像数据处理特点精心设计的解决方案。其核心优势在于：\n\n智能去冗余：通过分离共享与非共享元数据，从根源上解决了DICOM的冗余问题，大幅减少存储占用。\n拥抱现代化标准：基于DICOM JSON标准，并采用高效的Zstandard压缩，确保了兼容性与极致性能。\n数量级的性能提升：将元数据读取从“遍历文件系统”的慢速操作，转变为“内存访问”级别的高速操作，为大规模数据分析和AI训练扫清了障碍。\n\n这些设计共同构成了 DiCube 处理医学影像数据的坚实基础，使其在效率和易用性上远超传统的工作流。",
    "crumbs": [
      "首页",
      "DiCube",
      "元数据存储机制"
    ]
  },
  {
    "objectID": "3.0_spacetransformer_motivation.html",
    "href": "3.0_spacetransformer_motivation.html",
    "title": "空间变换库对比与动机",
    "section": "",
    "text": "在医学图像分析流水线中，空间变换是一个核心且不可避免的环节。典型的工作流程包括：提取感兴趣区域（ROI）、重采样到标准尺寸、执行AI分析、将结果精确映射回原始图像空间。这一流程看似简单，但在实际实现中却充满了技术陷阱。\n本文通过一个具体的对比实验，展示当前主流空间变换库在处理这一标准流程时所面临的问题，并介绍SpaceTransformer如何通过统一的设计理念来解决这些挑战。",
    "crumbs": [
      "首页",
      "SpaceTransformer",
      "空间变换库对比与动机"
    ]
  },
  {
    "objectID": "3.0_spacetransformer_motivation.html#引言空间变换的普遍需求与实现困境",
    "href": "3.0_spacetransformer_motivation.html#引言空间变换的普遍需求与实现困境",
    "title": "空间变换库对比与动机",
    "section": "",
    "text": "在医学图像分析流水线中，空间变换是一个核心且不可避免的环节。典型的工作流程包括：提取感兴趣区域（ROI）、重采样到标准尺寸、执行AI分析、将结果精确映射回原始图像空间。这一流程看似简单，但在实际实现中却充满了技术陷阱。\n本文通过一个具体的对比实验，展示当前主流空间变换库在处理这一标准流程时所面临的问题，并介绍SpaceTransformer如何通过统一的设计理念来解决这些挑战。",
    "crumbs": [
      "首页",
      "SpaceTransformer",
      "空间变换库对比与动机"
    ]
  },
  {
    "objectID": "3.0_spacetransformer_motivation.html#测试场景设计",
    "href": "3.0_spacetransformer_motivation.html#测试场景设计",
    "title": "空间变换库对比与动机",
    "section": "测试场景设计",
    "text": "测试场景设计\n为了客观评估不同库的表现，我们设计了一个简化但具有代表性的测试场景：\n\nimport numpy as np\nimport matplotlib.pyplot as plt\n\ndef create_test_image():\n    \"\"\"\n    创建测试图像：35x35背景 + 9x9中心正方形 + 中心关键点\n    这个设计模拟了医学图像中的典型结构：器官边界 + 内部标志点\n    \"\"\"\n    img = np.zeros((35, 35), dtype=np.float32)\n    \n    # 9x9正方形物体（模拟器官）\n    center = 35 // 2\n    half_size = 4  # 9x9的一半\n    img[center-half_size:center+half_size+1, center-half_size:center+half_size+1] = 1.0\n    \n    # 中心关键点（模拟需要定位的解剖标志）\n    img[center, center] = 5\n    \n    return img\n\ndef get_segmentation(img, threshold=0.5):\n    \"\"\"提取分割掩膜\"\"\"\n    return (img &gt;= threshold).astype(np.uint8)\n\ndef get_keypoint(img):\n    \"\"\"检测关键点：输出(x,y)格式的2D点\"\"\"\n    candidates = np.array(np.where(img &gt;= 3))\n    if candidates.size &gt; 0:\n        # 返回(y,x)格式的点坐标\n        center_y = candidates[0].mean()\n        center_x = candidates[1].mean()\n        return np.array([center_y, center_x])\n    else:\n        return np.array([0.0, 0.0])\n\n# === 全局参数配置 ===\n# ROI提取参数 (偏移的bbox，模拟实际检测中的偏移)\nROI_START_Y = 10\nROI_START_X = 10\nROI_SIZE = 15\nROI_END_Y = ROI_START_Y + ROI_SIZE  # 25\nROI_END_X = ROI_START_X + ROI_SIZE  # 25\n\n# 重采样目标尺寸\nTARGET_SIZE = 32\n\n# 创建测试数据\noriginal_img = create_test_image()\noriginal_shape = original_img.shape\n\nprint(f\"原始图像尺寸: {original_shape}\")\nprint(f\"目标物体覆盖范围: {np.argwhere(original_img &gt; 0.5).min(axis=0)} 到 {np.argwhere(original_img &gt; 0.5).max(axis=0)}\")\nprint(f\"ROI区域: ({ROI_START_Y}:{ROI_END_Y}, {ROI_START_X}:{ROI_END_X})\")\nprint(f\"目标尺寸: {TARGET_SIZE}x{TARGET_SIZE}\")\n\n# 计算真实的关键点位置（理论值）\ntrue_keypoint = np.array([17, 17])  # 35x35图像的中心 (y, x)\n\ndef plot_result(original_img, segment_result, keypoint_result, method_name, true_keypoint):\n    \"\"\"统一的结果绘制函数\"\"\"\n    plt.figure(figsize=(8, 6))\n    plt.imshow(original_img, cmap='gray', alpha=0.7)\n    if segment_result is not None:\n        plt.contour(segment_result, levels=[0.5], colors='red', linewidths=2)\n    \n    # 显示检测到的关键点\n    if keypoint_result is not None and len(keypoint_result) &gt; 0:\n        if keypoint_result.ndim == 1:  # SpaceTransformer返回的是1D数组\n            plt.plot(keypoint_result[1], keypoint_result[0], 'ro', markersize=8, label='Detected Point')\n        else:  # 其他方法可能返回2D数组\n            plt.plot(keypoint_result[0, 1], keypoint_result[0, 0], 'ro', markersize=8, label='Detected Point')\n    \n    # 显示真实关键点\n    plt.plot(true_keypoint[1], true_keypoint[0], 'g+', markersize=12, \n           markeredgewidth=3, label='Ground Truth')\n    \n    plt.title(f'{method_name} Result')\n    plt.legend()\n    plt.grid(True, alpha=0.3)\n    \n    # 计算坐标误差\n    if keypoint_result is not None and len(keypoint_result) &gt; 0:\n        if keypoint_result.ndim == 1:\n            error = np.linalg.norm(keypoint_result - true_keypoint)\n        else:\n            error = np.linalg.norm(keypoint_result[0] - true_keypoint)\n        plt.text(0.02, 0.98, f'Error: {error:.3f} pixels', transform=plt.gca().transAxes, \n                bbox=dict(boxstyle='round', facecolor='white', alpha=0.8), verticalalignment='top')\n    \n    plt.tight_layout()\n    plt.show()\n\nplt.figure(figsize=(6, 5))\nplt.imshow(original_img, cmap='gray')\nplt.title('Test Image: 35x35 Background + 9x9 Square + Center Keypoint')\nplt.colorbar()\nplt.show()\n\n原始图像尺寸: (35, 35)\n目标物体覆盖范围: [13 13] 到 [21 21]\nROI区域: (10:25, 10:25)\n目标尺寸: 32x32",
    "crumbs": [
      "首页",
      "SpaceTransformer",
      "空间变换库对比与动机"
    ]
  },
  {
    "objectID": "3.0_spacetransformer_motivation.html#测试流水线定义",
    "href": "3.0_spacetransformer_motivation.html#测试流水线定义",
    "title": "空间变换库对比与动机",
    "section": "测试流水线定义",
    "text": "测试流水线定义\n我们将实现以下标准的医学图像处理流水线：\n\nROI提取：从35x35图像中提取15x15的中心区域\n重采样：将15x15区域缩放到32x32\n分析处理：执行分割和关键点检测\n结果回传：将32x32空间的结果精确映射回35x35原始空间\n\n每个库的实现将被评估其代码复杂度、参数管理难度以及坐标变换的准确性。",
    "crumbs": [
      "首页",
      "SpaceTransformer",
      "空间变换库对比与动机"
    ]
  },
  {
    "objectID": "3.0_spacetransformer_motivation.html#方法一simpleitk实现",
    "href": "3.0_spacetransformer_motivation.html#方法一simpleitk实现",
    "title": "空间变换库对比与动机",
    "section": "方法一：SimpleITK实现",
    "text": "方法一：SimpleITK实现\nSimpleITK是医学图像处理的标准库，提供了完整的ITK功能接口。\n\nimport SimpleITK as sitk\n\ndef process_with_simpleitk(img):\n    \"\"\"使用SimpleITK实现完整流水线\"\"\"\n    \n    # 转换为SimpleITK图像\n    sitk_img = sitk.GetImageFromArray(img)\n    sitk_img.SetSpacing([1.0, 1.0])\n    sitk_img.SetOrigin([0.0, 0.0])\n    \n    # 步骤1：ROI提取 (使用全局参数)\n    original_size = sitk_img.GetSize()\n    roi_size = [ROI_SIZE, ROI_SIZE] \n    roi_start = [ROI_START_X, ROI_START_Y]  # 注意SimpleITK使用(X,Y)顺序\n    \n    roi_img = sitk.RegionOfInterest(sitk_img, roi_size, roi_start)\n    \n    # 步骤2：重采样到目标尺寸\n    target_size = [TARGET_SIZE, TARGET_SIZE]\n    \n    # 计算新的spacing以保持物理尺寸\n    original_spacing = roi_img.GetSpacing()\n    physical_size = [roi_size[i] * original_spacing[i] for i in range(2)]\n    target_spacing = [physical_size[i] / target_size[i] for i in range(2)]\n    \n    # 配置重采样器\n    resampler = sitk.ResampleImageFilter()\n    resampler.SetOutputSpacing(target_spacing)\n    resampler.SetSize(target_size)\n    resampler.SetOutputOrigin(roi_img.GetOrigin())\n    resampler.SetOutputDirection(roi_img.GetDirection())\n    resampler.SetInterpolator(sitk.sitkLinear)\n    resampler.SetDefaultPixelValue(0)\n    \n    resampled_img = resampler.Execute(roi_img)\n    resampled_array = sitk.GetArrayFromImage(resampled_img)\n    \n    # 步骤3：分析处理\n    segment_result = get_segmentation(resampled_array)\n    keypoint_result = get_keypoint(resampled_array)\n    \n    # 步骤4：结果回传 - 这里是SimpleITK的复杂之处\n    # 需要手动计算多个坐标变换\n    \n    # 4a: 从目标尺寸回到ROI空间\n    scale_factor = np.array(roi_size) / np.array(target_size)\n    keypoint_in_roi = keypoint_result * scale_factor\n    \n    # 4b: 从ROI空间回到原始空间\n    keypoint_in_original = keypoint_in_roi + np.array([roi_start[1], roi_start[0]])\n    \n    # 分割结果回传需要再次重采样\n    segment_sitk = sitk.GetImageFromArray(segment_result.astype(np.float32))\n    segment_sitk.SetSpacing(target_spacing)\n    segment_sitk.SetOrigin(resampled_img.GetOrigin())\n    \n    # 重采样回ROI尺寸\n    back_resampler = sitk.ResampleImageFilter()\n    back_resampler.SetOutputSpacing(original_spacing)\n    back_resampler.SetSize(roi_size)\n    back_resampler.SetOutputOrigin(roi_img.GetOrigin())\n    back_resampler.SetInterpolator(sitk.sitkNearestNeighbor)\n    back_resampler.SetDefaultPixelValue(0)\n    \n    segment_roi = back_resampler.Execute(segment_sitk)\n    segment_roi_array = sitk.GetArrayFromImage(segment_roi)\n    \n    # 将ROI结果放回原始图像\n    segment_original = np.zeros(original_shape, dtype=np.uint8)\n    segment_original[roi_start[1]:roi_start[1]+roi_size[1], \n                    roi_start[0]:roi_start[0]+roi_size[0]] = segment_roi_array\n    \n    return segment_original, keypoint_in_original\n\nprint(\"=== SimpleITK实现 ===\")\nsitk_segment, sitk_keypoint = process_with_simpleitk(original_img)\nprint(f\"检测到的关键点坐标: {sitk_keypoint}\")\nprint(f\"分割区域像素数: {np.sum(sitk_segment)}\")\n\n# 立即显示SimpleITK结果\nplot_result(original_img, sitk_segment, sitk_keypoint, \"SimpleITK\", true_keypoint)\n\n=== SimpleITK实现 ===\n检测到的关键点坐标: [16.875 16.875]\n分割区域像素数: 81\n\n\n\n\n\n\n\n\n\nSimpleITK的问题分析：\n\n重采样配置冗长：每次重采样都需要配置多个参数\n代码可读性差：业务逻辑被大量底层配置代码掩盖\n轴序问题：这张图xy对称，所以体现不出来，但实际上很容易出现轴序错误",
    "crumbs": [
      "首页",
      "SpaceTransformer",
      "空间变换库对比与动机"
    ]
  },
  {
    "objectID": "3.0_spacetransformer_motivation.html#方法二scipy.ndimage实现",
    "href": "3.0_spacetransformer_motivation.html#方法二scipy.ndimage实现",
    "title": "空间变换库对比与动机",
    "section": "方法二：scipy.ndimage实现",
    "text": "方法二：scipy.ndimage实现\nscipy.ndimage是通用的N维图像处理库，在科学计算社区广泛使用。\n\nfrom scipy import ndimage\nfrom scipy.ndimage import zoom\n\ndef process_with_scipy(img):\n    \"\"\"使用scipy.ndimage实现流水线\"\"\"\n    \n    # 步骤1：ROI提取 (使用全局参数)\n    h, w = img.shape\n    roi_img = img[ROI_START_Y:ROI_END_Y, ROI_START_X:ROI_END_X]\n    \n    # 步骤2：重采样到目标尺寸\n    zoom_factor = TARGET_SIZE / ROI_SIZE\n    \n    # 注意：scipy的zoom函数坐标处理容易出错\n    resampled_img = zoom(roi_img, zoom_factor, order=1, mode='constant', cval=0)\n    \n    # 步骤3：分析处理\n    segment_result = get_segmentation(resampled_img)\n    keypoint_result = get_keypoint(resampled_img)\n    \n    # 步骤4：结果回传\n    # 4a: 关键点坐标变换\n    keypoint_in_roi = keypoint_result / zoom_factor\n    keypoint_in_original = keypoint_in_roi + [ROI_START_Y, ROI_START_X]\n    \n    # 4b: 分割结果回传\n    # zoom函数的逆变换参数计算容易出错\n    segment_roi = zoom(segment_result.astype(np.float32), \n                      1.0 / zoom_factor, order=0, mode='constant', cval=0)\n        \n    # 放回原始图像\n    segment_original = np.zeros_like(img, dtype=np.uint8)\n    segment_original[ROI_START_Y:ROI_END_Y, ROI_START_X:ROI_END_X] = segment_roi\n    \n    return segment_original, keypoint_in_original\n\nprint(\"=== scipy.ndimage实现 ===\")\nscipy_segment, scipy_keypoint = process_with_scipy(original_img)\nprint(f\"检测到的关键点坐标: {scipy_keypoint}\")\nprint(f\"分割区域像素数: {np.sum(scipy_segment)}\")\n\n# 立即显示scipy.ndimage结果\nplot_result(original_img, scipy_segment, scipy_keypoint, \"scipy.ndimage\", true_keypoint)\n\n=== scipy.ndimage实现 ===\n检测到的关键点坐标: [17.265625 17.265625]\n分割区域像素数: 81\n\n\n\n\n\n\n\n\n\nscipy.ndimage的问题分析： - zoom函数：逆变换时尺寸计算容易出现舍入误差",
    "crumbs": [
      "首页",
      "SpaceTransformer",
      "空间变换库对比与动机"
    ]
  },
  {
    "objectID": "3.0_spacetransformer_motivation.html#方法三pytorch-interpolate实现",
    "href": "3.0_spacetransformer_motivation.html#方法三pytorch-interpolate实现",
    "title": "空间变换库对比与动机",
    "section": "方法三：PyTorch interpolate实现",
    "text": "方法三：PyTorch interpolate实现\nPyTorch的functional.interpolate是深度学习中最常用的图像变换工具。\n\nimport torch\nimport torch.nn.functional as F\n\ndef process_with_pytorch(img):\n    \"\"\"使用PyTorch interpolate实现流水线\"\"\"\n    \n    # 转换为PyTorch张量 (需要添加batch和channel维度)\n    tensor_img = torch.from_numpy(img).unsqueeze(0).unsqueeze(0).float()\n    \n    # 步骤1：ROI提取 (使用全局参数)\n    h, w = img.shape\n    roi_tensor = tensor_img[:, :, ROI_START_Y:ROI_END_Y, ROI_START_X:ROI_END_X]\n    \n    # 步骤2：重采样到目标尺寸\n    \n    # PyTorch的align_corners参数经常导致混淆\n    resampled_tensor = F.interpolate(roi_tensor, size=(TARGET_SIZE, TARGET_SIZE), \n                                   mode='bilinear', align_corners=False)\n    \n    resampled_img = resampled_tensor.squeeze().numpy()\n    \n    # 步骤3：分析处理\n    segment_result = get_segmentation(resampled_img)\n    keypoint_result = get_keypoint(resampled_img)\n    \n    # 步骤4：结果回传\n    # PyTorch的坐标变换计算复杂，align_corners设置影响结果\n    scale_factor = ROI_SIZE / TARGET_SIZE\n    \n    keypoint_in_original = keypoint_result * scale_factor + [ROI_START_Y, ROI_START_X]\n    \n    # 分割结果回传\n    segment_tensor = torch.from_numpy(segment_result.astype(np.float32)).unsqueeze(0).unsqueeze(0)\n    segment_roi_tensor = F.interpolate(segment_tensor, size=(ROI_SIZE, ROI_SIZE), \n                                     mode='nearest')\n    \n    segment_roi = segment_roi_tensor.squeeze().numpy().astype(np.uint8)\n    \n    # 放回原始图像\n    segment_original = np.zeros_like(img, dtype=np.uint8)\n    segment_original[ROI_START_Y:ROI_END_Y, ROI_START_X:ROI_END_X] = segment_roi\n    \n    return segment_original, keypoint_in_original\n\nprint(\"=== PyTorch interpolate实现 ===\")\ntorch_segment, torch_keypoint = process_with_pytorch(original_img)\nprint(f\"检测到的关键点坐标: {torch_keypoint}\")\nprint(f\"分割区域像素数: {np.sum(torch_segment)}\")\n\n# 立即显示PyTorch结果\nplot_result(original_img, torch_segment, torch_keypoint, \"PyTorch interpolate\", true_keypoint)\n\n=== PyTorch interpolate实现 ===\n检测到的关键点坐标: [17.265625 17.265625]\n分割区域像素数: 96\n\n\n\n\n\n\n\n\n\nPyTorch interpolate的问题分析：\n\nalign_corners混淆：True和False设置导致不同的坐标映射公式，容易出错\n维度管理冗余：需要手动添加和移除batch、channel维度\nnearest 有偏：可以明显发现预测的mask 和原图是有偏的",
    "crumbs": [
      "首页",
      "SpaceTransformer",
      "空间变换库对比与动机"
    ]
  },
  {
    "objectID": "3.0_spacetransformer_motivation.html#方法四spacetransformer实现",
    "href": "3.0_spacetransformer_motivation.html#方法四spacetransformer实现",
    "title": "空间变换库对比与动机",
    "section": "方法四：SpaceTransformer实现",
    "text": "方法四：SpaceTransformer实现\n\nfrom spacetransformer.core import Space\nfrom spacetransformer.torch import warp_image\nfrom spacetransformer.core import warp_point\nimport torch\n\ndef process_with_spacetransformer(img):\n    \"\"\"使用SpaceTransformer实现流水线\"\"\"\n    \n    # 定义原始图像空间\n    original_space = Space(\n        shape=[1]+list(img.shape),\n        spacing=(1.0, 1.0, 1.0),\n        origin=(0.0, 0.0, 0.0)\n    )\n    \n    # 声明式定义目标空间：ROI提取 + 重采样 (使用全局参数)\n    target_space = (original_space\n        .apply_bbox([(0,1), (ROI_START_Y, ROI_END_Y), (ROI_START_X, ROI_END_X)])  # 偏移ROI\n        .apply_shape((1, TARGET_SIZE, TARGET_SIZE))             # 重采样到目标尺寸\n    )\n    \n    # 执行变换\n    resampled_img = warp_image(img[None], original_space, target_space, \n                                mode='trilinear', pad_value=0, cuda_device='cpu',\n                                numpy=True)[0]\n    \n    # 分析处理\n    segment_result = get_segmentation(resampled_img)\n    keypoint_2d = get_keypoint(resampled_img)\n    \n    # 将2D关键点转换为3D格式 (z=0, y, x) 供SpaceTransformer使用\n    keypoint_3d = np.array([[0, keypoint_2d[0], keypoint_2d[1]]])  # shape: (1, 3)\n    # 结果回传：一行代码完成逆变换\n    segment_original = warp_image(segment_result[None],     target_space, original_space,\n                                       mode='nearest', pad_value=0, cuda_device='cpu',numpy=True)[0]\n    keypoint_3d_original = warp_point(keypoint_3d, target_space, original_space)[0]\n    \n    # 转换回2D格式 (y, x)\n    keypoint_original = keypoint_3d_original[0, 1:3]  \n    \n    return segment_original, keypoint_original\n\nprint(\"=== SpaceTransformer实现 ===\")\nst_segment, st_keypoint = process_with_spacetransformer(original_img)\nprint(f\"检测到的关键点坐标: {st_keypoint}\")\nprint(f\"分割区域像素数: {np.sum(st_segment)}\")\n\n# 立即显示SpaceTransformer结果\nplot_result(original_img, st_segment, st_keypoint, \"SpaceTransformer\", true_keypoint)\n\n=== SpaceTransformer实现 ===\n检测到的关键点坐标: [17. 17.]\n分割区域像素数: 81.0",
    "crumbs": [
      "首页",
      "SpaceTransformer",
      "空间变换库对比与动机"
    ]
  },
  {
    "objectID": "3.0_spacetransformer_motivation.html#实验结果分析与总结",
    "href": "3.0_spacetransformer_motivation.html#实验结果分析与总结",
    "title": "空间变换库对比与动机",
    "section": "实验结果分析与总结",
    "text": "实验结果分析与总结\n通过上述对比实验，我们可以清晰地观察到各个库在空间变换精度和实现复杂度方面的显著差异：\n精度对比：除SpaceTransformer外，其他主流库均存在不同程度的坐标偏移问题。其中，PyTorch的实现甚至出现了明显的分割掩膜偏移，这在医学图像分析中可能导致严重的临床后果。SpaceTransformer通过精确的空间描述，有效避免了这类精度损失。\n开发效率对比：从代码复杂度角度，SpaceTransformer展现出明显优势。传统方法需要手动管理复杂的坐标变换链、参数配置和维度处理，需要维护很多中间变量，对于不同的元素采取不同的变换方法，而SpaceTransformer通过声明式的空间定义和自动化的变换计算，将原本数十行的实现精简为几行核心逻辑，大幅提升了开发效率和代码可维护性。\n架构设计优势：SpaceTransformer采用了计算逻辑与业务逻辑分离的设计理念，把复杂、易错底层计算逻辑进行包装，使得空间变换操作对用户透明，开发者可以专注于算法本身而非底层的坐标计算细节。\n在接下来的章节中，我们将深入分析这些问题的根本原因，并详细阐述SpaceTransformer的设计原理和技术实现，帮助读者全面理解其在医学图像空间变换领域的技术优势。",
    "crumbs": [
      "首页",
      "SpaceTransformer",
      "空间变换库对比与动机"
    ]
  },
  {
    "objectID": "2.1_mask_compression.html",
    "href": "2.1_mask_compression.html",
    "title": "高效压缩算法",
    "section": "",
    "text": "医学图像分割掩膜通常是高度稀疏的，这为专门的压缩算法提供了优化空间。本文旨在对比 MedMask 格式与常用的 NIfTI (.nii.gz) 和 NumPy (.npz) 格式在存储二值（Binary）和多标签（Multi-label）掩膜时的压缩效率、编码及解码速度。最后，我们将深入探究 MedMask 的核心技术——PackBits 预处理结合 Zstandard 压缩——为何能针对稀疏掩膜实现卓越的压缩性能。",
    "crumbs": [
      "首页",
      "MedMask",
      "高效压缩算法"
    ]
  },
  {
    "objectID": "2.1_mask_compression.html#摘要",
    "href": "2.1_mask_compression.html#摘要",
    "title": "高效压缩算法",
    "section": "",
    "text": "医学图像分割掩膜通常是高度稀疏的，这为专门的压缩算法提供了优化空间。本文旨在对比 MedMask 格式与常用的 NIfTI (.nii.gz) 和 NumPy (.npz) 格式在存储二值（Binary）和多标签（Multi-label）掩膜时的压缩效率、编码及解码速度。最后，我们将深入探究 MedMask 的核心技术——PackBits 预处理结合 Zstandard 压缩——为何能针对稀疏掩膜实现卓越的压缩性能。",
    "crumbs": [
      "首页",
      "MedMask",
      "高效压缩算法"
    ]
  },
  {
    "objectID": "2.1_mask_compression.html#统一基准测试框架",
    "href": "2.1_mask_compression.html#统一基准测试框架",
    "title": "高效压缩算法",
    "section": "1. 统一基准测试框架",
    "text": "1. 统一基准测试框架\n为了避免代码重复并确保测试的公平性，我们首先定义一个统一的基准测试框架。该框架可以处理不同的数据格式，并返回标准化的性能指标（文件大小、编码时间、解码时间）。\n\nimport os\nimport time\nimport gzip\nimport tempfile\nimport numpy as np\nimport nibabel as nib\nimport zstandard as zstd\nfrom pathlib import Path\nfrom medmask import SegmentationMask\nfrom spacetransformer import Space\nimport pandas as pd\n\n# --- 统一的基准测试函数 ---\ndef run_benchmark(format_type, data, space=None, label_mapping=None, original_path=None):\n    \"\"\"\n    对指定格式运行压缩和解压基准测试。\n\n    Args:\n        format_type (str): 'nifti', 'npz', 'medmask'\n        data (np.ndarray): 掩膜数据\n        space (Space, optional): MedMask/NIfTI所需的空间信息.\n        label_mapping (dict, optional): MedMask所需的多标签映射.\n        original_path (Path, optional): NIfTI格式的原始路径，用于直接获取文件大小.\n\n    Returns:\n        dict: 包含 size, encode_time, decode_time 的字典.\n    \"\"\"\n    stats = {'size': 0, 'encode_time': 0, 'decode_time': 0}\n    \n    with tempfile.TemporaryDirectory() as tmpdir:\n        tmp_path = Path(tmpdir) / f\"tempfile.{format_type.split('_')[0]}\"\n\n        # --- 编码过程 ---\n        encode_start = time.time()\n        if format_type == 'nifti':\n            if original_path:\n                stats['size'] = original_path.stat().st_size\n            else: # 用于创建新的多标签 NIfTI 文件\n                affine =  np.eye(4)\n                nii_img = nib.Nifti1Image(data.astype(np.uint8), affine)\n                tmp_path_nii = tmp_path.with_suffix('.nii.gz')\n                nib.save(nii_img, tmp_path_nii)\n                stats['size'] = tmp_path_nii.stat().st_size\n            # NIfTI 的编码/解码时间通常包含在加载过程中，这里不单独测量以简化对比\n            pass \n        elif format_type == 'npz':\n            np.savez_compressed(tmp_path, mask=data)\n            stats['size'] = tmp_path.stat().st_size\n        elif format_type == 'medmask':\n            mask_obj = SegmentationMask(data, label_mapping, space=space)\n            mask_obj.save(tmp_path)\n            stats['size'] = tmp_path.stat().st_size\n        stats['encode_time'] = (time.time() - encode_start) * 1000  # ms\n\n        # --- 解码过程 ---\n        if stats['size'] &gt; 0: # 仅在成功编码后解码\n            decode_start = time.time()\n            if format_type == 'nifti':\n                 # 为保持一致性，不单独测量 NIfTI 的解码时间\n                 pass\n            elif format_type == 'npz':\n                _ = np.load(tmp_path)['mask']\n            elif format_type == 'medmask':\n                loaded_mask = SegmentationMask.load(tmp_path)\n                # 模拟实际使用，提取所有标签\n                if label_mapping:\n                    for name in label_mapping.keys():\n                        _ = loaded_mask.get_binary_mask_by_names(name)\n            stats['decode_time'] = (time.time() - decode_start) * 1000 # ms\n            \n    return stats\n\n# --- 数据加载 ---\nmask_dir = Path('dicube-testdata/mask/s0000')\nwith open(mask_dir / 'nonzero_masks.txt', 'r') as f:\n    valid_files = [line.strip() for line in f.readlines()]\nprint(f\"加载了 {len(valid_files)} 个有效的掩膜文件用于测试。\")\n\n加载了 21 个有效的掩膜文件用于测试。",
    "crumbs": [
      "首页",
      "MedMask",
      "高效压缩算法"
    ]
  },
  {
    "objectID": "2.1_mask_compression.html#二值掩膜binary-mask性能对比",
    "href": "2.1_mask_compression.html#二值掩膜binary-mask性能对比",
    "title": "高效压缩算法",
    "section": "2. 二值掩膜（Binary Mask）性能对比",
    "text": "2. 二值掩膜（Binary Mask）性能对比\n在此部分，我们测试单个器官掩膜的压缩性能。这类掩膜只包含一个标签，是典型的二值稀疏数据。\n\n测试配置与执行\n我们选择一系列大小和稀疏度各不相同的掩膜文件进行测试。\n\n# 选择测试文件\nbinary_test_files = [\n    'gluteus_maximus_right.nii.gz', # 大掩膜\n    'urinary_bladder.nii.gz',       # 大掩膜\n    'colon.nii.gz',                 # 中等掩膜\n    'iliopsoas_left.nii.gz',        # 中等掩膜\n    'iliac_artery_left.nii.gz',     # 小掩膜\n    'small_bowel.nii.gz'            # 极小掩膜\n]\n\nbinary_results = []\n\nfor fname in binary_test_files:\n    original_path = mask_dir / fname\n    nii_img = nib.load(original_path)\n    mask_data = nii_img.get_fdata().astype(np.uint8)\n    space = Space.from_nifti(nii_img)\n    organ_name = fname.replace('.nii.gz', '')\n    \n    nifti_stats = run_benchmark('nifti', data=mask_data, original_path=original_path)\n    npz_stats = run_benchmark('npz', data=mask_data)\n    medmask_stats = run_benchmark('medmask', data=mask_data, space=space, label_mapping={organ_name: 1})\n    \n    binary_results.append({\n        '文件名': fname.replace('.nii.gz', ''),\n        '非零像素': np.count_nonzero(mask_data),\n        'NIfTI (KB)': nifti_stats['size'] / 1024,\n        'NPZ (KB)': npz_stats['size'] / 1024,\n        'MedMask (KB)': medmask_stats['size'] / 1024,\n        'NPZ 编码 (ms)': npz_stats['encode_time'],\n        'MedMask 编码 (ms)': medmask_stats['encode_time'],\n        'NPZ 解码 (ms)': npz_stats['decode_time'],\n        'MedMask 解码 (ms)': medmask_stats['decode_time']\n    })\n\ndf_binary = pd.DataFrame(binary_results)\n\n# --- 增加平均值行 ---\nif not df_binary.empty:\n    avg_row = df_binary.select_dtypes(include=np.number).mean()\n    avg_row['文件名'] = 'Average'\n    avg_row = avg_row.reindex(df_binary.columns, fill_value='-')\n    df_binary = pd.concat([df_binary, pd.DataFrame([avg_row])], ignore_index=True)\n\ndf_binary['MedMask压缩比 (vs NIfTI)'] = df_binary['NIfTI (KB)'] / df_binary['MedMask (KB)']\ndf_binary['NPZ压缩比 (vs NIfTI)'] = df_binary['NIfTI (KB)'] / df_binary['NPZ (KB)']\n\nprint(\"--- 二值掩膜压缩性能对比 ---\")\ndisplay(df_binary.style.format({\n    'NIfTI (KB)': '{:.1f}', 'NPZ (KB)': '{:.1f}', 'MedMask (KB)': '{:.1f}',\n    'NPZ 编码 (ms)': '{:.1f}', 'MedMask 编码 (ms)': '{:.1f}',\n    'NPZ 解码 (ms)': '{:.1f}', 'MedMask 解码 (ms)': '{:.1f}',\n    'MedMask压缩比 (vs NIfTI)': '{:.1f}x', 'NPZ压缩比 (vs NIfTI)': '{:.1f}x',\n    '非零像素': '{:,.0f}'\n}).hide(axis=\"index\"))\n\n--- 二值掩膜压缩性能对比 ---\n\n\n\n\n\n\n\n文件名\n非零像素\nNIfTI (KB)\nNPZ (KB)\nMedMask (KB)\nNPZ 编码 (ms)\nMedMask 编码 (ms)\nNPZ 解码 (ms)\nMedMask 解码 (ms)\nMedMask压缩比 (vs NIfTI)\nNPZ压缩比 (vs NIfTI)\n\n\n\n\ngluteus_maximus_right\n150,852\n72.2\n25.5\n15.9\n47.8\n57.5\n23.3\n4.7\n4.5x\n2.8x\n\n\nurinary_bladder\n68,016\n54.8\n15.0\n8.4\n57.9\n65.7\n24.2\n6.8\n6.5x\n3.6x\n\n\ncolon\n59,305\n55.8\n16.4\n10.2\n48.6\n59.7\n24.9\n8.3\n5.4x\n3.4x\n\n\niliopsoas_left\n20,865\n49.5\n13.3\n4.5\n57.6\n65.9\n24.4\n7.1\n10.9x\n3.7x\n\n\niliac_artery_left\n1,155\n44.2\n10.5\n1.5\n44.3\n58.7\n25.0\n8.2\n30.3x\n4.2x\n\n\nsmall_bowel\n244\n43.4\n9.9\n1.1\n56.8\n65.5\n25.0\n6.6\n39.4x\n4.4x\n\n\nAverage\n50,073\n53.3\n15.1\n6.9\n52.2\n62.2\n24.5\n6.9\n7.7x\n3.5x\n\n\n\n\n\n\n\n二值掩膜结论\n从上表可以清晰地看出：\n\n压缩效率: MedMask 的压缩效率显著优于 NPZ 和 NIfTI。如 Average 行所示，MedMask 的平均文件大小远低于其他两者。对于稀疏程度高的小目标（如 iliac_artery_left），MedMask 的压缩比优势尤为突出。数据越稀疏，其优势越明显。\n存储大小: 总体而言，MedMask 能有效降低文件大小，通常能达到数倍乃至数十倍的压缩效果，将文件体积从几十KB量级降低到几KB甚至更低。\n处理速度: MedMask 的编解码速度与 NPZ 相当，有时甚至更快，完全满足高性能应用的需求。",
    "crumbs": [
      "首页",
      "MedMask",
      "高效压缩算法"
    ]
  },
  {
    "objectID": "2.1_mask_compression.html#多标签掩膜multi-label-mask性能对比",
    "href": "2.1_mask_compression.html#多标签掩膜multi-label-mask性能对比",
    "title": "高效压缩算法",
    "section": "3. 多标签掩膜（Multi-label Mask）性能对比",
    "text": "3. 多标签掩膜（Multi-label Mask）性能对比\n在实际应用中，常需要将多个器官掩膜存储在同一个文件中。我们构建一个包含多个标签的数组，然后对比 NIfTI、NPZ 和 MedMask 格式在存储这同一个多标签数组时的性能差异。\n\n测试配置与执行\n我们将相关的器官掩膜组合成逻辑分组，并融合成一个多标签数组进行测试。\n\ntest_groups = [\n    {\n        'name': '臀肌群',\n        'files': ['gluteus_maximus_left.nii.gz', 'gluteus_maximus_right.nii.gz', \n                  'gluteus_medius_left.nii.gz', 'gluteus_medius_right.nii.gz'],\n    },\n    {\n        'name': '股骨与髋骨',\n        'files': ['femur_left.nii.gz', 'femur_right.nii.gz', \n                  'hip_left.nii.gz', 'hip_right.nii.gz'],\n    },\n    {\n        'name': '盆腔器官',\n        'files': ['urinary_bladder.nii.gz', 'colon.nii.gz', 'small_bowel.nii.gz'],\n    }\n]\n\nmultilabel_results = []\n\nfor group in test_groups:\n    # 1. 创建多标签数据\n    first_img = nib.load(mask_dir / group['files'][0])\n    space = Space.from_nifti(first_img)\n    multilabel_array = np.zeros(first_img.shape, dtype=np.uint8)\n    label_mapping = {}\n    \n    for i, fname in enumerate(group['files']):\n        fpath = mask_dir / fname\n        if not fpath.exists(): continue\n        \n        data = nib.load(fpath).get_fdata().astype(np.uint8)\n        \n        # 构建多标签数组\n        label_value = i + 1\n        organ_name = fname.replace('.nii.gz', '')\n        multilabel_array[data &gt; 0] = label_value\n        label_mapping[organ_name] = label_value\n\n    # 2. 对同一个多标签数组，用不同格式进行基准测试\n    nifti_stats = run_benchmark('nifti', data=multilabel_array, space=space)\n    npz_stats = run_benchmark('npz', data=multilabel_array)\n    medmask_stats = run_benchmark('medmask', data=multilabel_array, space=space, label_mapping=label_mapping)\n    \n    multilabel_results.append({\n        '测试组': group['name'],\n        '标签数': len(group['files']),\n        'NIfTI (KB)': nifti_stats['size'] / 1024,\n        'NPZ (KB)': npz_stats['size'] / 1024,\n        'MedMask (KB)': medmask_stats['size'] / 1024,\n        'NPZ 编码 (ms)': npz_stats['encode_time'],\n        'MedMask 编码 (ms)': medmask_stats['encode_time'],\n        'NPZ 解码 (ms)': npz_stats['decode_time'],\n        'MedMask 解码 (ms)': medmask_stats['decode_time']\n    })\n\ndf_multi = pd.DataFrame(multilabel_results)\n\n# --- 增加平均值行 ---\nif not df_multi.empty:\n    avg_row = df_multi.select_dtypes(include=np.number).mean()\n    avg_row['测试组'] = 'Average'\n    avg_row = avg_row.reindex(df_multi.columns, fill_value='-')\n    df_multi = pd.concat([df_multi, pd.DataFrame([avg_row])], ignore_index=True)\n\ndf_multi['MedMask压缩比 (vs NIfTI)'] = df_multi['NIfTI (KB)'] / df_multi['MedMask (KB)']\ndf_multi['NPZ压缩比 (vs NIfTI)'] = df_multi['NIfTI (KB)'] / df_multi['NPZ (KB)']\n\nprint(\"--- 多标签掩膜压缩性能对比 ---\")\ndisplay(df_multi.style.format({\n    '独立NIfTI (KB)': '{:.1f}', '独立NPZ (KB)': '{:.1f}', 'MedMask合并 (KB)': '{:.1f}',\n    'NIfTI (KB)': '{:.1f}', 'NPZ (KB)': '{:.1f}', 'MedMask (KB)': '{:.1f}',\n    'NPZ 编码 (ms)': '{:.1f}', 'MedMask 编码 (ms)': '{:.1f}',\n    'NPZ 解码 (ms)': '{:.1f}', 'MedMask 解码 (ms)': '{:.1f}',\n    'MedMask压缩比 (vs NIfTI)': '{:.1f}x', 'NPZ压缩比 (vs NIfTI)': '{:.1f}x'\n}).hide(axis=\"index\"))\n\n--- 多标签掩膜压缩性能对比 ---\n\n\n\n\n\n\n\n测试组\n标签数\nNIfTI (KB)\nNPZ (KB)\nMedMask (KB)\nNPZ 编码 (ms)\nMedMask 编码 (ms)\nNPZ 解码 (ms)\nMedMask 解码 (ms)\nMedMask压缩比 (vs NIfTI)\nNPZ压缩比 (vs NIfTI)\n\n\n\n\n臀肌群\n4.000000\n108.9\n34.3\n31.6\n51.4\n5.4\n23.4\n12.5\n3.4x\n3.2x\n\n\n股骨与髋骨\n4.000000\n103.0\n36.5\n31.4\n49.8\n5.8\n23.1\n12.3\n3.3x\n2.8x\n\n\n盆腔器官\n3.000000\n66.6\n27.0\n16.7\n42.2\n3.8\n23.3\n12.1\n4.0x\n2.5x\n\n\nAverage\n3.666667\n92.8\n32.6\n26.6\n47.8\n5.0\n23.3\n12.3\n3.5x\n2.8x\n\n\n\n\n\n\n\n多标签掩膜结论\n在处理包含多个标签的单一掩膜文件时，MedMask 同样展现出卓越的压缩性能。从上表可以看出，存储相同的多标签数据，MedMask 格式生成的文件体积显著小于 NIfTI 和 NPZ。\n\n\n4. 核心技术探究：PackBits + Zstandard 的威力\nMedMask 的高压缩率源于其针对不同掩膜类型的双层压缩策略。对于二值掩膜（Binary Mask），它采用 PackBits + Zstandard (Zstd) 的组合；而对于多标签掩膜，则直接使用 Zstd。本节将重点探究为何 PackBits 预处理能为二值掩膜带来显著的性能提升。\n\nPackBits 预处理机制\nMedMask 中使用的 PackBits 是一种针对二值稀疏数据的位打包（Bit Packing）技术，而非传统的游程编码（Run-Length Encoding）。其核心思想是将多个布尔值（在数组中通常以 uint8 的 0 或 1 存储）压缩到单个字节的位（bit）中。由于一个 uint8 字节包含8个位，该算法可以：\n\n将8个连续的 uint8 类型的掩膜像素值（每个占用1字节）打包成一个 uint8（占用1字节）。\n每个原始像素（0 或 1）映射到新字节中的一个位（0 或 1）。\n\n工作示例： 假设有8个连续的像素值 [0, 1, 0, 0, 0, 0, 0, 1]。在内存中，它们占用8个字节。经过 PackBits 处理后，它们会被编码成单个字节。该字节的二进制表示为 10000010（注：位的顺序取决于具体实现），在十进制中为 130。这样，仅此一步就实现了理论上接近8:1的数据压缩。\n这种机制决定了 PackBits 预处理仅适用于二值数据。对于多标签掩膜，像素值可以大于1（例如 2, 3, 4, ...），无法用单个位来表示，因此 MedMask 会跳过此步骤，直接对原始多标签数组应用 Zstd 压缩。这也解释了为何 MedMask 在处理二值掩膜时的压缩比通常优于处理多标签掩膜。\n为了量化 PackBits 预处理的有效性，我们对比纯 Zstd 压缩和 MedMask (PackBits + Zstd) 在处理同一个二值掩膜时的效果。\n\n# 加载中等大小的掩膜数据\nmask_path = mask_dir / 'urinary_bladder.nii.gz'\nimg = nib.load(mask_path)\ndata = img.get_fdata()&gt;0\ndata_bytes = data.tobytes()\ndata_packbit_bytes = np.packbits(data).tobytes()\n\n# 1. 原始大小\nraw_size = len(data_bytes)\npackbit_size = len(data_packbit_bytes)\n\n# 2. 纯 Gzip 压缩 (NIfTI/NPZ 使用)\ngzip_size = len(gzip.compress(data_bytes))\n\n# 3. 纯 Zstandard 压缩\nzstd_size = len(zstd.ZstdCompressor().compress(data_bytes))\n\n# 4. MedMask (PackBits + Zstd) 压缩\npackbit_zstd_size = len(zstd.ZstdCompressor().compress(data_packbit_bytes))\n\n\n# 结果汇总\npackbits_analysis = {\n    \"方法\": [\"原始数据 (Bytes)\",\"Packbits数据 (Bytes)\", \"纯 Gzip\", \"纯 Zstandard\", \"MedMask (PackBits + Zstd)\"],\n    \"大小 (KB)\": [raw_size / 1024, packbit_size/1024, gzip_size / 1024, zstd_size / 1024, packbit_zstd_size / 1024],\n    \"压缩比 (vs 原始)\": [1.0, raw_size/packbit_size, raw_size / gzip_size, raw_size / zstd_size, raw_size / packbit_zstd_size]\n}\ndf_packbits = pd.DataFrame(packbits_analysis)\n\nprint(\"--- 压缩策略对稀疏数据的效果对比 ---\")\nprint(f\"测试对象: {mask_path.name}, 稀疏度: {1 - np.count_nonzero(data) / data.size:.2%}\")\ndisplay(df_packbits.style.format({\n    \"大小 (KB)\": \"{:.2f}\",\n    \"压缩比 (vs 原始)\": \"{:.1f}x\"\n}).hide(axis=\"index\"))\n\n--- 压缩策略对稀疏数据的效果对比 ---\n测试对象: urinary_bladder.nii.gz, 稀疏度: 99.33%\n\n\n\n\n\n\n\n方法\n大小 (KB)\n压缩比 (vs 原始)\n\n\n\n\n原始数据 (Bytes)\n9867.38\n1.0x\n\n\nPackbits数据 (Bytes)\n1233.42\n8.0x\n\n\n纯 Gzip\n14.53\n679.2x\n\n\n纯 Zstandard\n8.01\n1231.3x\n\n\nMedMask (PackBits + Zstd)\n4.39\n2247.4x\n\n\n\n\n\n\n\n\n结论\n综合以上分析，MedMask 之所以能成为一种高效的医学分割掩膜存储格式，其核心在于它根据数据特性采用的自适应双层压缩策略。\n\n对于二值掩膜，MedMask 采用 PackBits 预处理 + Zstandard 压缩 的模式。\n\nPackBits 作为一种位打包预处理，首先消除了用整个字节（uint8）存储单个布尔值所带来的结构性冗余，实现了第一重压缩。\n经过预处理的紧凑数据流，再由高效的 Zstandard 算法进行第二重压缩。这种针对性的组合策略，使其压缩比远超仅依赖 Gzip (DEFLATE) 的 NIfTI 和 NPZ 格式，且性能与数据稀疏度正相关。\n\n对于多标签掩膜，由于无法进行位打包，MedMask 直接应用 Zstandard 进行压缩。虽然缺少了 PackBits 带来的巨额增益，但 Zstandard 本身的性能依然优于传统的 DEFLATE 算法，因此 MedMask 在存储多标签数据时仍比 NIfTI 和 NPZ 更具空间效率。\n\n总而言之，MedMask 的设计精髓在于它并非简单应用通用压缩，而是通过领域特定的预处理（位打包）来最大化后续通用压缩算法（Zstd）的效率。这种设计使其在显著降低存储空间的同时，保持了高性能的读写速度，为医学图像分析工作流提供了切实的优化。",
    "crumbs": [
      "首页",
      "MedMask",
      "高效压缩算法"
    ]
  },
  {
    "objectID": "test.html",
    "href": "test.html",
    "title": "FastDiag Toolkit 文档",
    "section": "",
    "text": "import dicube\nfrom dicube.dicom import DcbStreamingReader\nimport pydicom\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport ipywidgets as widgets\nfrom IPython.display import display, clear_output\nfrom io import BytesIO\n\n# 加载并保存dcbs文件\ndcb_img = dicube.load_from_dicom_folder('sample_data/sample_200_0')\ndcb_file = 'sample_data/sample_200.dcbs'\ndicube.save(dcb_img, dcb_file)\n\n# 创建流式读取器\ndcb_stream = DcbStreamingReader(dcb_file)\n\n# 获取总帧数\ntotal_frames = dcb_img.shape[0] \nprint(f\"总共有 {total_frames} 层图像\")\nplt.figure(figsize=(5, 4))\nax = plt.imshow(np.zeros(512,512), cmap='gray',vmin=-800,vmax=300)\nplt.title(f'{frame_index + 1}  /  {total_frames} ')\nplt.axis('off')\nplt.tight_layout()\nplt.show()\n\n# 创建交互式滑动控件\ndef show_slice(frame_index):\n    \"\"\"显示指定帧的图像\"\"\"\n    try:\n        # 使用流式读取器获取DICOM数据\n        dicom_data = dcb_stream.get_dicom_for_frame(frame_index)\n        \n        # 解析DICOM数据\n        dicom_buffer = BytesIO(dicom_data)\n        dataset = pydicom.dcmread(dicom_buffer, force=True)\n        \n        # 获取像素数据并解压\n        pixel_array = (dataset.pixel_array).astype('float32')+float(dataset.RescaleIntercept)\n        \n        # 清除之前的输出\n        clear_output(wait=True)\n        \n        # 创建matplotlib图形\n        \n    except Exception as e:\n        print(f\"读取第 {frame_index} 帧时出错: {str(e)}\")\n\n# 创建滑动控件\nslice_slider = widgets.IntSlider(\n    value=0,\n    min=0,\n    max=total_frames - 1,\n    step=1,\n    description='切片:',\n    style={'description_width': '60px'},\n    layout=widgets.Layout(width='400px')\n)\n\n# 创建交互式控件\ninteractive_plot = widgets.interactive(show_slice, frame_index=slice_slider)\n\n# 显示控件\n\n总共有 200 层图像"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "FastDiag Toolkit",
    "section": "",
    "text": "在笔者投身医学图像AI领域的这些年里，深刻体会到这个学科的独特魅力与挑战。Python与PyTorch无疑已成为我们探索未知、构建模型的通用语言，推动着整个领域的飞速发展。我们站在巨人的肩膀上，python 生态中的 pydicom、SimpleITK、nibabel 等经典工具链为我们处理复杂的医学影像数据提供了可能，前人的卓越贡献值得我们每一个人致敬。\n然而，我们也不得不承认，这些传统的轮子在面对今天的深度学习工作流时，显得有些“水土不服”。笔者和身边的许多同行，都曾或多或少地在一些基础问题上反复挣扎：老旧的数据格式与现代AI框架的接口难以严丝合缝地对接；新人需要耗费大量时间，在无数次踩坑和试错后，才能建立起对医学影像坐标系、数据加载等问题的基本认知。\n更让人难受的是，这个领域的“说明书”实在太少了。除了3D Slicer等少数项目提供了相对完善的文档外，大量的关键内容都深埋在ITK和VTK庞杂的代码库深处。很多时候，我们为了定位一个看似简单的bug，不得不翻遍GitHub issue、stackoverflow、各路神仙的博客，从零散的讨论中拼凑出问题的成因。这种探索过程虽然不乏“解谜”的乐趣，但对于追求高效研发的我们而言，无疑是一种巨大的时间成本。\n正是这些日常工作中的痛点，促使笔者开始思考：我们是否能有一套更现代、更高效、更符合AI时代开发习惯的基础工具，来将我们从这些重复性的泥潭中解放出来，从而能更专注于算法和模型本身的创新？这便是我们开发FastDiag Toolkit的初衷。"
  },
  {
    "objectID": "index.html#问题背景",
    "href": "index.html#问题背景",
    "title": "FastDiag Toolkit",
    "section": "",
    "text": "在笔者投身医学图像AI领域的这些年里，深刻体会到这个学科的独特魅力与挑战。Python与PyTorch无疑已成为我们探索未知、构建模型的通用语言，推动着整个领域的飞速发展。我们站在巨人的肩膀上，python 生态中的 pydicom、SimpleITK、nibabel 等经典工具链为我们处理复杂的医学影像数据提供了可能，前人的卓越贡献值得我们每一个人致敬。\n然而，我们也不得不承认，这些传统的轮子在面对今天的深度学习工作流时，显得有些“水土不服”。笔者和身边的许多同行，都曾或多或少地在一些基础问题上反复挣扎：老旧的数据格式与现代AI框架的接口难以严丝合缝地对接；新人需要耗费大量时间，在无数次踩坑和试错后，才能建立起对医学影像坐标系、数据加载等问题的基本认知。\n更让人难受的是，这个领域的“说明书”实在太少了。除了3D Slicer等少数项目提供了相对完善的文档外，大量的关键内容都深埋在ITK和VTK庞杂的代码库深处。很多时候，我们为了定位一个看似简单的bug，不得不翻遍GitHub issue、stackoverflow、各路神仙的博客，从零散的讨论中拼凑出问题的成因。这种探索过程虽然不乏“解谜”的乐趣，但对于追求高效研发的我们而言，无疑是一种巨大的时间成本。\n正是这些日常工作中的痛点，促使笔者开始思考：我们是否能有一套更现代、更高效、更符合AI时代开发习惯的基础工具，来将我们从这些重复性的泥潭中解放出来，从而能更专注于算法和模型本身的创新？这便是我们开发FastDiag Toolkit的初衷。"
  },
  {
    "objectID": "index.html#解决方案",
    "href": "index.html#解决方案",
    "title": "FastDiag Toolkit",
    "section": "解决方案",
    "text": "解决方案\nFastDiag Toolkit 提供了三个核心库：\n\n📦 DiCube - 医学影像存储库\n高效的 3D 医学影像存储格式，dicom 的上位替代。\n核心特性：\n\n单文件存储（.dcbs），消除 dicom 零散化给文件系统的负担\nHTJ2K 无损压缩，3倍存储压缩，5倍速度提升\n元数据去重，减少冗余信息\n完整 DICOM 往返转换支持\n\nGitHub： https://github.com/fastdiag-toolbox/dicube\n\n\n🎭 MedMask - 医学掩膜处理库\n专业的医学影像分割掩膜压缩和处理解决方案，nii.gz 的上位替代。\n核心特性：\n\n50+ 倍压缩比（Zstandard 算法）\n16 倍读取速度提升\n内嵌语义映射\n支持多粒度器官组合和重叠掩膜\n\nGitHub： https://github.com/fastdiag-toolbox/medmask\n\n\n🌐 SpaceTransformer - 3D 空间变换库\n优雅的 3D 医学影像几何变换处理方案，simpleitk 的上位替代。\n核心特性：\n\nSpace 优先几何抽象：通过形状/间距/原点/方向，自动推导精确坐标映射\n规划与执行分离：在抽象的 space 上链式描述各种空间变换，实际变换只要单次采样\n精准对齐零偏差：图像/掩膜/关键点严格一致，规避 align_corners 与轴序陷阱\nGPU 加速与生态互通：PyTorch 后端重采样\n\nGitHub：\n\nhttps://github.com/fastdiag-toolbox/spacetransformer-core\nhttps://github.com/fastdiag-toolbox/spacetransformer-torch"
  },
  {
    "objectID": "index.html#安装方法",
    "href": "index.html#安装方法",
    "title": "FastDiag Toolkit",
    "section": "安装方法",
    "text": "安装方法\n# 分别安装各个库\npip install dicube\npip install medmask\npip install spacetransformer-core\npip install spacetransformer-torch  # GPU 加速版本"
  },
  {
    "objectID": "index.html#详细文档",
    "href": "index.html#详细文档",
    "title": "FastDiag Toolkit",
    "section": "详细文档",
    "text": "详细文档\n欢迎查看左侧导航栏中的相关技术文档，深入了解各个库的实现细节和使用方法。\n\n如需技术支持或贡献代码，请访问相应的 GitHub 仓库"
  },
  {
    "objectID": "3.1_space_concept_fundamentals.html",
    "href": "3.1_space_concept_fundamentals.html",
    "title": "Space概念详解",
    "section": "",
    "text": "每一幅医学图像都对应着物理世界中的一个规范采样网格。SpaceTransformer通过Space对象的六个要素来完整描述这个网格：形状、原点、间距和三个方向向量。\n\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom spacetransformer.core import Space\n\n# 创建一个标准的规范采样网格\nstandard_space = Space(\n    shape=(1, 10, 10),               # 三维网格，第一维度为1用于2D可视化\n    origin=(0.0, 0.0, 0.0),          # 物理原点\n    spacing=(1.0, 1.0, 1.0),         # 各向同性1mm采样\n    x_orientation=(1.0, 0.0, 0.0),   # X轴方向\n    y_orientation=(0.0, 1.0, 0.0),   # Y轴方向  \n    z_orientation=(0.0, 0.0, 1.0)    # Z轴方向\n)\n\n# 展示标准规范采样网格\n\n为了直观展示Space变换效果，我们实现2D网格可视化：\n\ndef visualize_sampling_grid(space, color='blue', show_axes=True, label_suffix=''):\n    \"\"\"\n    可视化采样网格的2D投影（绘制所有采样点）\n    \n    Args:\n        space: Space对象\n        color: 绘制颜色\n        show_axes: 是否显示坐标轴\n        label_suffix: 标签后缀，用于区分不同的网格\n    \"\"\"\n    # 提取Y-Z平面的信息（忽略X维度）\n    shape_yz = space.shape[1:3]  # (height, width)\n    \n    # 创建所有索引点的网格\n    y_indices, z_indices = np.meshgrid(\n        np.arange(shape_yz[0]),\n        np.arange(shape_yz[1]),\n        indexing='ij'\n    )\n    \n    # 构建3D索引点（X维度设为0）\n    index_points = np.stack([\n        np.zeros_like(y_indices.flatten()),  # X=0\n        y_indices.flatten(),                 # Y索引\n        z_indices.flatten()                  # Z索引\n    ], axis=1)\n    \n    # 转换为世界坐标\n    world_points = space.to_world_transform.apply_point(index_points)\n    \n    # 绘制采样点\n    plt.scatter(world_points[:, 2], world_points[:, 1], \n               c=color, alpha=0.4, s=20, label=f'Sampling Grid{label_suffix}')\n    \n    if show_axes:\n        # 显示原点和坐标轴方向\n        origin_world = space.to_world_transform.apply_point([[0, 0, 0]])[0]\n        plt.plot(origin_world[2], origin_world[1], 'o', \n                color=color, markersize=8, alpha=0.8)\n        \n        # 计算坐标轴长度（增加长度使其更明显）\n        axis_length = 1\n        \n        # Y轴方向（在图中是垂直方向）\n        y_axis_end = origin_world[1:3] + np.array(space.y_orientation[1:3]) * axis_length\n        plt.arrow(origin_world[2], origin_world[1], \n                 y_axis_end[1] - origin_world[2], y_axis_end[0] - origin_world[1],\n                 head_width=axis_length*0.1, head_length=axis_length*0.1, \n                 fc=color, ec=color, alpha=0.7)\n        \n        # Y轴文字标注（偏移避免被箭头遮挡）\n        y_text_offset = np.array(space.y_orientation[1:3]) * axis_length * 0.3\n        plt.text(y_axis_end[1] + y_text_offset[1], y_axis_end[0] + y_text_offset[0], 'Y', \n                fontsize=12, color=color, ha='center', va='center', weight='bold')\n        \n        # Z轴方向（在图中是水平方向）\n        z_axis_end = origin_world[1:3] + np.array(space.z_orientation[1:3]) * axis_length\n        plt.arrow(origin_world[2], origin_world[1],\n                 z_axis_end[1] - origin_world[2], z_axis_end[0] - origin_world[1],\n                 head_width=axis_length*0.1, head_length=axis_length*0.1,\n                 fc=color, ec=color, alpha=0.7)\n        \n        # Z轴文字标注（偏移避免被箭头遮挡）\n        z_text_offset = np.array(space.z_orientation[1:3]) * axis_length * 0.3\n        plt.text(z_axis_end[1] + z_text_offset[1], z_axis_end[0] + z_text_offset[0], 'Z', \n                fontsize=12, color=color, ha='center', va='center', weight='bold')\n\ndef setup_plot(figsize=(10, 8)):\n    \"\"\"设置绘图的通用参数\"\"\"\n    plt.figure(figsize=figsize)\n\ndef finalize_plot(title):\n    \"\"\"完成绘图的通用设置\"\"\"\n    plt.xlabel('Z (mm)')\n    plt.ylabel('Y (mm)')\n    plt.title(title)\n    plt.grid(True, alpha=0.3)\n    plt.axis('equal')\n    plt.legend()\n    plt.tight_layout()\n    plt.show()\n\n# 可视化标准网格\nsetup_plot()\nvisualize_sampling_grid(standard_space, color='blue')\nfinalize_plot('Standard Sampling Grid (10x10, 1mm resolution)')",
    "crumbs": [
      "首页",
      "SpaceTransformer",
      "Space概念详解"
    ]
  },
  {
    "objectID": "3.1_space_concept_fundamentals.html#space概念完整的3d图像几何描述",
    "href": "3.1_space_concept_fundamentals.html#space概念完整的3d图像几何描述",
    "title": "Space概念详解",
    "section": "",
    "text": "每一幅医学图像都对应着物理世界中的一个规范采样网格。SpaceTransformer通过Space对象的六个要素来完整描述这个网格：形状、原点、间距和三个方向向量。\n\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom spacetransformer.core import Space\n\n# 创建一个标准的规范采样网格\nstandard_space = Space(\n    shape=(1, 10, 10),               # 三维网格，第一维度为1用于2D可视化\n    origin=(0.0, 0.0, 0.0),          # 物理原点\n    spacing=(1.0, 1.0, 1.0),         # 各向同性1mm采样\n    x_orientation=(1.0, 0.0, 0.0),   # X轴方向\n    y_orientation=(0.0, 1.0, 0.0),   # Y轴方向  \n    z_orientation=(0.0, 0.0, 1.0)    # Z轴方向\n)\n\n# 展示标准规范采样网格\n\n为了直观展示Space变换效果，我们实现2D网格可视化：\n\ndef visualize_sampling_grid(space, color='blue', show_axes=True, label_suffix=''):\n    \"\"\"\n    可视化采样网格的2D投影（绘制所有采样点）\n    \n    Args:\n        space: Space对象\n        color: 绘制颜色\n        show_axes: 是否显示坐标轴\n        label_suffix: 标签后缀，用于区分不同的网格\n    \"\"\"\n    # 提取Y-Z平面的信息（忽略X维度）\n    shape_yz = space.shape[1:3]  # (height, width)\n    \n    # 创建所有索引点的网格\n    y_indices, z_indices = np.meshgrid(\n        np.arange(shape_yz[0]),\n        np.arange(shape_yz[1]),\n        indexing='ij'\n    )\n    \n    # 构建3D索引点（X维度设为0）\n    index_points = np.stack([\n        np.zeros_like(y_indices.flatten()),  # X=0\n        y_indices.flatten(),                 # Y索引\n        z_indices.flatten()                  # Z索引\n    ], axis=1)\n    \n    # 转换为世界坐标\n    world_points = space.to_world_transform.apply_point(index_points)\n    \n    # 绘制采样点\n    plt.scatter(world_points[:, 2], world_points[:, 1], \n               c=color, alpha=0.4, s=20, label=f'Sampling Grid{label_suffix}')\n    \n    if show_axes:\n        # 显示原点和坐标轴方向\n        origin_world = space.to_world_transform.apply_point([[0, 0, 0]])[0]\n        plt.plot(origin_world[2], origin_world[1], 'o', \n                color=color, markersize=8, alpha=0.8)\n        \n        # 计算坐标轴长度（增加长度使其更明显）\n        axis_length = 1\n        \n        # Y轴方向（在图中是垂直方向）\n        y_axis_end = origin_world[1:3] + np.array(space.y_orientation[1:3]) * axis_length\n        plt.arrow(origin_world[2], origin_world[1], \n                 y_axis_end[1] - origin_world[2], y_axis_end[0] - origin_world[1],\n                 head_width=axis_length*0.1, head_length=axis_length*0.1, \n                 fc=color, ec=color, alpha=0.7)\n        \n        # Y轴文字标注（偏移避免被箭头遮挡）\n        y_text_offset = np.array(space.y_orientation[1:3]) * axis_length * 0.3\n        plt.text(y_axis_end[1] + y_text_offset[1], y_axis_end[0] + y_text_offset[0], 'Y', \n                fontsize=12, color=color, ha='center', va='center', weight='bold')\n        \n        # Z轴方向（在图中是水平方向）\n        z_axis_end = origin_world[1:3] + np.array(space.z_orientation[1:3]) * axis_length\n        plt.arrow(origin_world[2], origin_world[1],\n                 z_axis_end[1] - origin_world[2], z_axis_end[0] - origin_world[1],\n                 head_width=axis_length*0.1, head_length=axis_length*0.1,\n                 fc=color, ec=color, alpha=0.7)\n        \n        # Z轴文字标注（偏移避免被箭头遮挡）\n        z_text_offset = np.array(space.z_orientation[1:3]) * axis_length * 0.3\n        plt.text(z_axis_end[1] + z_text_offset[1], z_axis_end[0] + z_text_offset[0], 'Z', \n                fontsize=12, color=color, ha='center', va='center', weight='bold')\n\ndef setup_plot(figsize=(10, 8)):\n    \"\"\"设置绘图的通用参数\"\"\"\n    plt.figure(figsize=figsize)\n\ndef finalize_plot(title):\n    \"\"\"完成绘图的通用设置\"\"\"\n    plt.xlabel('Z (mm)')\n    plt.ylabel('Y (mm)')\n    plt.title(title)\n    plt.grid(True, alpha=0.3)\n    plt.axis('equal')\n    plt.legend()\n    plt.tight_layout()\n    plt.show()\n\n# 可视化标准网格\nsetup_plot()\nvisualize_sampling_grid(standard_space, color='blue')\nfinalize_plot('Standard Sampling Grid (10x10, 1mm resolution)')",
    "crumbs": [
      "首页",
      "SpaceTransformer",
      "Space概念详解"
    ]
  },
  {
    "objectID": "3.1_space_concept_fundamentals.html#空间变换操作演示",
    "href": "3.1_space_concept_fundamentals.html#空间变换操作演示",
    "title": "Space概念详解",
    "section": "空间变换操作演示",
    "text": "空间变换操作演示\n\n形状变换（Resize）\n\n# 创建不同分辨率的采样网格\nhigh_res_space = standard_space.apply_shape((1, 20, 20))\nlow_res_space = standard_space.apply_shape((1, 5, 5))\n\nsetup_plot()\n# 低分辨率对比\nvisualize_sampling_grid(standard_space, color='blue', label_suffix=' (Original)')\nvisualize_sampling_grid(low_res_space, color='red', label_suffix=' (5x5)')\nfinalize_plot('Low Resolution Transform (10x10 → 5x5)')\n\n\n\n\n\n\n\n\n\n\n翻转变换\n\n# 创建翻转的采样网格\nflipped_space = standard_space.apply_flip(axis=1)  # 沿Y轴翻转\n\n# 可视化翻转变换的overlay效果\nsetup_plot()\nvisualize_sampling_grid(standard_space, color='blue', label_suffix=' (Original)')\nvisualize_sampling_grid(flipped_space, color='red', label_suffix=' (Flipped Y-axis)')\nfinalize_plot('Flip Transform (Y-axis)')\n\n\n\n\n\n\n\n\n\n\n轴交换变换\n\n# 创建轴交换的采样网格（创建非正方形网格以显示效果）\nrect_space = Space(\n    shape=(1, 6, 12),  # 矩形网格\n    origin=(0.0, 0.0, 0.0),\n    spacing=(1.0, 1.0, 1.0),\n    x_orientation=(1.0, 0.0, 0.0),\n    y_orientation=(0.0, 1.0, 0.0),\n    z_orientation=(0.0, 0.0, 1.0)\n)\n\nswapped_space = rect_space.apply_swap(1, 2)  # 交换Y轴和Z轴\n\n# 可视化轴交换变换的overlay效果\nsetup_plot()\nvisualize_sampling_grid(rect_space, color='blue', label_suffix=' (Original 6x12)')\nvisualize_sampling_grid(swapped_space, color='red', label_suffix=' (Swapped Y↔Z 12x6)')\nfinalize_plot('Axis Swap Transform (Y ↔ Z)')\n\n\n\n\n\n\n\n\n\n\n旋转变换\n\n# 创建旋转的采样网格\nrotated_space = standard_space.apply_rotate(axis=0, angle=30, unit='degree', center='center')\n\n# 可视化旋转变换的overlay效果\nsetup_plot()\nvisualize_sampling_grid(standard_space, color='blue', label_suffix=' (Original)')\nvisualize_sampling_grid(rotated_space, color='red', label_suffix=' (Rotated 30°)')\nfinalize_plot('Rotation Transform (around X-axis 30°)')\n\n\n\n\n\n\n\n\n\n\n边界框裁剪\n\n# 定义裁剪区域并应用变换\ncrop_bbox = np.array([[0, 1], [2, 8], [2, 8]])  # X, Y, Z范围\ncropped_space = standard_space.apply_bbox(crop_bbox)\n\n# 可视化裁剪变换的overlay效果\nsetup_plot()\nvisualize_sampling_grid(standard_space, color='blue', label_suffix=' (Original)')\nvisualize_sampling_grid(cropped_space, color='red', label_suffix=' (Cropped ROI)')\nfinalize_plot('Bounding Box Crop (6x6 ROI)')\n\n\n\n\n\n\n\n\n\n\n复杂变换链\n\n# 演示复杂变换链的抽象规划\ncomplex_target_space = (standard_space\n    .apply_bbox(np.array([[0, 1], [2, 8], [2, 8]]))  # 裁剪到中心区域\n    .apply_shape((1, 12, 12))                         # 重采样到12×12\n    .apply_rotate(axis=0, angle=45, unit='degree')    # 旋转45度\n)\n\n# 可视化复杂变换链的overlay效果\nsetup_plot()\nvisualize_sampling_grid(standard_space, color='blue', label_suffix=' (Original)')\nvisualize_sampling_grid(complex_target_space, color='red', label_suffix=' (Crop→Resample→Rotate)')\nfinalize_plot('Complex Transform Chain (Crop → Resample → Rotate)')",
    "crumbs": [
      "首页",
      "SpaceTransformer",
      "Space概念详解"
    ]
  },
  {
    "objectID": "3.1_space_concept_fundamentals.html#space抽象框架的核心优势",
    "href": "3.1_space_concept_fundamentals.html#space抽象框架的核心优势",
    "title": "Space概念详解",
    "section": "Space抽象框架的核心优势",
    "text": "Space抽象框架的核心优势\n\n设计理念：Space中心 vs Transform中心\nSpaceTransformer采用”Space中心”的设计理念，区别于torchvision等库的”Transform中心”模式。这一设计选择基于医学图像处理的本质特征：所有的对象的坐标都被世界坐标系定义。\nSpace中心设计：每个数据对象（图像、点集、掩膜）都绑定唯一的空间描述符。当两个对象需要进行空间对齐时，通过比较它们的Space属性即可自动生成精确的变换关系。\nTransform中心的局限性：变换操作本质上是相对的，缺乏绝对的空间基准。这导致多对象间的空间关系难以维护，容易产生累积误差。\n\n\n技术实现：规划与执行分离\nSpace类实现了空间变换的规划阶段与执行阶段的完全解耦：\n规划阶段：通过链式调用构建复杂的变换序列，所有操作都在抽象的几何空间进行，无需涉及实际像素数据。\n执行阶段：warp_image函数分析完整的变换链，自动选择最优的插值路径，通过单次采样完成所有变换。\n\n\n实际收益\n几何精度保障：变换顺序不再影响最终结果。例如”旋转→缩放”与”缩放→旋转”在Space层面完全等价，避免了传统方法中由于采样边界限制导致的信息丢失。\n内存效率优化：消除了传统多步骤变换中的中间缓存需求。每个中间步骤都需要完整的图像内存拷贝，而Space方法仅在最终执行时分配一次目标内存。\n架构简洁性：库中的warp_xxx接口处理所有类型的空间变换，无需针对不同数据类型（图像、点集、掩膜）维护独立的、复杂的变换逻辑。\n接口易用性：相比SimpleITK需要手动配置采样参数的复杂流程，SpaceTransformer提供了语义化的变换接口，同时保留了高级用户的底层控制能力。",
    "crumbs": [
      "首页",
      "SpaceTransformer",
      "Space概念详解"
    ]
  },
  {
    "objectID": "1.5_axis_order.html",
    "href": "1.5_axis_order.html",
    "title": "三维轴序约定",
    "section": "",
    "text": "在使用SimpleITK处理医学影像时，一个常见的问题是SimpleITK.Image对象和它转换成的NumPy数组在轴的顺序上不一致。具体来说，image.GetSize()返回的维度顺序是 (X, Y, Z)，而sitk.GetArrayFromImage(image)返回的NumPy数组的 shape 属性却是 (Z, Y, X)。\n下面的代码演示了这个问题：\n\nimport SimpleITK as sitk\ndirname = \"dicube-testdata/dicom/sample_200\"\n\nreader = sitk.ImageSeriesReader()\ndicom_names = reader.GetGDCMSeriesFileNames(dirname)\nreader.SetFileNames(dicom_names)\nsitk_image = reader.Execute()\n\n# SimpleITK Image对象的尺寸，顺序为 (X, Y, Z)\nprint(\"image.GetSize() -&gt;\", sitk_image.GetSize(), \"(X, Y, Z)\")\n\n# 转换成NumPy数组后，shape的顺序为 (Z, Y, X)\narray = sitk.GetArrayFromImage(sitk_image)\nprint(\"array.shape -&gt;\", array.shape, \"(Z, Y, X)\")\n\nimage.GetSize() -&gt; (512, 512, 200) (X, Y, Z)\narray.shape -&gt; (200, 512, 512) (Z, Y, X)\n\n\n这种不一致并非程序错误，而是一个为了性能而做的设计选择。它源于不同编程生态系统对多维数组存储方式的历史差异。",
    "crumbs": [
      "首页",
      "DiCube",
      "三维轴序约定"
    ]
  },
  {
    "objectID": "1.5_axis_order.html#问题描述simpleitk的轴序不一致",
    "href": "1.5_axis_order.html#问题描述simpleitk的轴序不一致",
    "title": "三维轴序约定",
    "section": "",
    "text": "在使用SimpleITK处理医学影像时，一个常见的问题是SimpleITK.Image对象和它转换成的NumPy数组在轴的顺序上不一致。具体来说，image.GetSize()返回的维度顺序是 (X, Y, Z)，而sitk.GetArrayFromImage(image)返回的NumPy数组的 shape 属性却是 (Z, Y, X)。\n下面的代码演示了这个问题：\n\nimport SimpleITK as sitk\ndirname = \"dicube-testdata/dicom/sample_200\"\n\nreader = sitk.ImageSeriesReader()\ndicom_names = reader.GetGDCMSeriesFileNames(dirname)\nreader.SetFileNames(dicom_names)\nsitk_image = reader.Execute()\n\n# SimpleITK Image对象的尺寸，顺序为 (X, Y, Z)\nprint(\"image.GetSize() -&gt;\", sitk_image.GetSize(), \"(X, Y, Z)\")\n\n# 转换成NumPy数组后，shape的顺序为 (Z, Y, X)\narray = sitk.GetArrayFromImage(sitk_image)\nprint(\"array.shape -&gt;\", array.shape, \"(Z, Y, X)\")\n\nimage.GetSize() -&gt; (512, 512, 200) (X, Y, Z)\narray.shape -&gt; (200, 512, 512) (Z, Y, X)\n\n\n这种不一致并非程序错误，而是一个为了性能而做的设计选择。它源于不同编程生态系统对多维数组存储方式的历史差异。",
    "crumbs": [
      "首页",
      "DiCube",
      "三维轴序约定"
    ]
  },
  {
    "objectID": "1.5_axis_order.html#历史背景行优先-c-order-与列优先-f-order",
    "href": "1.5_axis_order.html#历史背景行优先-c-order-与列优先-f-order",
    "title": "三维轴序约定",
    "section": "2. 历史背景：行优先 (C-Order) 与列优先 (F-Order)",
    "text": "2. 历史背景：行优先 (C-Order) 与列优先 (F-Order)\n计算机内存本质上是一维线性的。多维数组在内存中的存储方式主要有两种标准：\n\n行优先 (Row-Major Order / C-Order)：这是C/C++、Python (NumPy) 等语言的默认方式。数据按行连续存储。对于一个三维图像，其访问顺序通常被理解为 (深度, 高度, 宽度)，即 (Z, Y, X)。\n列优先 (Column-Major Order / F-Order)：这是Fortran、MATLAB、R等语言的默认方式。数据按列连续存储。这种方式更贴近传统的笛卡尔坐标系，访问顺序通常被理解为 (X, Y, Z)。\n\n医学影像领域的许多基础库，如ITK、VTK，以及DICOM标准的设计，都深受Fortran科学计算传统的影响，因此其内部数据表示和元数据都遵循 (X, Y, Z) 的列优先约定。SimpleITK作为ITK的接口，自然也继承了这一约定。",
    "crumbs": [
      "首页",
      "DiCube",
      "三维轴序约定"
    ]
  },
  {
    "objectID": "1.5_axis_order.html#技术原理零拷贝转换及其后果",
    "href": "1.5_axis_order.html#技术原理零拷贝转换及其后果",
    "title": "三维轴序约定",
    "section": "3. 技术原理：零拷贝转换及其后果",
    "text": "3. 技术原理：零拷贝转换及其后果\n当调用sitk.GetArrayFromImage()时，SimpleITK为了最大化效率，采用了**零拷贝（Zero-Copy）**机制。它不会在内存中重新排列数据来适应NumPy的行优先标准，而是直接将ITK管理的内存块暴露给NumPy，同时提供一套新的“解读规则”（即shape和strides元数据），让NumPy能以行优先的方式去理解这段原本按列优先存储的数据。\n我们可以用NumPy模拟这个过程。对于同一段线性数据，可以通过不同的strides（步长）信息，将其解释为不同的多维结构。\n\nimport numpy as np\nimport time\n\n# 假设一段线性内存数据\noriginal_data = np.arange(10)\nprint(f\"原始线性数据: {original_data}\")\n\n# 按C-order (行优先) 解释\nc_order_array = np.reshape(original_data, (2, 5), order='C')\nprint(f\"\\nC-order 数组:\\n{c_order_array}\")\n# 要移动到下一行(从0到5)，内存指针需要跳过5个元素\nprint(f\"C-order Strides: {c_order_array.strides}\") \n\n# 按F-order (列优先) 解释\nf_order_array = np.reshape(original_data, (5, 2), order='F')\nprint(f\"\\nF-order 数组:\\n{f_order_array}\")\n# 要移动到下一行(从0到1)，内存指针只需要跳过1个元素\nprint(f\"F-order Strides: {f_order_array.strides}\")\n\n原始线性数据: [0 1 2 3 4 5 6 7 8 9]\n\nC-order 数组:\n[[0 1 2 3 4]\n [5 6 7 8 9]]\nC-order Strides: (40, 8)\n\nF-order 数组:\n[[0 5]\n [1 6]\n [2 7]\n [3 8]\n [4 9]]\nF-order Strides: (8, 40)\n\n\nSimpleITK的零拷贝操作虽然速度极快，但其直接后果就是轴序的翻转 (X, Y, Z) -&gt; (Z, Y, X)。这个结果给开发者带来了实际的编程负担和潜在风险。",
    "crumbs": [
      "首页",
      "DiCube",
      "三维轴序约定"
    ]
  },
  {
    "objectID": "1.5_axis_order.html#给开发者带来的实际问题",
    "href": "1.5_axis_order.html#给开发者带来的实际问题",
    "title": "三维轴序约定",
    "section": "4. 给开发者带来的实际问题",
    "text": "4. 给开发者带来的实际问题\n轴序不一致会引发两类主要问题：认知负担和性能开销。\n\n4.1. 认知负担与常见错误\n开发者必须在编码时持续关注轴序的转换，这很容易导致错误：\n\n元数据不匹配：image.GetSpacing()返回的体素间距是 (X, Y, Z) 顺序，必须手动将其与 (Z, Y, X) 顺序的数组对应起来，例如 spacing_z = spacing_xyz[2]。\n索引错误：对数组进行切片或索引时，很容易下意识地使用 (x, y, z) 顺序，而正确的应该是 array[z, y, x]。\n函数参数错误：在使用如scipy.ndimage.zoom等需要数组和参数轴序对应的函数时，极易传错参数顺序，导致非预期的空间变换结果。\n\n\n\n4.2. 手动修正的性能代价\n一个直接的想法是获取数组后立即使用 .transpose(2, 1, 0) 将其手动转换为 (X, Y, Z) 顺序，然后所有的 python 代码也在 (X, Y, Z) 上进行，这样全部与simpleitk 的生态保持一致。然而，这个操作并非没有代价。\n1. 创建非连续数组 首先，我们创建一个模拟真实图像的连续数组。\n\n# 创建一个200x300x400的连续数组 (ZYX)\nlarge_array_zyx = np.random.rand(399, 400, 401).astype(np.float32)\nprint(f\"原始数组 C-contiguous: {large_array_zyx.flags['C_CONTIGUOUS']}\")\n\n原始数组 C-contiguous: True\n\n\n.transpose() 操作本身很快，因为它不移动数据，只改变strides信息。但它会产生一个**非连续（Non-Contiguous）**的数组视图。\n\n# 转置操作 (ZYX -&gt; XYZ)\ntransposed_view_xyz = large_array_zyx.transpose(2, 1, 0)\nprint(f\"转置后视图 C-contiguous: {transposed_view_xyz.flags['C_CONTIGUOUS']}\")\n\n转置后视图 C-contiguous: False\n\n\n2. 非连续数组的计算性能 在非连续数组上进行运算时，由于数据在内存中是跳跃访问的，会降低CPU缓存命中率，导致计算性能下降。\n\ndef benchmark_operation(arr, name):\n    start = time.time()\n    _ = np.sum(arr[60:100] * 2.0 + 1.0)\n    end = time.time()\n    exec_time = (end - start) * 1000\n    print(f\"  {name}: {exec_time:.2f} ms\")\n    return exec_time\n\noriginal_time = benchmark_operation(large_array_zyx, \"在原始连续数组上计算\")\nview_time = benchmark_operation(transposed_view_xyz, \"在转置视图(非连续)上计算\")\nprint(f\"  性能差异: 转置视图计算慢约 {(view_time/original_time-1)*100:.1f}%\")\n\n  在原始连续数组上计算: 20.66 ms\n  在转置视图(非连续)上计算: 14.76 ms\n  性能差异: 转置视图计算慢约 -28.5%\n\n\n3. 外部库的连续性要求 问题进一步复杂化的是，许多外部库和工具明确要求输入数组必须是C连续的（C-contiguous）：\n\n深度学习框架：PyTorch的 torch.from_numpy() 和TensorFlow的张量转换都要求输入数组是C-contiguous的\nGPU计算：CUDA kernels和OpenCL通常需要连续的内存布局来实现高效的GPU内存传输\nONNX推理：多数ONNX Runtime后端要求模型输入为连续数组\n图像处理库：OpenCV的某些函数和skimage的部分算法对内存布局有严格要求\n\n这意味着在将转置后的非连续数组传递给这些库之前，必须先进行连续化处理。\n4. 恢复连续性的开销 要解决性能问题和兼容性问题，需要调用np.ascontiguousarray()，但这会触发一次完整的内存拷贝，消耗额外的时间和一倍的内存。\n\nstart_time = time.time()\ncontiguous_copy_xyz = np.ascontiguousarray(transposed_view_xyz)\ncontiguous_time = (time.time() - start_time) * 1000\n\nprint(f\"强制连续化(内存拷贝)耗时: {contiguous_time:.1f} ms\")\nprint(f\"新数组 C-contiguous: {contiguous_copy_xyz.flags['C_CONTIGUOUS']}\")\nprint(f\"额外内存占用: {contiguous_copy_xyz.nbytes / 1024 / 1024:.1f} MB\")\n\n强制连续化(内存拷贝)耗时: 118.8 ms\n新数组 C-contiguous: True\n额外内存占用: 244.1 MB\n\n\n结论是，手动修正轴序问题，要么牺牲计算性能和访问效率，要么付出高昂的时间和内存成本。这个代价在深度学习和GPU计算场景中尤其显著，因为每次模型推理都需要进行连续化处理。",
    "crumbs": [
      "首页",
      "DiCube",
      "三维轴序约定"
    ]
  },
  {
    "objectID": "1.5_axis_order.html#dicube的解决方案设计上的一致性",
    "href": "1.5_axis_order.html#dicube的解决方案设计上的一致性",
    "title": "三维轴序约定",
    "section": "5. DiCube的解决方案：设计上的一致性",
    "text": "5. DiCube的解决方案：设计上的一致性\nDiCube的设计哲学是将复杂性封装在库内部，为用户提供一个简单、一致的编程接口。它选择在数据加载阶段一次性解决轴序问题。\n当使用dicube.load_from_dicom_folder()时，DiCube执行了以下操作：\n\n读取原始数据和元数据。\n使用(Z, Y, X) + C-continuous的方式重新解释内存布局，无需内存重排。\n同时，将空间元数据的xyz轴进行翻转，使spacing等元数据也符合 (Z, Y, X) 顺序。\n\n这样，用户从DiCube获取的数据和元数据在轴序上是完全统一的，可以直接用于Python生态中的其他库。\n下面的代码对比了DiCube和SimpleITK的输出：\n\nimport dicube\n# 使用DiCube加载同一份数据\ndcb_image = dicube.load_from_dicom_folder(dirname, sort_method=dicube.SortMethod.POSITION_RIGHT_HAND)\n\nprint(\"--- DiCube: 轴序一致 ---\")\n# 数组shape是 (Z, Y, X)\nprint('dicube array.shape -&gt;', dcb_image.get_fdata().shape, '(Z, Y, X)')\n# space.spacing也是 (Z, Y, X)\nprint('dicube space.spacing -&gt;', dcb_image.space.spacing, '(Z, Y, X)')\n# 索引直接对应\nprint(f\"  数组轴0(Z)的spacing为: {dcb_image.space.spacing[0]}\")\n\nprint(\"\\n--- SimpleITK: 轴序不一致 ---\")\n# 数组shape是 (Z, Y, X)\nprint(\"simpleitk array.shape -&gt;\", array.shape, \"(Z, Y, X)\")\n# GetSpacing()是 (X, Y, Z)\nprint(\"simpleitk image.GetSpacing() -&gt;\", sitk_image.GetSpacing(), \"(X, Y, Z)\")\n# 索引需要转换\nprint(f\"  数组轴0(Z)的spacing为: {sitk_image.GetSpacing()[2]}\")\n\n--- DiCube: 轴序一致 ---\ndicube array.shape -&gt; (200, 512, 512) (Z, Y, X)\ndicube space.spacing -&gt; (0.4499999999999998, 0.4296875, 0.4296875) (Z, Y, X)\n  数组轴0(Z)的spacing为: 0.4499999999999998\n\n--- SimpleITK: 轴序不一致 ---\nsimpleitk array.shape -&gt; (200, 512, 512) (Z, Y, X)\nsimpleitk image.GetSpacing() -&gt; (0.4296875, 0.4296875, 0.4499999999999998) (X, Y, Z)\n  数组轴0(Z)的spacing为: 0.4499999999999998\n\n\n由于DiCube只是重新解释内存布局和翻转space轴序，没有实际的内存重排开销。它通过提供一个统一且符合Python开发者直觉的接口，从根本上消除了后续处理流程中所有因轴序不一致而引发的认知负担和潜在错误。",
    "crumbs": [
      "首页",
      "DiCube",
      "三维轴序约定"
    ]
  },
  {
    "objectID": "1.6_dicom_compatibility_simple.html",
    "href": "1.6_dicom_compatibility_simple.html",
    "title": "DICOM兼容性保证",
    "section": "",
    "text": "DiCube作为高效的医学影像存储方案，需要与现有DICOM生态系统无缝集成，以确保PACS厂商能够顺利采用这一技术。\n为解决这一需求，DiCube提供了DcbStreamingReader组件，它能够将压缩的DCBS文件实时转换为标准DICOM格式，有效地模拟传统PACS后端的数据分发功能。这种设计使得下游应用可以透明地访问DiCube存储的数据，而无需修改现有的DICOM处理流程。",
    "crumbs": [
      "首页",
      "DiCube",
      "DICOM兼容性保证"
    ]
  },
  {
    "objectID": "1.6_dicom_compatibility_simple.html#问题背景pacs系统集成需求",
    "href": "1.6_dicom_compatibility_simple.html#问题背景pacs系统集成需求",
    "title": "DICOM兼容性保证",
    "section": "",
    "text": "DiCube作为高效的医学影像存储方案，需要与现有DICOM生态系统无缝集成，以确保PACS厂商能够顺利采用这一技术。\n为解决这一需求，DiCube提供了DcbStreamingReader组件，它能够将压缩的DCBS文件实时转换为标准DICOM格式，有效地模拟传统PACS后端的数据分发功能。这种设计使得下游应用可以透明地访问DiCube存储的数据，而无需修改现有的DICOM处理流程。",
    "crumbs": [
      "首页",
      "DiCube",
      "DICOM兼容性保证"
    ]
  },
  {
    "objectID": "1.6_dicom_compatibility_simple.html#流式读取机制技术实现与性能优势",
    "href": "1.6_dicom_compatibility_simple.html#流式读取机制技术实现与性能优势",
    "title": "DICOM兼容性保证",
    "section": "2. 流式读取机制：技术实现与性能优势",
    "text": "2. 流式读取机制：技术实现与性能优势\n\n2.1 基本使用接口\nDiCube的流式读取器提供了简洁的API接口，支持按帧索引动态生成DICOM数据：\n\nimport dicube\nfrom dicube.dicom import DcbStreamingReader\n\n# 初始化流式读取器\ndicom_dir = 'dicube-testdata/dicom/sample_10'\ndcb_file = 'dicube-testdata/sample_10.dcbs'\n\ndcb_image = dicube.load_from_dicom_folder(dicom_dir)\ndicube.save(dcb_image, dcb_file)\ndcb_stream = DcbStreamingReader(dcb_file)\n\n# 按需提取指定帧的DICOM数据\nslice_0 = dcb_stream.get_dicom_for_frame(0)\nwith open('dicube-testdata/sample_10_0.dcm', 'wb') as f:\n    f.write(slice_0)\nprint(f\"✅ 成功生成DICOM数据，大小: {len(slice_0)} 字节\")\n\n✅ 成功生成DICOM数据，大小: 163032 字节\n\n\n\n\n2.2 数据处理与可视化分析\n流式读取器生成的DICOM数据完全符合标准规范，可以直接被PyDICOM等主流库处理：\n\nimport pydicom\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom io import BytesIO\n\ndef analyze_dicom_slice(slice_index):\n    \"\"\"分析并显示指定索引的DICOM切片\"\"\"\n    # 获取DICOM字节流并解析\n    dicom_buffer = BytesIO(dcb_stream.get_dicom_for_frame(slice_index))\n    dataset = pydicom.dcmread(dicom_buffer, force=True)\n\n    # 提取并校正像素数据\n    pixel_array = dataset.pixel_array.astype('float32')\n    if hasattr(dataset, 'RescaleIntercept'):\n        pixel_array += float(dataset.RescaleIntercept)\n\n    # 使用临床标准窗位窗宽显示\n    plt.figure(figsize=(8, 6))\n    plt.imshow(pixel_array, cmap='gray', vmin=-800, vmax=300)  # 肺窗标准参数\n    plt.axis('off')\n    plt.title(f\"DICOM Slice #{slice_index}\")\n    plt.tight_layout()\n    plt.show()\n    \n    return dataset\n\n# 分析多个代表性切片\nfor slice_idx in [0, 4, 8]:\n    dataset = analyze_dicom_slice(slice_idx)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n这种流式处理方式的核心优势在于按需转换：系统只在实际访问时才进行DCBS到DICOM的转换，避免了预先转换整个序列所带来的存储开销和延迟。",
    "crumbs": [
      "首页",
      "DiCube",
      "DICOM兼容性保证"
    ]
  },
  {
    "objectID": "1.6_dicom_compatibility_simple.html#编码兼容性挑战htj2k标准的生态现状",
    "href": "1.6_dicom_compatibility_simple.html#编码兼容性挑战htj2k标准的生态现状",
    "title": "DICOM兼容性保证",
    "section": "3. 编码兼容性挑战：HTJ2K标准的生态现状",
    "text": "3. 编码兼容性挑战：HTJ2K标准的生态现状\n\n3.1 技术标准演进背景\nDiCube采用的DCBS格式基于HTJ2K（High Throughput JPEG 2000）编码器，该技术于2023年正式被DICOM标准委员会认可并纳入官方规范。HTJ2K相比传统JPEG 2000具有显著的性能优势：\n\n编码速度提升：相比标准JPEG 2000，编码效率提高约10-15倍\n压缩质量保持：在相同压缩比下保持无损或近无损的图像质量\n硬件友好性：更适合GPU并行加速和硬件实现\n\n然而，作为一个相对较新的标准，HTJ2K在现有医学影像生态系统中的支持程度存在显著差异。\n\n\n3.2 当前兼容性状况分析\n基于广泛的测试和调研，我们梳理了主要工具和平台对HTJ2K编码DICOM文件的支持状况：\n✅ 已支持的工具链\n\nPyDICOM ≥3.0.0：需配合 pylibjpeg-openjpeg &gt;2.0 和 pylibjpeg &gt;2.0\nPython-GDCM 3.0.26：原生支持HTJ2K解码\nITK-SNAP 4.4.0：医学影像可视化工具，支持HTJ2K格式\n\n❌ 尚未支持的工具\n\nHoros 4.0.1：Mac平台流行的DICOM查看器\nSimpleITK 2.5.2：影响部分Python科学计算工作流\n\n\n\n3.3 最大兼容性解决方案\n针对兼容性挑战，DiCube提供了强制解压缩选项，通过force_uncompressed=True参数生成未压缩的DICOM文件：\n# 生成最大兼容性的未压缩DICOM\nuncompressed_dicom = dcb_stream.get_dicom_for_frame(0, force_uncompressed=True)\n这种方案的权衡分析：\n优势： - 广泛兼容：未压缩DICOM几乎被所有医学影像工具支持 - 处理简单：无需考虑解码器依赖和版本问题 - 传输可靠：在网络传输中不存在解码失败的风险\n劣势： - 文件体积：未压缩文件通常比HTJ2K压缩版本大5-10倍 - 网络负载：增加PACS系统的存储和带宽压力 - 传输延迟：大文件传输时间显著增加",
    "crumbs": [
      "首页",
      "DiCube",
      "DICOM兼容性保证"
    ]
  },
  {
    "objectID": "1.6_dicom_compatibility_simple.html#部署建议渐进式兼容性策略",
    "href": "1.6_dicom_compatibility_simple.html#部署建议渐进式兼容性策略",
    "title": "DICOM兼容性保证",
    "section": "4. 部署建议：渐进式兼容性策略",
    "text": "4. 部署建议：渐进式兼容性策略\n在实际部署中，建议采用渐进式兼容性策略：\n\n环境评估：首先测试目标PACS环境对HTJ2K的支持程度\n混合部署：对支持HTJ2K的新系统使用压缩格式，对旧系统fallback到未压缩格式\n监控升级：跟踪关键依赖库的更新，逐步扩大HTJ2K的使用范围\n\n这种策略平衡了技术先进性与现实兼容性的需求，为DiCube在医疗机构的广泛采用提供了可行路径。",
    "crumbs": [
      "首页",
      "DiCube",
      "DICOM兼容性保证"
    ]
  },
  {
    "objectID": "2.2_mask_label_mapping.html",
    "href": "2.2_mask_label_mapping.html",
    "title": "语义映射系统",
    "section": "",
    "text": "在前文中，我们识别了医学分割掩膜存储中的一个核心挑战：语义信息的外部依赖管理。传统方法中，像素值与其语义含义（如”肝脏”、“脾脏”）的映射关系必须通过外部配置文件或硬编码来维护，这导致了数据不自洽、同步困难和版本管理复杂等问题。\n本文将深入介绍 MedMask 如何通过内置的双向语义映射系统来根本性地解决这一问题。我们将展示 LabelMapping 类的核心设计理念、SegmentationMask 的语义集成机制，以及这种设计如何在实际医学影像工作流中带来显著的效率提升和错误减少。",
    "crumbs": [
      "首页",
      "MedMask",
      "语义映射系统"
    ]
  },
  {
    "objectID": "2.2_mask_label_mapping.html#摘要",
    "href": "2.2_mask_label_mapping.html#摘要",
    "title": "语义映射系统",
    "section": "",
    "text": "在前文中，我们识别了医学分割掩膜存储中的一个核心挑战：语义信息的外部依赖管理。传统方法中，像素值与其语义含义（如”肝脏”、“脾脏”）的映射关系必须通过外部配置文件或硬编码来维护，这导致了数据不自洽、同步困难和版本管理复杂等问题。\n本文将深入介绍 MedMask 如何通过内置的双向语义映射系统来根本性地解决这一问题。我们将展示 LabelMapping 类的核心设计理念、SegmentationMask 的语义集成机制，以及这种设计如何在实际医学影像工作流中带来显著的效率提升和错误减少。",
    "crumbs": [
      "首页",
      "MedMask",
      "语义映射系统"
    ]
  },
  {
    "objectID": "2.2_mask_label_mapping.html#传统方法的语义管理困境",
    "href": "2.2_mask_label_mapping.html#传统方法的语义管理困境",
    "title": "语义映射系统",
    "section": "1. 传统方法的语义管理困境",
    "text": "1. 传统方法的语义管理困境\n在传统的医学分割工作流中，掩膜文件本身只包含数值标签（如1、2、3），其语义含义需要通过外部机制来定义和维护。目前主流的语义管理方式有两种：\n\n方式一：外置配置文件描述\n通过独立的配置文件（如JSON、YAML、CSV）来维护标签与语义的对应关系。\n\nimport numpy as np\nimport json\n\n# 掩膜数据\nmask_array = np.array([\n    [0, 0, 1, 1],\n    [0, 2, 2, 1], \n    [3, 3, 0, 0]\n])\n\n# 外置配置文件 label_config.json\nconfig = {\n    \"1\": \"liver\",\n    \"2\": \"spleen\", \n    \"3\": \"kidney\"\n}\n\n# 需要额外维护配置文件\nwith open('label_config.json', 'w') as f:\n    json.dump(config, f)\n\nprint(\"方式一：外置配置文件\")\nprint(f\"掩膜文件: 形状{mask_array.shape}, 标签{np.unique(mask_array)}\")\nprint(f\"配置文件: {config}\")\n\n方式一：外置配置文件\n掩膜文件: 形状(3, 4), 标签[0 1 2 3]\n配置文件: {'1': 'liver', '2': 'spleen', '3': 'kidney'}\n\n\n主要缺陷： - 文件管理复杂化：每个掩膜都需要配套的配置文件，增加了文件管理负担 - 数据完整性风险：配置文件容易被意外删除、修改或损坏，导致数据无法解读 - 版本同步困难：掩膜文件与配置文件需要严格保持版本一致，容易出现不匹配\n\n\n方式二：文件名或内部键值描述\n利用文件命名约定或NPZ格式的内部键值来承载语义信息。\n\n# 文件名描述方式\n# liver_segmentation.nii.gz\n# spleen_segmentation.nii.gz  \n# kidney_segmentation.nii.gz\n\n# NPZ内部键值描述方式（变体）\nnp.savez_compressed('multi_organ.npz', \n    liver=mask_array == 1,\n    spleen=mask_array == 2, \n    kidney=mask_array == 3\n)\n\nloaded = np.load('multi_organ.npz')\nprint(\"方式二：文件名/键值描述\")\nprint(f\"NPZ键值: {list(loaded.keys())}\")\n\n方式二：文件名/键值描述\nNPZ键值: ['liver', 'spleen', 'kidney']\n\n\n主要缺陷： - 信息承载能力有限：文件名长度受限，无法描述复杂的标签关系和层级结构 - 标签数量瓶颈：当标签数量较多时（如100+器官），文件名或键值管理变得不可行 - 标准化困难：缺乏统一的命名规范，不同团队可能采用不同的约定，影响互操作性",
    "crumbs": [
      "首页",
      "MedMask",
      "语义映射系统"
    ]
  },
  {
    "objectID": "2.2_mask_label_mapping.html#medmask-的语义映射解决方案",
    "href": "2.2_mask_label_mapping.html#medmask-的语义映射解决方案",
    "title": "语义映射系统",
    "section": "2. MedMask 的语义映射解决方案",
    "text": "2. MedMask 的语义映射解决方案\n\n核心设计理念：内嵌式双向映射\nMedMask 通过 LabelMapping 类实现了语义信息与像素数据的一体化存储。这种设计确保了掩膜文件在任何环境下都是完全自洽的，无需外部依赖即可完整解读。\n\nfrom medmask.core.mapping import LabelMapping\n\n# MedMask方法：创建内嵌语义映射\nmapping = LabelMapping({\n    \"liver\": 1,\n    \"spleen\": 2, \n    \"kidney\": 3\n})\n\nprint(\"双向映射能力:\")\nprint(f\"正向查询: liver -&gt; {mapping['liver']}\")\nprint(f\"反向查询: {mapping.inverse(1)} &lt;- 1\")\nprint(f\"属性访问: mapping.spleen = {mapping.spleen}\")\nprint(f\"函数调用: mapping('kidney') = {mapping('kidney')}\")\n\n双向映射能力:\n正向查询: liver -&gt; 1\n反向查询: liver &lt;- 1\n属性访问: mapping.spleen = 2\n函数调用: mapping('kidney') = 3\n\n\n\n\nLabelMapping 类的技术特性\nLabelMapping 类提供了完整的双向映射功能，支持多种访问模式以适应不同的编程习惯：\n\n# 1. 字典式访问\nliver_label = mapping[\"liver\"]\n\n# 2. 属性式访问（便于IDE自动补全）\nspleen_label = mapping.spleen\n\n# 3. 函数调用式访问\nkidney_label = mapping(\"kidney\")\n\n# 4. 反向查询\norgan_name = mapping.inverse(1)\n\n# 5. 存在性检查\nhas_liver = \"liver\" in mapping._name_to_label\nhas_label_4 = mapping.has_label(4)\n\nprint(f\"多种访问方式的一致性验证:\")\nprint(f\"字典访问: {liver_label}, 属性访问: {mapping.liver}, 函数调用: {mapping('liver')}\")\nprint(f\"反向查询验证: 标签1对应{organ_name}\")\nprint(f\"存在性检查: 有liver? {has_liver}, 有标签4? {has_label_4}\")\n\n多种访问方式的一致性验证:\n字典访问: 1, 属性访问: 1, 函数调用: 1\n反向查询验证: 标签1对应liver\n存在性检查: 有liver? True, 有标签4? False\n\n\n\n\n持久化与版本控制\n语义映射支持JSON序列化，确保了跨平台的兼容性和版本控制的便利性：\n\n# 序列化为JSON\njson_repr = mapping.to_json()\nprint(f\"JSON序列化结果: {json_repr}\")\n\n# 从JSON反序列化\nrestored_mapping = LabelMapping.from_json(json_repr)\nprint(f\"反序列化验证: {restored_mapping}\")\n\n# 验证完整性\nprint(f\"序列化前后一致性: {mapping._name_to_label == restored_mapping._name_to_label}\")\n\nJSON序列化结果: {\"liver\": 1, \"spleen\": 2, \"kidney\": 3}\n反序列化验证: {'liver': 1, 'spleen': 2, 'kidney': 3}\n序列化前后一致性: True",
    "crumbs": [
      "首页",
      "MedMask",
      "语义映射系统"
    ]
  },
  {
    "objectID": "2.2_mask_label_mapping.html#segmentationmask-的语义集成",
    "href": "2.2_mask_label_mapping.html#segmentationmask-的语义集成",
    "title": "语义映射系统",
    "section": "3. SegmentationMask 的语义集成",
    "text": "3. SegmentationMask 的语义集成\n\n统一的语义-空间数据模型\nSegmentationMask 类将语义映射、空间信息和像素数据统一管理，形成了完整的医学掩膜表示：\n\nfrom medmask import SegmentationMask\nfrom spacetransformer import Space\n\n# 创建空间信息\nspace = Space(shape=(1, 3, 4), spacing=(1.0, 1.0, 1.0))\n\n# 创建完整的语义掩膜\nsegmask = SegmentationMask(\n    mask_array=mask_array[np.newaxis, :, :],  # 添加Z维度\n    mapping={\"liver\": 1, \"spleen\": 2, \"kidney\": 3},\n    space=space\n)\n\nprint(f\"集成后的掩膜信息:\")\nprint(f\"形状: {segmask.data.shape}\")\nprint(f\"空间: spacing={segmask.space.spacing}\")\nprint(f\"语义映射: {dict(segmask.mapping.items())}\")\n\n集成后的掩膜信息:\n形状: (1, 3, 4)\n空间: spacing=(1.0, 1.0, 1.0)\n语义映射: {'liver': 1, 'spleen': 2, 'kidney': 3}\n\n\n\n\n语义化查询接口与代码可维护性\n通过内嵌的语义映射，用户可以直接使用器官名称来查询和操作掩膜数据，这不仅提高了代码的可读性，更重要的是根本性地改善了代码的可维护性。\n\n# 按名称查询单个器官\nliver_mask = segmask.get_binary_mask_by_names(\"liver\")\nprint(f\"肝脏掩膜: 非零像素数 = {np.sum(liver_mask)}\")\n\n# 按名称查询多个器官\nabdominal_organs = segmask.get_binary_mask_by_names([\"liver\", \"spleen\"])\nprint(f\"腹部器官掩膜: 非零像素数 = {np.sum(abdominal_organs)}\")\n\n# 按标签查询（保持向后兼容）\nliver_by_label = segmask.get_binary_mask_by_labels(1)\nprint(f\"按标签查询验证: {np.array_equal(liver_mask, liver_by_label)}\")\n\n肝脏掩膜: 非零像素数 = 3\n腹部器官掩膜: 非零像素数 = 5\n按标签查询验证: True\n\n\n可维护性的关键优势在于代码与数据表示的解耦：\n传统方法的维护困境：\n# 传统代码需要硬编码 label-value 对应关系\nLIVER_LABEL = 1\nSPLEEN_LABEL = 2\nKIDNEY_LABEL = 3\n\n# 当算法版本升级，标签值可能发生变化\n# 每次标签值变化，所有相关方都需要同步更新代码\n# v1.0: liver=1, spleen=2, kidney=3\n# v2.0: liver=5, spleen=8, kidney=12\nMedMask 方法的维护优势：\n# 代码完全不依赖具体的标签值\ndef process_organs(segmask):\n    liver_region = segmask.get_binary_mask_by_names(\"liver\")\n    return liver_region\n\n# 无论算法版本如何变化，只要器官名称不变，代码保持不变\n# v1.0: {\"liver\": 1, \"spleen\": 2}  ← 代码无需修改\n# v2.0: {\"liver\": 5, \"spleen\": 8}  ← 代码无需修改\n# v3.0: {\"liver\": 12, \"spleen\": 15} ← 代码无需修改\n这种设计实现了代码与数据版本的完全解耦：开发者只需要维护目标器官的名称列表，而不需要关心具体的数值编码。当分割算法升级、标签分配策略调整时，业务逻辑代码完全不受影响，大幅降低了系统维护成本和版本迁移风险。\n\n\n增量构建与动态扩展\n对于复杂的分割任务，MedMask支持渐进式构建掩膜，每次添加一个器官标签：\n\n# 懒加载初始化：创建空掩膜\nempty_mask = SegmentationMask.lazy_init(bit_depth=8, space=space)\n\n# 模拟分割结果：逐步添加器官\nliver_region = np.zeros((1, 3, 4), dtype=bool)\nliver_region[0, 0:2, 1:3] = True\n\nspleen_region = np.zeros((1, 3, 4), dtype=bool) \nspleen_region[0, 1:3, 2:4] = True\n\n# 动态添加标签\nempty_mask.add_label(liver_region, label=1, name=\"liver\")\nempty_mask.add_label(spleen_region, label=2, name=\"spleen\")\n\nprint(f\"动态构建结果:\")\nprint(f\"标签数量: {len(empty_mask.mapping)}\")\nprint(f\"器官列表: {list(empty_mask.mapping)}\")\n\n# 验证查询功能\ncombined_organs = empty_mask.get_binary_mask_by_names([\"liver\", \"spleen\"])\nprint(f\"组合查询: 覆盖像素数 = {np.sum(combined_organs)}\")\n\n动态构建结果:\n标签数量: 2\n器官列表: ['liver', 'spleen']\n组合查询: 覆盖像素数 = 7\n\n\n\n\n错误预防机制\nMedMask的设计会防止反复写入同一个键值：\n\n# MedMask的错误预防能力\nprint(\"\\nMedMask的自动错误预防:\")\ntry:\n    # 尝试添加重复标签（系统自动阻止）\n    test_mask = SegmentationMask.lazy_init(8, space=Space(shape=(2, 2, 2)))\n    test_mask.add_label(np.ones((2, 2, 2), dtype=bool), 1, \"organ_a\")\n    test_mask.add_label(np.ones((2, 2, 2), dtype=bool), 1, \"organ_b\")  # 重复标签\nexcept ValueError as e:\n    print(f\"自动检测并阻止错误: {e}\")\n\n\nMedMask的自动错误预防:\n自动检测并阻止错误: Label 1 already exists in the mask array.",
    "crumbs": [
      "首页",
      "MedMask",
      "语义映射系统"
    ]
  },
  {
    "objectID": "2.2_mask_label_mapping.html#总结",
    "href": "2.2_mask_label_mapping.html#总结",
    "title": "语义映射系统",
    "section": "4. 总结",
    "text": "4. 总结\nMedMask 的语义映射系统通过以下核心创新，彻底解决了传统医学掩膜格式在语义管理方面的根本性缺陷：\n\n技术创新点\n\n内嵌式双向映射：将语义信息直接集成到掩膜文件中，实现数据完全自洽，消除外部依赖。\n多模式访问接口：支持字典、属性、函数调用等多种访问方式，适应不同的编程习惯和IDE环境。\n运行时一致性验证：在数据操作过程中自动检测和阻止语义-标签不一致，从源头预防数据错误。\nJSON标准化序列化：确保跨平台兼容性和版本控制友好性，支持复杂项目的长期维护。\n\n\n\n实际价值体现\n\n\n\n传统方法\nMedMask方法\n改进效果\n\n\n\n\n外部配置文件维护\n内嵌语义映射\n消除同步负担\n\n\n手动数据验证\n自动一致性检查\n减少人为错误\n\n\n硬编码标签查询\n语义化查询接口\n提高代码可读性\n\n\n团队沟通协调\n自描述数据格式\n简化协作流程\n\n\n\n通过这种系统性的设计改进，MedMask不仅解决了语义管理的技术问题，更重要的是为医学影像分析工作流带来了根本性的效率提升和质量保障。开发团队可以将更多精力集中在核心的医学算法开发上，而不是琐碎的数据管理细节。",
    "crumbs": [
      "首页",
      "MedMask",
      "语义映射系统"
    ]
  },
  {
    "objectID": "2.3_mask_archive.html",
    "href": "2.3_mask_archive.html",
    "title": "多掩膜归档管理",
    "section": "",
    "text": "MaskArchive 是 MedMask 提供的多掩膜归档功能，核心作用是将多个分割掩膜绑定到同一个归档文件中。当需要管理大量相关掩膜时（如全身器官分割、多层级解剖结构），这一功能可以将原本分散的多个文件合并为单一归档，简化文件管理。\n关键限制：归档中的所有掩膜必须共享相同的空间参考信息（shape、spacing、origin），确保空间一致性。",
    "crumbs": [
      "首页",
      "MedMask",
      "多掩膜归档管理"
    ]
  },
  {
    "objectID": "2.3_mask_archive.html#摘要",
    "href": "2.3_mask_archive.html#摘要",
    "title": "多掩膜归档管理",
    "section": "",
    "text": "MaskArchive 是 MedMask 提供的多掩膜归档功能，核心作用是将多个分割掩膜绑定到同一个归档文件中。当需要管理大量相关掩膜时（如全身器官分割、多层级解剖结构），这一功能可以将原本分散的多个文件合并为单一归档，简化文件管理。\n关键限制：归档中的所有掩膜必须共享相同的空间参考信息（shape、spacing、origin），确保空间一致性。",
    "crumbs": [
      "首页",
      "MedMask",
      "多掩膜归档管理"
    ]
  },
  {
    "objectID": "2.3_mask_archive.html#问题场景肺部多层级分割",
    "href": "2.3_mask_archive.html#问题场景肺部多层级分割",
    "title": "多掩膜归档管理",
    "section": "1. 问题场景：肺部多层级分割",
    "text": "1. 问题场景：肺部多层级分割\n在肺部分析中，常需要同时处理不同粒度的结构：\n\n5个肺叶：左上叶、左下叶、右上叶、右中叶、右下叶（互不重叠）\n18个肺段：每个肺叶下的亚结构（互不重叠，但与肺叶重叠）\n\nN个病灶：肺结节、肿块等（可与肺叶、肺段重叠）\n1个全肺：整体肺区域（与所有结构重叠）\n\n传统方法需要管理 5+18+N+1 个独立文件，而 MaskArchive 可以将它们合并到一个归档中。",
    "crumbs": [
      "首页",
      "MedMask",
      "多掩膜归档管理"
    ]
  },
  {
    "objectID": "2.3_mask_archive.html#模拟数据构建",
    "href": "2.3_mask_archive.html#模拟数据构建",
    "title": "多掩膜归档管理",
    "section": "2. 模拟数据构建",
    "text": "2. 模拟数据构建\n我们用2D掩膜来模拟这一场景：\n\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom medmask import SegmentationMask, MaskArchive\nfrom spacetransformer import Space\nfrom pathlib import Path\nimport time\n\n# 创建模拟的2D肺部图像 (1, 64, 64) - 单层CT切片\nshape = (1, 64, 64)\nspace = Space(shape=shape, spacing=(1.0, 1.0, 1.0), origin=(0.0, 0.0, 0.0))\n\n# 构建肺叶掩膜 (5个肺叶，互不重叠)\nlobe_mask = np.zeros(shape, dtype=np.uint8)\nlobe_mask[0, 10:30, 10:25] = 1  # 左上叶\nlobe_mask[0, 35:55, 10:25] = 2  # 左下叶  \nlobe_mask[0, 10:25, 40:55] = 3  # 右上叶\nlobe_mask[0, 30:45, 40:55] = 4  # 右中叶\nlobe_mask[0, 50:60, 40:55] = 5  # 右下叶\n\nlobe_mapping = {\n    \"left_upper_lobe\": 1,\n    \"left_lower_lobe\": 2,\n    \"right_upper_lobe\": 3,\n    \"right_middle_lobe\": 4,\n    \"right_lower_lobe\": 5\n}\n\n# 构建肺段掩膜 (10个肺段，与肺叶重叠)\nsegment_mask = np.zeros(shape, dtype=np.uint8)\n# 左上叶的段\nsegment_mask[0, 10:18, 10:18] = 1   \nsegment_mask[0, 18:25, 12:20] = 2   \nsegment_mask[0, 22:30, 17:25] = 3   \n# 左下叶的段\nsegment_mask[0, 35:42, 10:18] = 4   \nsegment_mask[0, 42:50, 12:20] = 5   \nsegment_mask[0, 48:55, 17:25] = 6   \n# 右上叶的段\nsegment_mask[0, 10:18, 40:48] = 7   \nsegment_mask[0, 18:25, 42:50] = 8   \n# 右中叶的段\nsegment_mask[0, 30:38, 40:48] = 9   \nsegment_mask[0, 38:45, 42:50] = 10  \n\nsegment_mapping = {\n    \"LUL_S1\": 1, \"LUL_S2\": 2, \"LUL_S3\": 3,\n    \"LLL_S4\": 4, \"LLL_S5\": 5, \"LLL_S6\": 6,\n    \"RUL_S1\": 7, \"RUL_S2\": 8,\n    \"RML_S4\": 9, \"RML_S5\": 10\n}\n\n# 构建病灶掩膜 (3个病灶，可与肺叶重叠)\nlesion_mask = np.zeros(shape, dtype=np.uint8)\nlesion_mask[0, 15:20, 15:20] = 1    # 病灶1：位于左上叶\nlesion_mask[0, 40:45, 15:20] = 2    # 病灶2：位于左下叶\nlesion_mask[0, 25:30, 45:50] = 3    # 病灶3：位于右中叶\n\nlesion_mapping = {\n    \"nodule_1\": 1,\n    \"nodule_2\": 2,\n    \"mass_1\": 3\n}\n\n# 构建全肺掩膜 (包含所有肺叶区域)\nwhole_lung_mask = np.zeros(shape, dtype=np.uint8)\nwhole_lung_mask[0, 8:62, 8:57] = 1  # 整个肺部区域，稍微扩大范围\n\nwhole_lung_mapping = {\"whole_lung\": 1}\n\nprint(\"模拟数据构建完成:\")\nprint(f\"空间信息: {shape}\")\nprint(f\"肺叶标签数: {len(lobe_mapping)}\")\nprint(f\"肺段标签数: {len(segment_mapping)}\")\nprint(f\"病灶标签数: {len(lesion_mapping)}\")\nprint(f\"全肺标签数: {len(whole_lung_mapping)}\")\n\n模拟数据构建完成:\n空间信息: (1, 64, 64)\n肺叶标签数: 5\n肺段标签数: 10\n病灶标签数: 3\n全肺标签数: 1",
    "crumbs": [
      "首页",
      "MedMask",
      "多掩膜归档管理"
    ]
  },
  {
    "objectID": "2.3_mask_archive.html#可视化掩膜结构",
    "href": "2.3_mask_archive.html#可视化掩膜结构",
    "title": "多掩膜归档管理",
    "section": "3. 可视化掩膜结构",
    "text": "3. 可视化掩膜结构\n\n# 可视化四种掩膜的空间分布\nfig, axes = plt.subplots(2, 2, figsize=(12, 10))\naxes = axes.flatten()\n\nmasks = [\n    (lobe_mask[0], \"Lung Lobes (5 lobes)\", \"Set3\"),\n    (segment_mask[0], \"Lung Segments (10 segments)\", \"Set3\"), \n    (lesion_mask[0], \"Lung Lesions (3 lesions)\", \"Set3\"),\n    (whole_lung_mask[0], \"Whole Lung (1 region)\", \"Set3\")\n]\n\nfor i, (mask, title, cmap) in enumerate(masks):\n    axes[i].imshow(mask, cmap=cmap, alpha=0.8)\n    axes[i].set_title(title, fontsize=12)\n    axes[i].axis('off')\n\nplt.tight_layout()\nplt.show()\n\nprint(\"Mask overlap relationships:\")\nprint(\"- Segments overlap with lobes (segments are sub-structures of lobes)\")  \nprint(\"- Lesions overlap with lobes and segments (lesions are located within lobes)\")\nprint(\"- Whole lung overlaps with all structures (whole lung contains all regions)\")\n\n\n\n\n\n\n\n\nMask overlap relationships:\n- Segments overlap with lobes (segments are sub-structures of lobes)\n- Lesions overlap with lobes and segments (lesions are located within lobes)\n- Whole lung overlaps with all structures (whole lung contains all regions)",
    "crumbs": [
      "首页",
      "MedMask",
      "多掩膜归档管理"
    ]
  },
  {
    "objectID": "2.3_mask_archive.html#传统方法独立文件存储",
    "href": "2.3_mask_archive.html#传统方法独立文件存储",
    "title": "多掩膜归档管理",
    "section": "4. 传统方法：独立文件存储",
    "text": "4. 传统方法：独立文件存储\n\n# 方法1: 传统的独立文件存储\nprint(\"=== 传统方法：独立文件存储 ===\")\nstart_time = time.time()\n\n# 创建四个独立的SegmentationMask文件\nlobe_segmask = SegmentationMask(lobe_mask, lobe_mapping, space=space)\nsegment_segmask = SegmentationMask(segment_mask, segment_mapping, space=space)\nlesion_segmask = SegmentationMask(lesion_mask, lesion_mapping, space=space)\nwhole_lung_segmask = SegmentationMask(whole_lung_mask, whole_lung_mapping, space=space)\n\n# 保存为独立文件\nlobe_segmask.save(\"lung_lobes.msk\")\nsegment_segmask.save(\"lung_segments.msk\") \nlesion_segmask.save(\"lung_lesions.msk\")\nwhole_lung_segmask.save(\"whole_lung.msk\")\n\ntraditional_time = time.time() - start_time\n\n# 计算独立文件的总大小\nindependent_files = [\"lung_lobes.msk\", \"lung_segments.msk\", \"lung_lesions.msk\", \"whole_lung.msk\"]\ntotal_size = sum(Path(f).stat().st_size for f in independent_files)\n\nprint(f\"创建时间: {traditional_time:.3f}s\")\nprint(f\"文件数量: {len(independent_files)} 个\")\nprint(f\"总大小: {total_size / 1024:.1f} KB\")\nfor f in independent_files:\n    size = Path(f).stat().st_size\n    print(f\"  - {f}: {size / 1024:.1f} KB\")\n\n=== 传统方法：独立文件存储 ===\n创建时间: 0.003s\n文件数量: 4 个\n总大小: 1.7 KB\n  - lung_lobes.msk: 0.5 KB\n  - lung_segments.msk: 0.5 KB\n  - lung_lesions.msk: 0.4 KB\n  - whole_lung.msk: 0.3 KB",
    "crumbs": [
      "首页",
      "MedMask",
      "多掩膜归档管理"
    ]
  },
  {
    "objectID": "2.3_mask_archive.html#maskarchive方法归档存储",
    "href": "2.3_mask_archive.html#maskarchive方法归档存储",
    "title": "多掩膜归档管理",
    "section": "5. MaskArchive方法：归档存储",
    "text": "5. MaskArchive方法：归档存储\n\n# 方法2: MaskArchive归档存储\nprint(\"\\n=== MaskArchive方法：归档存储 ===\")\nstart_time = time.time()\n\n# 创建归档并添加所有掩膜\narchive = MaskArchive(\"lung_analysis.mska\", mode=\"w\", space=space)\n\n# 添加各层级掩膜到归档\narchive.add_segmask(lobe_segmask, \"lobes\")\narchive.add_segmask(segment_segmask, \"segments\")\narchive.add_segmask(lesion_segmask, \"lesions\") \narchive.add_segmask(whole_lung_segmask, \"whole_lung\")\n\narchive_time = time.time() - start_time\narchive_size = Path(\"lung_analysis.mska\").stat().st_size\n\nprint(f\"创建时间: {archive_time:.3f}s\")\nprint(f\"文件数量: 1 个归档文件\")\nprint(f\"总大小: {archive_size / 1024:.1f} KB\")\nprint(f\"包含掩膜: {len(archive.all_names())} 个\")\nprint(f\"掩膜列表: {archive.all_names()}\")\n\n# 效率对比\nprint(f\"\\n=== 效率对比 ===\")\nprint(f\"文件管理: {len(independent_files)} 个独立文件 → 1 个归档文件\")\nprint(f\"存储大小: {total_size / 1024:.1f} KB → {archive_size / 1024:.1f} KB\")\nif total_size &gt; archive_size:\n    compression = total_size / archive_size\n    print(f\"存储优化: 压缩比 {compression:.1f}:1\")\n\n\n=== MaskArchive方法：归档存储 ===\n创建时间: 0.002s\n文件数量: 1 个归档文件\n总大小: 4.7 KB\n包含掩膜: 4 个\n掩膜列表: ['lobes', 'segments', 'lesions', 'whole_lung']\n\n=== 效率对比 ===\n文件管理: 4 个独立文件 → 1 个归档文件\n存储大小: 1.7 KB → 4.7 KB",
    "crumbs": [
      "首页",
      "MedMask",
      "多掩膜归档管理"
    ]
  },
  {
    "objectID": "2.3_mask_archive.html#归档访问与查询",
    "href": "2.3_mask_archive.html#归档访问与查询",
    "title": "多掩膜归档管理",
    "section": "6. 归档访问与查询",
    "text": "6. 归档访问与查询\n\n# 演示归档的访问功能\nprint(\"=== 归档访问演示 ===\")\n\n# 重新打开归档进行读取\nreader = MaskArchive(\"lung_analysis.mska\", mode=\"r\")\n\n# 查询可用掩膜\nprint(f\"归档中的掩膜: {reader.all_names()}\")\n\n# 单独加载特定掩膜\nprint(\"\\n单独访问掩膜:\")\nloaded_lobes = reader.load_segmask(\"lobes\")\nprint(f\"肺叶掩膜: {list(loaded_lobes.mapping.items())}\")\n\nloaded_lesions = reader.load_segmask(\"lesions\")  \nprint(f\"病灶掩膜: {list(loaded_lesions.mapping.items())}\")\n\n# 验证数据完整性\nprint(f\"\\n数据完整性验证:\")\nprint(f\"原始肺叶形状: {lobe_mask.shape}\")\nprint(f\"加载肺叶形状: {loaded_lobes.data.shape}\")\nprint(f\"数据一致性: {np.array_equal(lobe_mask, loaded_lobes.data)}\")\n\n# 演示语义查询 (基于加载的掩膜)\nleft_upper_lobe_mask = loaded_lobes.get_binary_mask_by_names(\"left_upper_lobe\")\nnodule_1_mask = loaded_lesions.get_binary_mask_by_names(\"nodule_1\")\nprint(f\"左上叶掩膜像素数: {np.sum(left_upper_lobe_mask)}\")\nprint(f\"病灶1掩膜像素数: {np.sum(nodule_1_mask)}\")\n\n=== 归档访问演示 ===\n归档中的掩膜: ['lobes', 'segments', 'lesions', 'whole_lung']\n\n单独访问掩膜:\n肺叶掩膜: [('left_upper_lobe', 1), ('left_lower_lobe', 2), ('right_upper_lobe', 3), ('right_middle_lobe', 4), ('right_lower_lobe', 5)]\n病灶掩膜: [('nodule_1', 1), ('nodule_2', 2), ('mass_1', 3)]\n\n数据完整性验证:\n原始肺叶形状: (1, 64, 64)\n加载肺叶形状: (1, 64, 64)\n数据一致性: True\n左上叶掩膜像素数: 300\n病灶1掩膜像素数: 25",
    "crumbs": [
      "首页",
      "MedMask",
      "多掩膜归档管理"
    ]
  },
  {
    "objectID": "2.3_mask_archive.html#使用建议",
    "href": "2.3_mask_archive.html#使用建议",
    "title": "多掩膜归档管理",
    "section": "7. 使用建议",
    "text": "7. 使用建议\n\n适用场景\n推荐使用 MaskArchive 的情况： - 需要管理大量相关掩膜（&gt;10个文件） - 所有掩膜共享相同的空间参考 - 需要简化文件传输和备份 - 追求存储空间优化\n继续使用独立文件的情况： - 掩膜数量较少（&lt;5个文件） - 不同掩膜有不同的空间参数 - 需要频繁单独修改特定掩膜 - 与现有工具链的兼容性考虑\n\n\n技术限制\n\n空间一致性要求：所有掩膜必须具有相同的 shape、spacing、origin\n名称唯一性：归档中每个掩膜必须有唯一的名称标识\n增量添加：支持动态添加新掩膜，但不支持删除现有掩膜",
    "crumbs": [
      "首页",
      "MedMask",
      "多掩膜归档管理"
    ]
  },
  {
    "objectID": "2.3_mask_archive.html#总结",
    "href": "2.3_mask_archive.html#总结",
    "title": "多掩膜归档管理",
    "section": "总结",
    "text": "总结\nMaskArchive 提供了一种简单有效的多掩膜管理方案。通过将相关的掩膜合并到单一归档文件中，它能够简化文件管理、优化存储空间，并为复杂的多层级掩膜组织提供技术支持。\n虽然不是革命性的功能，但在处理大量掩膜文件时，MaskArchive 确实能够带来实用的管理便利。选择使用归档还是独立文件，主要取决于具体的应用场景和文件管理需求。\n\n# 清理测试文件\nimport os\ncleanup_files = [\"lung_lobes.msk\", \"lung_segments.msk\", \"lung_lesions.msk\", \n                 \"whole_lung.msk\", \"lung_analysis.mska\"]\nfor f in cleanup_files:\n    if os.path.exists(f):\n        os.remove(f)\nprint(\"测试文件已清理\")\n\n测试文件已清理",
    "crumbs": [
      "首页",
      "MedMask",
      "多掩膜归档管理"
    ]
  },
  {
    "objectID": "1.1_vs_nifti.html",
    "href": "1.1_vs_nifti.html",
    "title": "与NIfTI格式对比",
    "section": "",
    "text": "NIfTI 格式作为神经影像研究领域的通用标准，极大地促进了学术交流与算法开发。然而，当试图将其应用于严谨的临床工作流时，其固有的设计缺陷便暴露无遗。本文将深入探讨 NIfTI 在实际临床应用中面临的三个核心挑战：坐标系统混乱、元数据大量丢失和压缩效率不足。\n这些问题并非孤立存在，而是在数据从临床影像设备（DICOM格式）转换到研究环境（NIfTI格式），再尝试回归临床系统（例如用于手术导航或存档）的完整生命周期中相互交织，构成了数据一致性和可追溯性的巨大障碍。\n让我们首先通过代码演示，直观地揭示这些问题的具体表现。\n\n\nNIfTI 格式最令人困惑的问题之一，是其空间坐标定义的不统一。使用不同的标准库读取同一个 NIfTI 文件，竟然会得到截然不同的空间定位结果。这种不一致性为后续的图像配准、融合以及定量分析埋下了巨大的隐患。\n\nimport nibabel as nib\nimport SimpleITK as sitk\nimport numpy as np\n\n# 测试数据\nnifti_file = \"dicube-testdata/nifti/CT_Philips.nii.gz\"\n\n# 使用两种广泛应用的库读取同一个NIfTI文件\nnib_image = nib.load(nifti_file)\nsitk_image = sitk.ReadImage(nifti_file)\n\nprint(f\"Nibabel Origin: {nib_image.affine[:3, 3]} (通常为 RAS+)\")\nprint(f\"SimpleITK Origin: {sitk_image.GetOrigin()} (严格为 LPS+)\")\nprint()\n\n# 提取并标准化X轴方向向量\nx_nib = nib_image.affine[:3, 0]\nx_nib /= np.linalg.norm(x_nib)\nprint(f\"Nibabel X Orientation: {x_nib}\")\nprint(f\"SimpleITK X Orientation: {np.array(sitk_image.GetDirection())[:3]}\")\nprint()\n\n# 提取并标准化Y轴方向向量\ny_nib = nib_image.affine[:3, 1]\ny_nib /= np.linalg.norm(y_nib)\nprint(f\"Nibabel Y Orientation: {y_nib}\")\nprint(f\"SimpleITK Y Orientation: {np.array(sitk_image.GetDirection())[3:6]}\")\nprint()\n\n# 提取并标准化Z轴方向向量\nz_nib = nib_image.affine[:3, 2]\nz_nib /= np.linalg.norm(z_nib)\nprint(f\"Nibabel Z Orientation: {z_nib}\")\nprint(f\"SimpleITK Z Orientation: {np.array(sitk_image.GetDirection())[6:9]}\")\n\nNibabel Origin: [ -82.32080078 -134.36405945 -153.72033691] (通常为 RAS+)\nSimpleITK Origin: (86.97265625, 229.64453125, 192.01113891601562) (严格为 LPS+)\n\nNibabel X Orientation: [1. 0. 0.]\nSimpleITK X Orientation: [-1.  0.  0.]\n\nNibabel Y Orientation: [0. 1. 0.]\nSimpleITK Y Orientation: [ 0. -1.  0.]\n\nNibabel Z Orientation: [0. 0. 1.]\nSimpleITK Z Orientation: [0. 0. 1.]\n\n\n从输出结果可以清晰地看到，对于图像原点（Origin）和方向（Orientation），nibabel 和 SimpleITK 的解析大相径庭。方向向量在 X 和 Y 轴上互为相反数，而原点的差异则毫无规律可循。这种混乱的根源在于 NIfTI 对坐标系统的双重定义以及不同社区的解读习惯。\n\n\n\n要理解上述差异，首先需要了解医学影像中两个主流的笛卡尔坐标系：LPS+ 和 RAS+。\n\nLPS+ (Left, Posterior, Superior)：这是 DICOM 标准以及放射科医生习惯使用的坐标系。\n\nX轴正方向：指向患者的左侧 (Left)。\nY轴正方向：指向患者的背侧 (Posterior)。\nZ轴正方向：指向患者的头顶 (Superior)。\n\nRAS+ (Right, Anterior, Superior)：这是神经影像分析领域（尤其是一些流行的软件包如 FSL, FreeSurfer）常用的坐标系。\n\nX轴正方向：指向患者的右侧 (Right)。\nY轴正方向：指向患者的腹侧 (Anterior)。\nZ轴正方向：同样指向患者的头顶 (Superior)。\n\n\n两者在Z轴上定义一致，但在X轴和Y轴上方向完全相反。这就是为什么我们在上面的代码输出中看到 X 和 Y 方向向量互为相反数。SimpleITK 严格遵循 DICOM 的 LPS+ 约定，而 nibabel 则更倾向于神经影像研究的 RAS+ 约定。\n\n\n\n仅仅是 LPS+ 和 RAS+ 的区别还不足以解释原点（Origin）的巨大差异。NIfTI 格式内部设计了两个独立的仿射变换矩阵来描述图像空间与世界空间的关系，这进一步加剧了混乱：\n\nqform (quaternion form)：主要用于记录图像相对于扫描仪设备坐标系的空间信息。它通常直接从原始 DICOM 头的 Image Position (Patient) 和 Image Orientation (Patient) 标签计算得来，反映的是图像采集时的物理位置和方向。\nsform (standard form)：主要用于记录图像对齐到某个标准空间模板（如 MNI 或 Talairach 脑模板）后的空间信息。这个矩阵通常是图像配准（registration）过程的产物。\n\n一个 NIfTI 文件可以同时包含 qform 和 sform，当两者不一致时，不同的读取库会根据自身的应用背景做出不同的选择：\n\n# 探查NIfTI文件内部的双重变换矩阵\nqform = nib_image.get_qform()\nsform = nib_image.get_sform()\n\nprint(f\"qform (源自扫描仪坐标):\")\nprint(np.round(qform, 3))\nprint(f\"\\nsform (对齐至标准空间):\")\nprint(np.round(sform, 3))\n\nqform (源自扫描仪坐标):\n[[   0.961    0.       0.     -86.973]\n [   0.       0.964    0.    -229.645]\n [   0.       0.       0.963  192.011]\n [   0.       0.       0.       1.   ]]\n\nsform (对齐至标准空间):\n[[   0.961    0.       0.     -82.321]\n [   0.       0.964    0.    -134.364]\n [   0.       0.       0.963 -153.72 ]\n [   0.       0.       0.       1.   ]]\n\n\n\nSimpleITK 的选择：遵循放射科和临床设备的惯例，优先使用 qform，因为它最忠实地反映了原始扫描信息。\nNibabel 的选择：遵循神经科学研究的惯例，优先使用 sform，因为它代表了数据在标准脑模板下的分析坐标。\n\n在我们的示例中，qform 和 sform 的平移分量（最后一列）相差甚远，这直接导致了 SimpleITK 和 nibabel 解读出的图像原点位置完全不同。这种依赖于“潜规则”的设计，使得 NIfTI 文件在跨平台、跨工具链使用时，极易发生空间定位错误。\n\n\n\n从 DICOM 转换为 NIfTI 的过程是“有损”的，但损失的并非像素数据，而是宝贵的元数据（Metadata）。DICOM 文件内嵌了数百个描述患者、检查、设备、序列参数等信息的标签，这些信息对于临床诊断、质量控制和法律追溯至关重要。\nNIfTI 格式的设计初衷是服务于匿名的图像算法研究，因此它几乎丢弃了所有与空间定位无关的元数据。\n\nimport pydicom\nimport os\n\n# 检查原始DICOM元数据\ndicom_dir = 'dicube-testdata/dicom/sample_200'\nfirst_slice_path = os.path.join(dicom_dir, sorted(os.listdir(dicom_dir))[0])\noriginal_dcm = pydicom.dcmread(first_slice_path)\n\nprint(f\"原始DICOM元数据字段数: {len(original_dcm)}\")\nprint(f\"患者ID (PatientID): {original_dcm.get('PatientID', 'N/A')}\")\nprint(f\"检查日期 (StudyDate): {original_dcm.get('StudyDate', 'N/A')}\")\nprint(f\"设备制造商 (Manufacturer): {original_dcm.get('Manufacturer', 'N/A')}\")\nprint(f\"窗宽/窗位 (Window Width/Center): {original_dcm.get('WindowWidth', 'N/A')} / {original_dcm.get('WindowCenter', 'N/A')}\")\n\n# NIfTI文件几乎不包含这些信息\n# NIfTI header can be accessed via nib_image.header, but it lacks most clinical metadata.\nprint(f\"\\nNIfTI格式仅保留了图像尺寸、像素间距、原点和方向等基本空间信息。\")\n\n原始DICOM元数据字段数: 196\n患者ID (PatientID): ID12345\n检查日期 (StudyDate): 20230720\n设备制造商 (Manufacturer): Philips\n窗宽/窗位 (Window Width/Center): [750, 750] / [90, 90]\n\nNIfTI格式仅保留了图像尺寸、像素间距、原点和方向等基本空间信息。\n\n\n这种元数据的“蒸发”意味着，一旦数据被转换为 NIfTI，它就与原始的临床情境脱钩。我们无法知道这个图像属于哪位患者、何时检查、由哪台设备扫描、扫描参数是什么。这使得 NIfTI 文件无法被直接用于临床生产环境或作为合规的医疗数据存档。\n\n\n\n为了节省存储空间，NIfTI 文件通常使用 .nii.gz 的扩展名，即采用 gzip 进行压缩。Gzip 是一种通用的、无损的压缩算法，但它并非为医学影像这类具有高度空间相关性的数据而优化。因此，其压缩比通常相当有限。\n\nimport os\n\n# 对比原始DICOM和NIfTI格式的存储大小\ndicom_size = sum(os.path.getsize(os.path.join(dicom_dir, f)) \n                 for f in os.listdir(dicom_dir))\nnifti_file2 = 'dicube-testdata/sample_200.nii.gz'\n\n# SimpleITK读取DICOM序列\nseries_reader = sitk.ImageSeriesReader()\ndicom_names = series_reader.GetGDCMSeriesFileNames(dicom_dir)\nseries_reader.SetFileNames(dicom_names)\nsitk_image_from_dicom = series_reader.Execute()\nsitk.WriteImage(sitk_image_from_dicom, nifti_file2)\nnifti_size = os.path.getsize(nifti_file2)\n\nprint(f\"原始DICOM文件夹总大小: {dicom_size / 1024 / 1024:.2f} MB\")\nprint(f\"NIfTI (gzip压缩后)大小: {nifti_size / 1024 / 1024:.2f} MB\")\nprint(f\"压缩比: {dicom_size / nifti_size:.2f}x\")\n\n原始DICOM文件夹总大小: 102.23 MB\nNIfTI (gzip压缩后)大小: 53.42 MB\n压缩比: 1.91x\n\n\n通常，gzip 只能提供约 2 倍的压缩率，这对于动辄数百兆甚至上G的影像数据而言，存储和传输效率仍然不高。",
    "crumbs": [
      "首页",
      "DiCube",
      "与NIfTI格式对比"
    ]
  },
  {
    "objectID": "1.1_vs_nifti.html#问题描述nifti在临床应用中的核心挑战",
    "href": "1.1_vs_nifti.html#问题描述nifti在临床应用中的核心挑战",
    "title": "与NIfTI格式对比",
    "section": "",
    "text": "NIfTI 格式作为神经影像研究领域的通用标准，极大地促进了学术交流与算法开发。然而，当试图将其应用于严谨的临床工作流时，其固有的设计缺陷便暴露无遗。本文将深入探讨 NIfTI 在实际临床应用中面临的三个核心挑战：坐标系统混乱、元数据大量丢失和压缩效率不足。\n这些问题并非孤立存在，而是在数据从临床影像设备（DICOM格式）转换到研究环境（NIfTI格式），再尝试回归临床系统（例如用于手术导航或存档）的完整生命周期中相互交织，构成了数据一致性和可追溯性的巨大障碍。\n让我们首先通过代码演示，直观地揭示这些问题的具体表现。\n\n\nNIfTI 格式最令人困惑的问题之一，是其空间坐标定义的不统一。使用不同的标准库读取同一个 NIfTI 文件，竟然会得到截然不同的空间定位结果。这种不一致性为后续的图像配准、融合以及定量分析埋下了巨大的隐患。\n\nimport nibabel as nib\nimport SimpleITK as sitk\nimport numpy as np\n\n# 测试数据\nnifti_file = \"dicube-testdata/nifti/CT_Philips.nii.gz\"\n\n# 使用两种广泛应用的库读取同一个NIfTI文件\nnib_image = nib.load(nifti_file)\nsitk_image = sitk.ReadImage(nifti_file)\n\nprint(f\"Nibabel Origin: {nib_image.affine[:3, 3]} (通常为 RAS+)\")\nprint(f\"SimpleITK Origin: {sitk_image.GetOrigin()} (严格为 LPS+)\")\nprint()\n\n# 提取并标准化X轴方向向量\nx_nib = nib_image.affine[:3, 0]\nx_nib /= np.linalg.norm(x_nib)\nprint(f\"Nibabel X Orientation: {x_nib}\")\nprint(f\"SimpleITK X Orientation: {np.array(sitk_image.GetDirection())[:3]}\")\nprint()\n\n# 提取并标准化Y轴方向向量\ny_nib = nib_image.affine[:3, 1]\ny_nib /= np.linalg.norm(y_nib)\nprint(f\"Nibabel Y Orientation: {y_nib}\")\nprint(f\"SimpleITK Y Orientation: {np.array(sitk_image.GetDirection())[3:6]}\")\nprint()\n\n# 提取并标准化Z轴方向向量\nz_nib = nib_image.affine[:3, 2]\nz_nib /= np.linalg.norm(z_nib)\nprint(f\"Nibabel Z Orientation: {z_nib}\")\nprint(f\"SimpleITK Z Orientation: {np.array(sitk_image.GetDirection())[6:9]}\")\n\nNibabel Origin: [ -82.32080078 -134.36405945 -153.72033691] (通常为 RAS+)\nSimpleITK Origin: (86.97265625, 229.64453125, 192.01113891601562) (严格为 LPS+)\n\nNibabel X Orientation: [1. 0. 0.]\nSimpleITK X Orientation: [-1.  0.  0.]\n\nNibabel Y Orientation: [0. 1. 0.]\nSimpleITK Y Orientation: [ 0. -1.  0.]\n\nNibabel Z Orientation: [0. 0. 1.]\nSimpleITK Z Orientation: [0. 0. 1.]\n\n\n从输出结果可以清晰地看到，对于图像原点（Origin）和方向（Orientation），nibabel 和 SimpleITK 的解析大相径庭。方向向量在 X 和 Y 轴上互为相反数，而原点的差异则毫无规律可循。这种混乱的根源在于 NIfTI 对坐标系统的双重定义以及不同社区的解读习惯。\n\n\n\n要理解上述差异，首先需要了解医学影像中两个主流的笛卡尔坐标系：LPS+ 和 RAS+。\n\nLPS+ (Left, Posterior, Superior)：这是 DICOM 标准以及放射科医生习惯使用的坐标系。\n\nX轴正方向：指向患者的左侧 (Left)。\nY轴正方向：指向患者的背侧 (Posterior)。\nZ轴正方向：指向患者的头顶 (Superior)。\n\nRAS+ (Right, Anterior, Superior)：这是神经影像分析领域（尤其是一些流行的软件包如 FSL, FreeSurfer）常用的坐标系。\n\nX轴正方向：指向患者的右侧 (Right)。\nY轴正方向：指向患者的腹侧 (Anterior)。\nZ轴正方向：同样指向患者的头顶 (Superior)。\n\n\n两者在Z轴上定义一致，但在X轴和Y轴上方向完全相反。这就是为什么我们在上面的代码输出中看到 X 和 Y 方向向量互为相反数。SimpleITK 严格遵循 DICOM 的 LPS+ 约定，而 nibabel 则更倾向于神经影像研究的 RAS+ 约定。\n\n\n\n仅仅是 LPS+ 和 RAS+ 的区别还不足以解释原点（Origin）的巨大差异。NIfTI 格式内部设计了两个独立的仿射变换矩阵来描述图像空间与世界空间的关系，这进一步加剧了混乱：\n\nqform (quaternion form)：主要用于记录图像相对于扫描仪设备坐标系的空间信息。它通常直接从原始 DICOM 头的 Image Position (Patient) 和 Image Orientation (Patient) 标签计算得来，反映的是图像采集时的物理位置和方向。\nsform (standard form)：主要用于记录图像对齐到某个标准空间模板（如 MNI 或 Talairach 脑模板）后的空间信息。这个矩阵通常是图像配准（registration）过程的产物。\n\n一个 NIfTI 文件可以同时包含 qform 和 sform，当两者不一致时，不同的读取库会根据自身的应用背景做出不同的选择：\n\n# 探查NIfTI文件内部的双重变换矩阵\nqform = nib_image.get_qform()\nsform = nib_image.get_sform()\n\nprint(f\"qform (源自扫描仪坐标):\")\nprint(np.round(qform, 3))\nprint(f\"\\nsform (对齐至标准空间):\")\nprint(np.round(sform, 3))\n\nqform (源自扫描仪坐标):\n[[   0.961    0.       0.     -86.973]\n [   0.       0.964    0.    -229.645]\n [   0.       0.       0.963  192.011]\n [   0.       0.       0.       1.   ]]\n\nsform (对齐至标准空间):\n[[   0.961    0.       0.     -82.321]\n [   0.       0.964    0.    -134.364]\n [   0.       0.       0.963 -153.72 ]\n [   0.       0.       0.       1.   ]]\n\n\n\nSimpleITK 的选择：遵循放射科和临床设备的惯例，优先使用 qform，因为它最忠实地反映了原始扫描信息。\nNibabel 的选择：遵循神经科学研究的惯例，优先使用 sform，因为它代表了数据在标准脑模板下的分析坐标。\n\n在我们的示例中，qform 和 sform 的平移分量（最后一列）相差甚远，这直接导致了 SimpleITK 和 nibabel 解读出的图像原点位置完全不同。这种依赖于“潜规则”的设计，使得 NIfTI 文件在跨平台、跨工具链使用时，极易发生空间定位错误。\n\n\n\n从 DICOM 转换为 NIfTI 的过程是“有损”的，但损失的并非像素数据，而是宝贵的元数据（Metadata）。DICOM 文件内嵌了数百个描述患者、检查、设备、序列参数等信息的标签，这些信息对于临床诊断、质量控制和法律追溯至关重要。\nNIfTI 格式的设计初衷是服务于匿名的图像算法研究，因此它几乎丢弃了所有与空间定位无关的元数据。\n\nimport pydicom\nimport os\n\n# 检查原始DICOM元数据\ndicom_dir = 'dicube-testdata/dicom/sample_200'\nfirst_slice_path = os.path.join(dicom_dir, sorted(os.listdir(dicom_dir))[0])\noriginal_dcm = pydicom.dcmread(first_slice_path)\n\nprint(f\"原始DICOM元数据字段数: {len(original_dcm)}\")\nprint(f\"患者ID (PatientID): {original_dcm.get('PatientID', 'N/A')}\")\nprint(f\"检查日期 (StudyDate): {original_dcm.get('StudyDate', 'N/A')}\")\nprint(f\"设备制造商 (Manufacturer): {original_dcm.get('Manufacturer', 'N/A')}\")\nprint(f\"窗宽/窗位 (Window Width/Center): {original_dcm.get('WindowWidth', 'N/A')} / {original_dcm.get('WindowCenter', 'N/A')}\")\n\n# NIfTI文件几乎不包含这些信息\n# NIfTI header can be accessed via nib_image.header, but it lacks most clinical metadata.\nprint(f\"\\nNIfTI格式仅保留了图像尺寸、像素间距、原点和方向等基本空间信息。\")\n\n原始DICOM元数据字段数: 196\n患者ID (PatientID): ID12345\n检查日期 (StudyDate): 20230720\n设备制造商 (Manufacturer): Philips\n窗宽/窗位 (Window Width/Center): [750, 750] / [90, 90]\n\nNIfTI格式仅保留了图像尺寸、像素间距、原点和方向等基本空间信息。\n\n\n这种元数据的“蒸发”意味着，一旦数据被转换为 NIfTI，它就与原始的临床情境脱钩。我们无法知道这个图像属于哪位患者、何时检查、由哪台设备扫描、扫描参数是什么。这使得 NIfTI 文件无法被直接用于临床生产环境或作为合规的医疗数据存档。\n\n\n\n为了节省存储空间，NIfTI 文件通常使用 .nii.gz 的扩展名，即采用 gzip 进行压缩。Gzip 是一种通用的、无损的压缩算法，但它并非为医学影像这类具有高度空间相关性的数据而优化。因此，其压缩比通常相当有限。\n\nimport os\n\n# 对比原始DICOM和NIfTI格式的存储大小\ndicom_size = sum(os.path.getsize(os.path.join(dicom_dir, f)) \n                 for f in os.listdir(dicom_dir))\nnifti_file2 = 'dicube-testdata/sample_200.nii.gz'\n\n# SimpleITK读取DICOM序列\nseries_reader = sitk.ImageSeriesReader()\ndicom_names = series_reader.GetGDCMSeriesFileNames(dicom_dir)\nseries_reader.SetFileNames(dicom_names)\nsitk_image_from_dicom = series_reader.Execute()\nsitk.WriteImage(sitk_image_from_dicom, nifti_file2)\nnifti_size = os.path.getsize(nifti_file2)\n\nprint(f\"原始DICOM文件夹总大小: {dicom_size / 1024 / 1024:.2f} MB\")\nprint(f\"NIfTI (gzip压缩后)大小: {nifti_size / 1024 / 1024:.2f} MB\")\nprint(f\"压缩比: {dicom_size / nifti_size:.2f}x\")\n\n原始DICOM文件夹总大小: 102.23 MB\nNIfTI (gzip压缩后)大小: 53.42 MB\n压缩比: 1.91x\n\n\n通常，gzip 只能提供约 2 倍的压缩率，这对于动辄数百兆甚至上G的影像数据而言，存储和传输效率仍然不高。",
    "crumbs": [
      "首页",
      "DiCube",
      "与NIfTI格式对比"
    ]
  },
  {
    "objectID": "1.1_vs_nifti.html#dicube的解决方案专为临床与研究一体化设计",
    "href": "1.1_vs_nifti.html#dicube的解决方案专为临床与研究一体化设计",
    "title": "与NIfTI格式对比",
    "section": "2. DiCube的解决方案：专为临床与研究一体化设计",
    "text": "2. DiCube的解决方案：专为临床与研究一体化设计\nDiCube 格式的设计目标非常明确：在保留 NIfTI 单文件、易于处理的优点的同时，从根本上解决其在临床应用中的三大核心缺陷。\n\n2.1. 统一且明确的坐标系统：坚守LPS+标准\nDiCube 彻底摒弃了 NIfTI 模棱两可的双重坐标定义，统一采用 DICOM 标准的 LPS+ 坐标系。这确保了从 DICOM 到 DiCube 的转换过程中，空间信息得到精确、无歧义的保留，保证了与 PACS 系统和各类医学影像软件的无缝对接。\n让我们将 DiCube、SimpleITK（读取DICOM）和 Nibabel（读取NIfTI）的处理结果进行直接对比：\n\nimport dicube\n\n\n# DiCube读取DICOM序列\ndcb_image = dicube.load_from_dicom_folder(dicom_dir, sort_method=dicube.SortMethod.POSITION_RIGHT_HAND)\n\n# Nibabel读取NIfTI\nnib_nifti = nib.load(nifti_file2)\n\nprint(\"--- 坐标系统原点对比 ---\")\nprint(f\"SimpleITK (从DICOM): {np.round(sitk_image_from_dicom.GetOrigin(), 3)} (LPS+)\")\nprint(f\"DiCube      (从DICOM): {np.round(dcb_image.space.origin, 3)} (LPS+)\")\nprint(f\"Nibabel     (从NIfTI): {np.round(nib_nifti.affine[:3, 3], 3)} (RAS+)\")\nprint(f\"\\n结论：DiCube与SimpleITK对原始DICOM的解读完全一致: {np.allclose(dcb_image.space.origin, sitk_image_from_dicom.GetOrigin())}\")\n\n--- 坐标系统原点对比 ---\nSimpleITK (从DICOM): [-102.08  -31.26 1282.2 ] (LPS+)\nDiCube      (从DICOM): [-102.08  -31.26 1282.2 ] (LPS+)\nNibabel     (从NIfTI): [ 102.08   31.26 1282.2 ] (RAS+)\n\n结论：DiCube与SimpleITK对原始DICOM的解读完全一致: True\n\n\n结果一目了然：DiCube 的解析结果与同样遵循 DICOM 标准的 SimpleITK 完全一致，从源头上消除了坐标系统的混乱。\n\n\n2.2. 完整的元数据保留与往返能力\nDiCube 的核心特性之一是实现了 DICOM 元数据的无损往返（Lossless Round-trip）。它将原始 DICOM 文件中的所有元数据（包括私有标签）完整地封装在 DiCube 文件内部。这意味着，你可以随时从 DiCube 文件中恢复出与原始文件一模一样的 DICOM 序列。\n\n# 将DiCube对象保存为.dcbs文件，然后再转换回DICOM文件夹\ndicube.save(dcb_image, 'dicube-testdata/test.dcbs')\ndicube.save_to_dicom_folder(dcb_image, 'dicube-testdata/roundtrip_test')\n\n# 验证往返转换后元数据的完整性\nroundtrip_slice_path = os.path.join('dicube-testdata/roundtrip_test', 'slice_0000.dcm')\nroundtrip_dcm = pydicom.dcmread(roundtrip_slice_path)\n\nprint(f\"原始DICOM字段数: {len(original_dcm)}\")\nprint(f\"往返恢复后字段数: {len(roundtrip_dcm)}\")\nprint(f\"元数据保留率: {len(roundtrip_dcm) / len(original_dcm) * 100:.1f}%\")\nprint(\"\\n--- 关键临床字段一致性校验 ---\")\n\n# 验证关键字段是否完全一致\nkey_fields = ['PatientID', 'StudyDate', 'Manufacturer', 'WindowWidth', 'WindowCenter']\nfor field in key_fields:\n    original_value = original_dcm.get(field)\n    roundtrip_value = roundtrip_dcm.get(field)\n    match = \"✓\" if original_value == roundtrip_value else \"✗\"\n    print(f\"字段'{field}': {match} (原始: {original_value}, 恢复后: {roundtrip_value})\")\n\n原始DICOM字段数: 196\n往返恢复后字段数: 196\n元数据保留率: 100.0%\n\n--- 关键临床字段一致性校验 ---\n字段'PatientID': ✓ (原始: ID12345, 恢复后: ID12345)\n字段'StudyDate': ✓ (原始: 20230720, 恢复后: 20230720)\n字段'Manufacturer': ✓ (原始: Philips, 恢复后: Philips)\n字段'WindowWidth': ✓ (原始: [750, 750], 恢复后: [750.0, 750.0])\n字段'WindowCenter': ✓ (原始: [90, 90], 恢复后: [90.0, 90.0])\n\n\n近乎 100% 的元数据保留率证明了 DiCube 具备在临床环境中安全流转的能力，数据始终保持其完整性和可追溯性。\n\n\n2.3. 高效的现代医学影像压缩：HTJ2K\nDiCube 采用 High-Throughput JPEG 2000 (HTJ2K) 作为其核心压缩算法。HTJ2K 是 DICOM 标准的官方组成部分（见 DICOM Standard Part 5），专为高性能医学影像应用设计，其优势远超传统的 gzip：\n\n更高的压缩比：针对医学影像的特征进行优化，通常可提供 5-15 倍甚至更高的无损压缩率。\n性能卓越：利用现代多核 CPU 架构，编解码速度极快。\n标准兼容：作为 DICOM 标准的一部分，确保了长期的兼容性和互操作性。\n\n\n\n# 压缩效果对比\ndcb_size = os.path.getsize('dicube-testdata/test.dcbs')\n\nprint(\"--- 压缩效率对比 ---\")\nprint(f\"原始DICOM:      {dicom_size / 1024 / 1024:.2f} MB\")\nprint(f\"NIfTI (gzip):   {nifti_size / 1024 / 1024:.2f} MB (压缩比: {dicom_size / nifti_size:.2f}x)\")\nprint(f\"DiCube (HTJ2K): {dcb_size / 1024 / 1024:.2f} MB (压缩比: {dicom_size / dcb_size:.2f}x)\")\nprint(f\"\\nDiCube相比NIfTI，文件体积减小了: {(1 - dcb_size / nifti_size) * 100:.1f}%\")\n\n--- 压缩效率对比 ---\n原始DICOM:      102.23 MB\nNIfTI (gzip):   53.42 MB (压缩比: 1.91x)\nDiCube (HTJ2K): 29.03 MB (压缩比: 3.52x)\n\nDiCube相比NIfTI，文件体积减小了: 45.7%\n\n\n显著的压缩效率提升意味着更低的存储成本和更快的网络传输速度。\n\n\n2.4. 优化的I/O性能\n除了压缩率，DiCube 的文件结构和 HTJ2K 解码器也为快速读取进行了优化。在大部分场景下，加载 DiCube 文件比加载 gzip 压缩的 NIfTI 文件更快。\n\nimport time\n\n# 性能对比测试\nstart_time = time.time()\nnifti_loaded = sitk.ReadImage(nifti_file2)\nnifti_time = time.time() - start_time\n\nstart_time = time.time()\ndcb_loaded = dicube.load('dicube-testdata/test.dcbs')\ndcb_time = time.time() - start_time\n\nprint(f\"NIfTI (.nii.gz) 加载耗时: {nifti_time * 1000:.0f} ms\")\nprint(f\"DiCube (.dcbs) 加载耗时: {dcb_time * 1000:.0f} ms\")\n\nif dcb_time &lt; nifti_time:\n    print(f\"DiCube 加载性能提升: {(nifti_time / dcb_time - 1) * 100:.0f}%\")\nelse:\n    print(\"NIfTI 在此测试中加载更快。\")\n\nNIfTI (.nii.gz) 加载耗时: 566 ms\nDiCube (.dcbs) 加载耗时: 149 ms\nDiCube 加载性能提升: 280%\n\n\n更快的加载速度对于交互式应用和大规模数据处理流水线都至关重要。\n\n# 清理测试生成的文件和文件夹\nimport shutil\n\ncleanup_files = ['dicube-testdata/test.dcbs','dicube-testdata/sample_200.nii.gz']\ncleanup_dirs = ['dicube-testdata/roundtrip_test']\n\nfor f in cleanup_files:\n    if os.path.exists(f):\n        os.remove(f)\nfor d in cleanup_dirs:\n    if os.path.exists(d):\n        shutil.rmtree(d)",
    "crumbs": [
      "首页",
      "DiCube",
      "与NIfTI格式对比"
    ]
  },
  {
    "objectID": "1.1_vs_nifti.html#总结对比",
    "href": "1.1_vs_nifti.html#总结对比",
    "title": "与NIfTI格式对比",
    "section": "3. 总结对比",
    "text": "3. 总结对比\nDiCube 通过系统性的设计，精准地解决了 NIfTI 在临床转化应用中的核心痛点。\n\n\n\n\n\n\n\n\n特性\nNIfTI 的问题\nDiCube 的解决方案\n\n\n\n\n坐标系统\nLPS+/RAS+ 混用，qform/sform 导致歧义\n统一并强制使用 DICOM 标准的 LPS+ 坐标系\n\n\n元数据保留\n转换时丢失几乎所有临床元数据（&gt;95%）\n100% 无损保留，支持完整的 DICOM 往返转换\n\n\n压缩效率\n通用 gzip 算法，压缩比有限 (约 2-4x)\n专用的 HTJ2K 算法，压缩比更高 (通常 5-15x)\n\n\nDICOM 兼容性\n单向、有损转换，无法恢复原始 DICOM\n双向、无损转换，是临床数据的安全容器\n\n\n生态与性能\n依赖外部库的解释，I/O 性能受 gzip 限制\n内置高性能解码器，提供明确一致的编程接口\n\n\n\n结论： NIfTI 仍然是纯粹算法研究和学术数据共享的有效格式。然而，对于任何需要确保数据完整性、可追溯性并计划与临床工作流对接的应用场景，DiCube 提供了一个更安全、高效和可靠的现代化解决方案。它真正弥合了研究的灵活性与临床的严谨性之间的鸿沟。",
    "crumbs": [
      "首页",
      "DiCube",
      "与NIfTI格式对比"
    ]
  },
  {
    "objectID": "2.0_mask.html",
    "href": "2.0_mask.html",
    "title": "掩膜存储痛点分析",
    "section": "",
    "text": "在前一章节中，我们探讨了 DiCube 如何解决原始 DICOM 图像的存储与管理问题。本章将聚焦于医学影像分析流程中的另一个关键环节：分割掩膜（Segmentation Masks）的存储与管理。\n分割掩膜是AI模型分析结果的直接体现，是后续进行量化计算、手术规划和疗效评估的数据基础。然而，当前行业内通用的存储方案（如 .npz 和 .nii.gz）是为通用数据场景设计的，并未针对医学掩膜的特性进行优化，由此引发了四项核心的技术挑战，对研发效率和系统稳健性构成了制约。",
    "crumbs": [
      "首页",
      "MedMask",
      "掩膜存储痛点分析"
    ]
  },
  {
    "objectID": "2.0_mask.html#挑战一空间参考信息的缺失与不一致",
    "href": "2.0_mask.html#挑战一空间参考信息的缺失与不一致",
    "title": "掩膜存储痛点分析",
    "section": "挑战一：空间参考信息的缺失与不一致",
    "text": "挑战一：空间参考信息的缺失与不一致\n精确的空间定位是所有医学图像分析的先决条件。如果分割结果无法与其对应的原始图像在空间上精确对齐，其价值将大打折扣。现有掩膜格式在此方面存在明显不足。\n\nNPZ格式：缺乏空间参考信息\nNPZ 是 NumPy 数组的压缩存档格式，其设计目标是存储纯粹的数组数据，因此不包含任何空间参考信息，如图像原点（Origin）、像素间距（Spacing）和方向（Direction）。当掩膜被存为 NPZ 文件时，它便成为一个与原始图像物理空间完全分离的独立数组。\n这导致了一个实际问题：对于一个仅包含微小病灶分割结果的掩膜，如果用NPZ存储，不仅可能需要存储一个与原始图像等大的稀疏数组（效率低下），而且后续无法通过文件自身信息将其自动、精确地叠加回原始CT图像上，需要额外的、手动的参数进行对齐。\n\n\nNIfTI格式：坐标系统的不兼容\nNIfTI 格式虽然保留了空间信息，但其生态系统普遍采用的 RAS+ 坐标系与医学影像的 DICOM 标准所规定的 LPS+ 坐标系存在根本性差异（X、Y轴方向相反）。这种不一致性带来了潜在的风险：\n\n增加处理复杂性：在将 NIfTI 掩膜与 DICOM 图像对齐时，必须执行额外的坐标系转换步骤，增加了数据处理流程的复杂性。\n潜在的对齐错误：坐标转换过程容易引入错误，尤其是在复杂的处理流程中，可能导致左右器官识别错误等问题。\n增加开发认知负荷：团队成员必须持续关注并处理这种坐标系差异，增加了软件开发和维护的难度。",
    "crumbs": [
      "首页",
      "MedMask",
      "掩膜存储痛点分析"
    ]
  },
  {
    "objectID": "2.0_mask.html#挑战二语义信息的外部依赖管理",
    "href": "2.0_mask.html#挑战二语义信息的外部依赖管理",
    "title": "掩膜存储痛点分析",
    "section": "挑战二：语义信息的外部依赖管理",
    "text": "挑战二：语义信息的外部依赖管理\n分割掩膜不仅定义了目标的空间位置，还需定义其语义类别（例如，这是哪个器官）。现有格式缺乏内置的、标准化的语义信息管理机制，导致标签的定义必须在文件外部进行管理。\n\n# 传统方法：通过外部代码或配置文件关联像素值与语义\norgan_mapping = {\n    1: \"liver\",\n    2: \"kidney_left\", \n    3: \"kidney_right\",\n    4: \"spleen\",\n    # ...\n}\n\n这种将语义信息与像素数据分离的管理模式，在实际工程中会带来一系列挑战：\n\n数据不自洽：掩膜文件本身不包含自我描述信息，其内容的解释依赖于外部的配置文件、数据库或硬编码。\n同步困难：在多团队协作中（如标注、算法、前后端），对标签值的理解必须通过外部文档进行同步，容易造成不一致。\n版本管理复杂：当标签定义需要更新时（如增减类别），需要协调修改所有相关的外部配置文件和代码库，增加了版本控制的复杂性。",
    "crumbs": [
      "首页",
      "MedMask",
      "掩膜存储痛点分析"
    ]
  },
  {
    "objectID": "2.0_mask.html#挑战三针对稀疏数据的压缩效率不足",
    "href": "2.0_mask.html#挑战三针对稀疏数据的压缩效率不足",
    "title": "掩膜存储痛点分析",
    "section": "挑战三：针对稀疏数据的压缩效率不足",
    "text": "挑战三：针对稀疏数据的压缩效率不足\n医学分割掩膜是典型的高度稀疏数据，通常超过99%的像素为背景值（0）。通用压缩算法未能有效利用这一特性，导致压缩效率不理想。\n\n通用算法的局限性：Gzip 等基于 LZ77 的算法主要通过查找重复字节序列进行压缩，虽然能处理连续的零，但其效率不如为稀疏数据优化的特定算法（如游程编码 RLE）。\n忽略空间相关性：掩膜中的目标区域通常是具有空间连续性的团块，这一特征也未被通用压缩算法充分利用。\n\n其结果是，尽管文件经过压缩，但存储体积仍有很大的优化空间，这会增加存储成本和网络传输时间。",
    "crumbs": [
      "首页",
      "MedMask",
      "掩膜存储痛点分析"
    ]
  },
  {
    "objectID": "2.0_mask.html#挑战四无法统一处理重叠与互斥的分割目标",
    "href": "2.0_mask.html#挑战四无法统一处理重叠与互斥的分割目标",
    "title": "掩膜存储痛点分析",
    "section": "挑战四：无法统一处理重叠与互斥的分割目标",
    "text": "挑战四：无法统一处理重叠与互斥的分割目标\n这是医学分割应用中一个普遍且复杂的需求。在临床场景中，往往需要同时表示相互排斥的（mutually exclusive）和可重叠的（overlapping）目标。\n以肺部分割为例：\n\n肺叶：5个标签，彼此互不重叠。\n肺段：18个标签，彼此也互不重叠，但是与肺叶重叠。\n病灶：N个标签，可能与肺叶、肺段及其他病灶重叠。\n整体肺：1个标签，与上述所有结构重叠。\n\n使用标准的数组结构来存储这种混合关系，会面临一个根本性的设计权衡。\n\n方法1：数值标签掩膜（Value-based Mask）\n每个像素存储一个整数，代表其所属的单一类别。\n优点：存储效率高，一个 uint8 数组即可表示多达255个互斥类别。 缺点：设计上无法表示重叠。一个像素只能属于一个类别。\n\nimport numpy as np\n# 示例：构建互不重叠的肺叶掩膜\nlung_lobe_mask = np.zeros((64, 256, 256), dtype=np.uint8)\nlung_lobe_mask[10:30, 50:150, 60:160] = 1  # 左上叶\nlung_lobe_mask[30:50, 50:150, 60:160] = 2  # 左下叶\n\nprint(f\"存储的标签: {np.unique(lung_lobe_mask)}\")\nprint(f\"数据类型: {lung_lobe_mask.dtype}, 支持 {np.iinfo(lung_lobe_mask.dtype).max} 个互斥类别\")\n\n存储的标签: [0 1 2]\n数据类型: uint8, 支持 255 个互斥类别\n\n\n局限性：无法在同一数组中表示一个跨越区域 1 和 2 的病灶，因为赋值会覆盖已有的肺叶信息。\n\n\n方法2：位掩膜（Bitmask）\n使用二进制的每一位（bit）代表一个目标。\n优点：通过按位或（OR）运算，允许一个像素同时属于多个类别。 缺点：可表示的目标数量有硬性上限，存储效率较低。\n\n# 示例：使用位掩膜表示重叠\nbit_mask = np.zeros((64, 256, 256), dtype=np.uint8)\n\n# 第0位代表左上叶\nleft_upper_lobe = np.zeros_like(bit_mask); left_upper_lobe[10:30, 50:150, 60:160] = 1\nbit_mask |= (left_upper_lobe &lt;&lt; 0)\n\n# 第2位代表一个重叠的病灶\nlesion = np.zeros_like(bit_mask); lesion[15:35, 60:140, 70:150] = 1\nbit_mask |= (lesion &lt;&lt; 2)\n\nprint(f\"最大可表示的重叠结构数: {bit_mask.dtype.itemsize * 8}\")\n\n最大可表示的重叠结构数: 8\n\n\n局限性：一个 uint8 数组最多支持 8 个可重叠目标，uint64 也仅支持 64 个。这对于需要分割上百个解剖结构（如 TotalSegmentator 数据集）的复杂任务是远远不够的。\n\n\n实际工程中的管理复杂性\n由于上述底层数据结构的限制，目前处理复杂分割任务的普遍做法是：为每个分割目标存储一个独立的掩膜文件。\n\nimport os\nfrom pathlib import Path\n\n# 检查一个全身分割病例的文件存储情况\nmask_dir = 'dicube-testdata/mask/s0000'\nmask_files = list(Path(mask_dir).glob('*.nii.gz'))\n\nprint(f\"单个病例的分割结果包含: {len(mask_files)} 个独立的 .nii.gz 文件\")\nprint(f\"文件总大小: {sum(os.path.getsize(f) for f in mask_files) / 1024 / 1024:.2f} MB\")\n\n单个病例的分割结果包含: 117 个独立的 .nii.gz 文件\n文件总大小: 5.12 MB\n\n\n这种“一个目标一文件”的模式，导致了数据管理的碎片化，给数据存储、传输和下游处理带来了显著的复杂性。",
    "crumbs": [
      "首页",
      "MedMask",
      "掩膜存储痛点分析"
    ]
  },
  {
    "objectID": "2.0_mask.html#总结",
    "href": "2.0_mask.html#总结",
    "title": "掩膜存储痛点分析",
    "section": "总结",
    "text": "总结\n综上所述，当前通用的分割掩膜存储方法在面对现代医学影像分析的需求时，存在四项相互关联的技术挑战。\n\n\n\n\n\n\n\n\n挑战领域\n技术表现\n对工程实践的影响\n\n\n\n\n空间参考\nNPZ丢失信息，NIfTI坐标系不一致\n增加数据对齐的复杂度和出错风险\n\n\n语义管理\n语义与像素分离，依赖外部管理\n降低数据自洽性，增加多团队协同和版本控制的难度\n\n\n压缩效率\n通用算法未充分利用数据稀疏性\n导致不必要的存储和网络开销，影响I/O性能\n\n\n重叠与互斥\n标准数组结构无法兼顾，导致文件碎片化\n迫使采用复杂的、低效的数据管理和组织方式\n\n\n\n在下一章节中，我们将介绍 MedMask，这是一个专门为医学图像分割掩膜设计的解决方案。我们将详细阐述其如何通过创新的分层式架构和优化的数据结构，来系统性地应对上述挑战。",
    "crumbs": [
      "首页",
      "MedMask",
      "掩膜存储痛点分析"
    ]
  },
  {
    "objectID": "1.3_dicom_status.html",
    "href": "1.3_dicom_status.html",
    "title": "DICOM序列状态",
    "section": "",
    "text": "DiCube主要为静态三维医学图像服务，其核心假设是整个3D图像在空间中对应着一个规范的采样网格（regular meshgrid）。当DICOM序列处于CONSISTENT状态时，它满足以下条件：\n\n统一的像素间距：所有切片的PixelSpacing相同\n一致的图像尺寸：所有切片的Rows和Columns相同\n\n规律的切片间距：Z轴方向上切片位置呈等间距分布\n统一的图像方向：所有切片的ImageOrientationPatient相同\n连续的实例编号：InstanceNumber从1开始连续递增\n完整的元数据：所有必需的DICOM标签都存在且有效\n\n\nimport dicube\nfrom dicube import get_dicom_status, read_dicom_dir, DicomStatus\nfrom dicube.dicom import CommonTags\n\n# 读取示例数据\ndirname = 'dicube-testdata/dicom/sample_200'\nmeta, _ = read_dicom_dir(dirname)\nstatus = get_dicom_status(meta)\n\nprint(f\"当前数据状态: {status.value}\")\n\n\n# 1. 像素间距检查\nspacing_consistent = meta.is_shared(CommonTags.PixelSpacing)\nprint(f\"像素间距统一: {spacing_consistent}\")\nif spacing_consistent:\n    spacing = meta.get_shared_value(CommonTags.PixelSpacing)\n    print(f\"  统一间距: {spacing}mm\")\n\n# 2. 图像尺寸检查\nshape_consistent = (meta.is_shared(CommonTags.Rows) and \n                   meta.is_shared(CommonTags.Columns))\nprint(f\"图像尺寸统一: {shape_consistent}\")\nif shape_consistent:\n    rows = meta.get_shared_value(CommonTags.Rows)\n    cols = meta.get_shared_value(CommonTags.Columns)\n    print(f\"  统一尺寸: {cols}×{rows}\")\n\n# 3. 图像方向检查\norientation_consistent = meta.is_shared(CommonTags.ImageOrientationPatient)\nprint(f\"图像方向统一: {orientation_consistent}\")\n\n当前数据状态: consistent\n像素间距统一: True\n  统一间距: [0.4296875, 0.4296875]mm\n图像尺寸统一: True\n  统一尺寸: 512×512\n图像方向统一: True\n\n\n只有当序列满足所有这些条件时，DiCube才能为其计算准确的空间信息（Space），构建完整的三维采样网格。",
    "crumbs": [
      "首页",
      "DiCube",
      "DICOM序列状态"
    ]
  },
  {
    "objectID": "1.3_dicom_status.html#什么是consistent状态规范的三维采样网格",
    "href": "1.3_dicom_status.html#什么是consistent状态规范的三维采样网格",
    "title": "DICOM序列状态",
    "section": "",
    "text": "DiCube主要为静态三维医学图像服务，其核心假设是整个3D图像在空间中对应着一个规范的采样网格（regular meshgrid）。当DICOM序列处于CONSISTENT状态时，它满足以下条件：\n\n统一的像素间距：所有切片的PixelSpacing相同\n一致的图像尺寸：所有切片的Rows和Columns相同\n\n规律的切片间距：Z轴方向上切片位置呈等间距分布\n统一的图像方向：所有切片的ImageOrientationPatient相同\n连续的实例编号：InstanceNumber从1开始连续递增\n完整的元数据：所有必需的DICOM标签都存在且有效\n\n\nimport dicube\nfrom dicube import get_dicom_status, read_dicom_dir, DicomStatus\nfrom dicube.dicom import CommonTags\n\n# 读取示例数据\ndirname = 'dicube-testdata/dicom/sample_200'\nmeta, _ = read_dicom_dir(dirname)\nstatus = get_dicom_status(meta)\n\nprint(f\"当前数据状态: {status.value}\")\n\n\n# 1. 像素间距检查\nspacing_consistent = meta.is_shared(CommonTags.PixelSpacing)\nprint(f\"像素间距统一: {spacing_consistent}\")\nif spacing_consistent:\n    spacing = meta.get_shared_value(CommonTags.PixelSpacing)\n    print(f\"  统一间距: {spacing}mm\")\n\n# 2. 图像尺寸检查\nshape_consistent = (meta.is_shared(CommonTags.Rows) and \n                   meta.is_shared(CommonTags.Columns))\nprint(f\"图像尺寸统一: {shape_consistent}\")\nif shape_consistent:\n    rows = meta.get_shared_value(CommonTags.Rows)\n    cols = meta.get_shared_value(CommonTags.Columns)\n    print(f\"  统一尺寸: {cols}×{rows}\")\n\n# 3. 图像方向检查\norientation_consistent = meta.is_shared(CommonTags.ImageOrientationPatient)\nprint(f\"图像方向统一: {orientation_consistent}\")\n\n当前数据状态: consistent\n像素间距统一: True\n  统一间距: [0.4296875, 0.4296875]mm\n图像尺寸统一: True\n  统一尺寸: 512×512\n图像方向统一: True\n\n\n只有当序列满足所有这些条件时，DiCube才能为其计算准确的空间信息（Space），构建完整的三维采样网格。",
    "crumbs": [
      "首页",
      "DiCube",
      "DICOM序列状态"
    ]
  },
  {
    "objectID": "1.3_dicom_status.html#非location相关的状态问题",
    "href": "1.3_dicom_status.html#非location相关的状态问题",
    "title": "DICOM序列状态",
    "section": "非Location相关的状态问题",
    "text": "非Location相关的状态问题\nDiCube使用四种模式来分类非Location相关的字段问题：missing、non_uniform、gap、duplicate。\n\n1. Missing 问题：关键字段缺失\n\n# 演示missing问题的检测\nimport copy\nfrom dicube.dicom.dicom_tags import get_tag_key\n\ndef demo_missing_problems():\n    print(\"=== Missing 问题演示 ===\")\n    \n    # 缺失像素间距\n    test_meta1 = copy.deepcopy(meta)\n    test_meta1._merged_data.pop(get_tag_key(CommonTags.PixelSpacing), None)\n    status1 = get_dicom_status(test_meta1)\n    print(f\"删除PixelSpacing后: {status1.value}\")\n    \n    # 缺失图像尺寸\n    test_meta2 = copy.deepcopy(meta)\n    test_meta2._merged_data.pop(get_tag_key(CommonTags.Columns), None)\n    status2 = get_dicom_status(test_meta2)\n    print(f\"删除Columns后: {status2.value}\")\n    \n    # 缺失数据类型信息\n    test_meta3 = copy.deepcopy(meta)\n    test_meta3._merged_data.pop(get_tag_key(CommonTags.BitsStored), None)\n    status3 = get_dicom_status(test_meta3)\n    print(f\"删除BitsStored后: {status3.value}\")\n\ndemo_missing_problems()\n\n=== Missing 问题演示 ===\n删除PixelSpacing后: missing_spacing\n删除Columns后: missing_shape\n删除BitsStored后: missing_dtype\n\n\n\n\n2. Non_uniform 问题：字段值不一致\n\ndef demo_non_uniform_problems():\n    print(\"\\n=== Non_uniform 问题演示 ===\")\n    \n    # 像素间距不一致\n    test_meta1 = copy.deepcopy(meta)\n    num_slices = test_meta1.slice_count\n    spacing_values = []\n    for i in range(num_slices):\n        if i &lt; num_slices // 2:\n            spacing_values.append([0.5, 0.5])  # 前半段用0.5mm\n        else:\n            spacing_values.append([1.0, 1.0])  # 后半段用1.0mm\n    test_meta1.set_nonshared_item(CommonTags.PixelSpacing, spacing_values)\n    status1 = get_dicom_status(test_meta1)\n    print(f\"设置不一致PixelSpacing后: {status1.value}\")\n    \n    # 图像尺寸不一致\n    test_meta2 = copy.deepcopy(meta)\n    cols_values = []\n    for i in range(num_slices):\n        if i &lt; num_slices // 2:\n            cols_values.append(512)  # 前半段512列\n        else:\n            cols_values.append(256)  # 后半段256列\n    test_meta2.set_nonshared_item(CommonTags.Columns, cols_values)\n    status2 = get_dicom_status(test_meta2)\n    print(f\"设置不一致Columns后: {status2.value}\")\n\ndemo_non_uniform_problems()\n\n\n=== Non_uniform 问题演示 ===\n设置不一致PixelSpacing后: non_uniform_spacing\n设置不一致Columns后: non_uniform_shape\n\n\n\n\n3. Duplicate 问题：重复值\n\ndef demo_duplicate_problems():\n    print(\"\\n=== Duplicate 问题演示 ===\")\n    \n    # 实例编号重复\n    test_meta = copy.deepcopy(meta)\n    num_slices = test_meta.slice_count\n    # 所有切片都使用相同的实例编号\n    duplicate_numbers = [1] * num_slices\n    test_meta.set_nonshared_item(CommonTags.InstanceNumber, duplicate_numbers)\n    status = get_dicom_status(test_meta)\n    print(f\"设置重复InstanceNumber后: {status.value}\")\n    \n    # 展示重复检测逻辑\n    instance_numbers = test_meta.get_values(CommonTags.InstanceNumber)\n    unique_count = len(set(instance_numbers))\n    total_count = len(instance_numbers)\n    print(f\"  实例编号: {instance_numbers[:5]}... (总共{total_count}个)\")\n    print(f\"  唯一值数量: {unique_count}\")\n    print(f\"  检测逻辑: unique_count({unique_count}) &lt; total_count({total_count}) = {unique_count &lt; total_count}\")\n\ndemo_duplicate_problems()\n\n\n=== Duplicate 问题演示 ===\n设置重复InstanceNumber后: duplicate_instance_numbers\n  实例编号: [1, 1, 1, 1, 1]... (总共200个)\n  唯一值数量: 1\n  检测逻辑: unique_count(1) &lt; total_count(200) = True\n\n\n\n\n4. Gap 问题：数值跳跃\n\ndef demo_gap_problems():\n    print(\"\\n=== Gap 问题演示 ===\")\n    \n    # 实例编号跳跃\n    test_meta = copy.deepcopy(meta)\n    num_slices = test_meta.slice_count\n    \n    # 创建有跳跃的实例编号序列：1,2,3,5,6,7,8...\n    gap_numbers = list(range(1, num_slices + 1))\n    for i in range(3, len(gap_numbers)):  # 从第4个开始，所有编号+1\n        gap_numbers[i] += 1\n    \n    test_meta.set_nonshared_item(CommonTags.InstanceNumber, gap_numbers)\n    status = get_dicom_status(test_meta)\n    print(f\"设置跳跃InstanceNumber后: {status.value}\")\n    \n    # 展示跳跃检测逻辑\n    instance_numbers = test_meta.get_values(CommonTags.InstanceNumber)\n    sorted_numbers = sorted([int(x) for x in instance_numbers])\n    print(f\"  排序后的实例编号: {sorted_numbers[:8]}...\")\n    \n    # 检查连续性\n    diffs = [sorted_numbers[i+1] - sorted_numbers[i] for i in range(len(sorted_numbers)-1)]\n    print(f\"  相邻差值: {diffs[:7]}...\")\n    gap_detected = not all(d == 1 for d in diffs)\n    print(f\"  检测逻辑: 存在非1的差值 = {gap_detected}\")\n\ndemo_gap_problems()\n\n\n=== Gap 问题演示 ===\n设置跳跃InstanceNumber后: gap_instance_number\n  排序后的实例编号: [1, 2, 3, 5, 6, 7, 8, 9]...\n  相邻差值: [1, 1, 2, 1, 1, 1, 1]...\n  检测逻辑: 存在非1的差值 = True",
    "crumbs": [
      "首页",
      "DiCube",
      "DICOM序列状态"
    ]
  },
  {
    "objectID": "1.3_dicom_status.html#location相关的状态问题",
    "href": "1.3_dicom_status.html#location相关的状态问题",
    "title": "DICOM序列状态",
    "section": "Location相关的状态问题",
    "text": "Location相关的状态问题\nLocation相关的问题主要涉及切片在三维空间中的位置排列，这些问题会破坏规范采样网格的连续性。\n\n1. Missing Location：位置信息缺失\n当DICOM序列中既缺少ImagePositionPatient又缺少SliceLocation字段时，DiCube无法确定切片的空间位置。\n检测逻辑：需要ImagePositionPatient OR SliceLocation，当两者都缺失时 → MISSING_LOCATION\n\n\n2. Dwelling Location：位置停滞\n这是位置序列中出现重复值的情况，表示多个切片具有相同的空间位置。\n数值示例：\n\n正常序列：[1.0, 2.0, 3.0, 4.0, 5.0] (间距为1.0)\n停滞序列：[1.0, 2.0, 2.0, 3.0, 4.0] (第2和第3个位置相同)\n位置差值：[1.0, 0.0, 1.0, 1.0]\n\n检测逻辑：当位置差值中存在零值时 → DWELLING_LOCATION\n\n\n3. Reversed Location：位置方向混乱\nZ轴位置序列中同时存在正向和反向移动，表示扫描方向不一致或序列被打乱。\n数值示例：\n\n正常序列：[1.0, 2.0, 3.0, 4.0, 5.0] (单调递增)\n混乱序列：[1.0, 2.0, 3.0, 4.0, 2.0, 5.0, 6.0] (第5个位置倒退)\n位置差值：[1.0, 1.0, 1.0, -2.0, 3.0, 1.0]\n\n检测逻辑：当位置差值中同时存在正值和负值时 → REVERSED_LOCATION\n\n\n4. Gap Location：位置跳跃\nZ轴位置序列中出现不规律的大间隙，破坏了等间距采样的假设。\n数值示例：\n\n正常序列：[10.0, 15.0, 20.0, 25.0, 30.0] (间距为5.0)\n跳跃序列：[10.0, 15.0, 20.0, 35.0, 40.0] (第4个位置跳跃)\n位置差值：[5.0, 5.0, 15.0, 5.0]\n平均间距：5.0\n相对偏差：[0%, 0%, 200%, 0%]\n\n检测逻辑：当某个间距偏离平均值超过50%时 → GAP_LOCATION",
    "crumbs": [
      "首页",
      "DiCube",
      "DICOM序列状态"
    ]
  },
  {
    "objectID": "1.3_dicom_status.html#dicube的兼容性处理策略",
    "href": "1.3_dicom_status.html#dicube的兼容性处理策略",
    "title": "DICOM序列状态",
    "section": "DiCube的兼容性处理策略",
    "text": "DiCube的兼容性处理策略\nDiCube尽力在各种异常情况下保持兼容性，采用”尽力而为”的原则来处理有问题的DICOM数据。当检测到数据质量问题时，DiCube仍然能够加载和处理数据，但会相应地限制某些功能。\n\n处理策略细节\n无法计算Space信息的状态：\n\nMISSING_SPACING、NON_UNIFORM_SPACING：像素间距问题\nMISSING_ORIENTATION、NON_UNIFORM_ORIENTATION：图像方向问题\n\nMISSING_LOCATION、REVERSED_LOCATION、DWELLING_LOCATION、GAP_LOCATION：位置信息问题\n\n处理方式：\n\n像素数据：正常加载和处理，应用必要的rescale变换\n元数据：完整保留所有DICOM标签信息，确保往返转换的完整性\n空间信息：当检测到空间相关问题时，将Space设置为None并警告用户\n功能限制：无法进行需要精确空间信息的操作，如空间变换、重采样、配准等\n\n这种设计确保了DiCube在面对现实世界中不完美的DICOM数据时，仍能提供基本的图像处理功能，同时明确告知用户哪些高级功能不可用。",
    "crumbs": [
      "首页",
      "DiCube",
      "DICOM序列状态"
    ]
  },
  {
    "objectID": "1.3_dicom_status.html#错误优先级只报告最严重的问题",
    "href": "1.3_dicom_status.html#错误优先级只报告最严重的问题",
    "title": "DICOM序列状态",
    "section": "错误优先级：只报告最严重的问题",
    "text": "错误优先级：只报告最严重的问题\nDiCube的状态检查遵循严格的优先级原则：按照严重程度从高到低依次检查，只报告发现的第一个（最严重的）问题。这种设计避免了信息过载，有助于用户专注于解决最关键的问题。\n\n检查优先级顺序\n\nSeries UID问题（最高优先级）\n\nMISSING_SERIES_UID：缺失序列标识符\nNON_UNIFORM_SERIES_UID：序列标识符不统一\n\nInstance Number问题\n\nMISSING_INSTANCE_NUMBER：缺失实例编号\nDUPLICATE_INSTANCE_NUMBERS：实例编号重复\nGAP_INSTANCE_NUMBER：实例编号跳跃\n\n数据类型问题\n\nMISSING_DTYPE：缺失数据类型信息\nNON_UNIFORM_DTYPE：数据类型不一致\n\n空间参数问题\n\nMISSING_SPACING：缺失像素间距\nNON_UNIFORM_SPACING：像素间距不一致\nMISSING_SHAPE：缺失图像尺寸\nNON_UNIFORM_SHAPE：图像尺寸不一致\nMISSING_ORIENTATION：缺失图像方向\nNON_UNIFORM_ORIENTATION：图像方向不一致\n\n位置问题\n\nMISSING_LOCATION：缺失位置信息\nREVERSED_LOCATION：位置方向混乱\nDWELLING_LOCATION：位置停滞\nGAP_LOCATION：位置跳跃\n\n其他问题\n\nNON_UNIFORM_RESCALE_FACTOR：校正参数不一致\n\n理想状态\n\nCONSISTENT：所有检查通过",
    "crumbs": [
      "首页",
      "DiCube",
      "DICOM序列状态"
    ]
  },
  {
    "objectID": "1.3_dicom_status.html#总结",
    "href": "1.3_dicom_status.html#总结",
    "title": "DICOM序列状态",
    "section": "总结",
    "text": "总结\nDicomStatus系统通过系统化的状态检查，确保DiCube能够：\n\n识别理想状态：CONSISTENT状态代表规范的三维采样网格\n分类问题类型：用missing、non_uniform、gap、duplicate四种模式描述非Location问题\n检测空间异常：专门处理dwelling、reversed、gap等Location相关问题\n\n智能兼容处理：在数据有问题时仍能部分工作，但合理限制功能\n优先级管理：按严重程度报告问题，指导用户逐步修复\n\n这个系统为DiCube的可靠性和鲁棒性提供了重要保障，确保在各种真实世界的数据质量情况下都能给出合理的处理方案。",
    "crumbs": [
      "首页",
      "DiCube",
      "DICOM序列状态"
    ]
  },
  {
    "objectID": "1.4_sort_method.html",
    "href": "1.4_sort_method.html",
    "title": "切片排序方法",
    "section": "",
    "text": "当我们从医院PACS系统或者存储设备中获取一个DICOM检查序列时，面对的往往是数百个”散装”的2D切片文件。这些文件通常是无序存储的，文件名也可能毫无规律。要将这些2D图像正确地堆叠成完整的3D体积数据，我们遇到的第一个关键技术问题就是：按什么顺序来排列这些切片？\n这个看似简单的问题，背后实际上隐藏着临床工作流程、三维渲染引擎、AI算法处理等多个层面的需求冲突。每种排序方法都有其合理的技术依据和应用场景，但在特定的使用环境下可能会产生意想不到的问题。\n\n\n在实际项目开发中，我们经常会遇到这样的矛盾场景：\n\n临床报告的需求：医生在写诊断报告时，习惯于按照Instance Number来定位病灶，会在报告中写”病灶位于第X层切片”。这是因为绝大多数PACS系统在显示图像时，默认就是按照Instance Number来排序展示的，这已经成为了临床工作的标准流程。\nAI算法的标准化需求：为了保证算法输入的一致性，很多深度学习模型会要求图像按照解剖学方向进行排序，比如严格按照”从头到脚”或者”从脚到头”的顺序来排列切片，一般会选择“SliceLocation” 或者 “ImagePatientPosition” 字段来进行排序。这样做的好处是算法可以学习到一致的解剖结构分布模式。我们通常假设绝大部分的CT和MR检查都是横断位扫描，所以”从头到脚”和”从脚到头”确实是非常自然和直观的排序选择，符合我们对人体解剖结构的认知。\n非标准扫描的挑战：但现实总是更复杂的。有些图像是倾斜扫描的，比如心脏MR的四腔心切面扫描，或者对原始CT图像进行了冠状位重建。在这些情况下，Slice Location字段可能根本就不存在，Image Patient Position字段也让人困惑——你很难确定应该用哪个坐标分量来进行排序。\n三维渲染的技术约束：如果我们要做三维可视化，比如使用VTK渲染引擎，那么就必须考虑到VTK默认使用的是右手坐标系，如果我们排序方法不正确，会导致渲染结果出现”镜像人”的现象。\n\n基于这些复杂的需求冲突，我们推荐使用右手坐标系排序作为默认方案。\n为什么推荐右手系排序？ - 修改成本最小化: 实际上，任何一种排序方式都有其技术合理性，只要我们能够忠实地记录并传递元数据信息，各个模块都可以根据自身需求进行方向转换。但是，不同模块的转换成本存在显著差异。对于算法处理和三维渲染模块而言，它们直接操作的是完整的3D数组结构，如果需要进行图像翻转或重新排列，就必须对大块的连续内存进行读写操作，这种操作的计算开销相当可观。相比之下，PACS查看器的处理方式更为灵活——它本质上将图像序列视为一个2D图像的列表集合，因此只需要调整索引映射关系就能实现不同的显示顺序，而无需移动实际的图像数据。从系统整体的性能优化角度考虑，让计算密集型的算法和渲染模块使用标准化的右手系排序，而让显示模块承担轻量级的索引转换工作，这种设计思路能够最大化地降低系统的整体修改成本。\n右手系排序的技术实现\n右手系排序的算法原理其实很直观：我们读取DICOM文件中的Image Patient Orientation字段，这个字段会告诉我们图像平面的X方向（前三个数字）和Y方向（后三个数字）。通过对这两个方向向量进行叉乘运算，我们可以得到垂直于图像平面的法向量。然后，将每张图像的Image Patient Position投影到这个法向量上，按照投影值从小到大排列，这样得到的切片序列就保证是右手坐标系的。\n现实问题\n理论上来说，只要我们保证坐标系是右手的，那么无论患者在扫描时是怎么躺的，或者扫描序列是怎么”歪着扫”的（比如心脏MR的四腔心切面），导致三个坐标轴并不完全对应标准的LPS方向，渲染时使用者都可以通过三维旋转操作，将图像调整到标准的LPS显示方向。\n但是有极少的医疗设备厂商并不严格遵守DICOM的LPS坐标系准则，在进行世界坐标系标定时，采用的本身就是左手坐标系。这种情况下，即使我们按照推荐的右手系排序方法进行DICOM堆叠，仍然会出现”镜像人”的问题。好在这种情况相对比较少见，但一旦遇到，就只能通过更复杂的图像分析算法来检测和纠正异常，因为从DICOM的元数据信息中是无法判断出这种标定错误的。",
    "crumbs": [
      "首页",
      "DiCube",
      "切片排序方法"
    ]
  },
  {
    "objectID": "1.4_sort_method.html#为什么dicom序列需要排序",
    "href": "1.4_sort_method.html#为什么dicom序列需要排序",
    "title": "切片排序方法",
    "section": "",
    "text": "当我们从医院PACS系统或者存储设备中获取一个DICOM检查序列时，面对的往往是数百个”散装”的2D切片文件。这些文件通常是无序存储的，文件名也可能毫无规律。要将这些2D图像正确地堆叠成完整的3D体积数据，我们遇到的第一个关键技术问题就是：按什么顺序来排列这些切片？\n这个看似简单的问题，背后实际上隐藏着临床工作流程、三维渲染引擎、AI算法处理等多个层面的需求冲突。每种排序方法都有其合理的技术依据和应用场景，但在特定的使用环境下可能会产生意想不到的问题。\n\n\n在实际项目开发中，我们经常会遇到这样的矛盾场景：\n\n临床报告的需求：医生在写诊断报告时，习惯于按照Instance Number来定位病灶，会在报告中写”病灶位于第X层切片”。这是因为绝大多数PACS系统在显示图像时，默认就是按照Instance Number来排序展示的，这已经成为了临床工作的标准流程。\nAI算法的标准化需求：为了保证算法输入的一致性，很多深度学习模型会要求图像按照解剖学方向进行排序，比如严格按照”从头到脚”或者”从脚到头”的顺序来排列切片，一般会选择“SliceLocation” 或者 “ImagePatientPosition” 字段来进行排序。这样做的好处是算法可以学习到一致的解剖结构分布模式。我们通常假设绝大部分的CT和MR检查都是横断位扫描，所以”从头到脚”和”从脚到头”确实是非常自然和直观的排序选择，符合我们对人体解剖结构的认知。\n非标准扫描的挑战：但现实总是更复杂的。有些图像是倾斜扫描的，比如心脏MR的四腔心切面扫描，或者对原始CT图像进行了冠状位重建。在这些情况下，Slice Location字段可能根本就不存在，Image Patient Position字段也让人困惑——你很难确定应该用哪个坐标分量来进行排序。\n三维渲染的技术约束：如果我们要做三维可视化，比如使用VTK渲染引擎，那么就必须考虑到VTK默认使用的是右手坐标系，如果我们排序方法不正确，会导致渲染结果出现”镜像人”的现象。\n\n基于这些复杂的需求冲突，我们推荐使用右手坐标系排序作为默认方案。\n为什么推荐右手系排序？ - 修改成本最小化: 实际上，任何一种排序方式都有其技术合理性，只要我们能够忠实地记录并传递元数据信息，各个模块都可以根据自身需求进行方向转换。但是，不同模块的转换成本存在显著差异。对于算法处理和三维渲染模块而言，它们直接操作的是完整的3D数组结构，如果需要进行图像翻转或重新排列，就必须对大块的连续内存进行读写操作，这种操作的计算开销相当可观。相比之下，PACS查看器的处理方式更为灵活——它本质上将图像序列视为一个2D图像的列表集合，因此只需要调整索引映射关系就能实现不同的显示顺序，而无需移动实际的图像数据。从系统整体的性能优化角度考虑，让计算密集型的算法和渲染模块使用标准化的右手系排序，而让显示模块承担轻量级的索引转换工作，这种设计思路能够最大化地降低系统的整体修改成本。\n右手系排序的技术实现\n右手系排序的算法原理其实很直观：我们读取DICOM文件中的Image Patient Orientation字段，这个字段会告诉我们图像平面的X方向（前三个数字）和Y方向（后三个数字）。通过对这两个方向向量进行叉乘运算，我们可以得到垂直于图像平面的法向量。然后，将每张图像的Image Patient Position投影到这个法向量上，按照投影值从小到大排列，这样得到的切片序列就保证是右手坐标系的。\n现实问题\n理论上来说，只要我们保证坐标系是右手的，那么无论患者在扫描时是怎么躺的，或者扫描序列是怎么”歪着扫”的（比如心脏MR的四腔心切面），导致三个坐标轴并不完全对应标准的LPS方向，渲染时使用者都可以通过三维旋转操作，将图像调整到标准的LPS显示方向。\n但是有极少的医疗设备厂商并不严格遵守DICOM的LPS坐标系准则，在进行世界坐标系标定时，采用的本身就是左手坐标系。这种情况下，即使我们按照推荐的右手系排序方法进行DICOM堆叠，仍然会出现”镜像人”的问题。好在这种情况相对比较少见，但一旦遇到，就只能通过更复杂的图像分析算法来检测和纠正异常，因为从DICOM的元数据信息中是无法判断出这种标定错误的。",
    "crumbs": [
      "首页",
      "DiCube",
      "切片排序方法"
    ]
  },
  {
    "objectID": "1.4_sort_method.html#排序方法的可视化验证",
    "href": "1.4_sort_method.html#排序方法的可视化验证",
    "title": "切片排序方法",
    "section": "排序方法的可视化验证",
    "text": "排序方法的可视化验证\n让我们通过三视图的方式来直观地观察和验证右手坐标系排序的效果。通过查看横断面、冠状面和矢状面的图像，我们可以清楚地了解图像的空间排列是否正确：\n\nimport dicube\nfrom dicube import SortMethod\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# 加载示例DICOM数据\ndirname = 'dicube-testdata/dicom/sample_200'\n\n# 使用右手坐标系排序方法加载图像数据\nimg_rh = dicube.load_from_dicom_folder(dirname, sort_method=SortMethod.POSITION_RIGHT_HAND)\n\nprint(\"=== 右手坐标系排序的图像数据信息 ===\")\nprint(f\"图像数据形状: {img_rh.raw_image.shape}\")\nprint(f\"排序方法: POSITION_RIGHT_HAND\")\n\n# 获取中心切片\ndef get_center_slices(image_data):\n    \"\"\"获取三个方向的中心切片\"\"\"\n    z_center = image_data.shape[0] // 2\n    y_center = image_data.shape[1] // 2  \n    x_center = image_data.shape[2] // 2\n    \n    return {\n        'axial': image_data[z_center, :, :],      # 横断面\n        'coronal': image_data[:, y_center, :],    # 冠状面  \n        'sagittal': image_data[:, :, x_center]    # 矢状面\n    }\n\nslices_rh = get_center_slices(img_rh.get_fdata())\n\n# 创建三个独立的图\n# 1. Axial View (横断面)\nfig1, ax1 = plt.subplots(1, 1, figsize=(8, 6))\nim1 = ax1.imshow(slices_rh['axial'], cmap='gray', origin='lower')\nax1.set_title(f'Axial View - Slice along Z-axis (slice {img_rh.raw_image.shape[0]//2} of {img_rh.raw_image.shape[0]})', fontsize=14)\nax1.set_xlabel('Axis 2 (X): Right → Left', fontsize=12)\nax1.set_ylabel('Axis 1 (Y): Anterior → Posterior', fontsize=12)\n\nplt.tight_layout()\nplt.show()\n\n# 2. Coronal View (冠状面)\nfig2, ax2 = plt.subplots(1, 1, figsize=(8, 6))\nim2 = ax2.imshow(slices_rh['coronal'], cmap='gray', origin='lower')\nax2.set_title(f'Coronal View - Slice along Y-axis (slice {img_rh.raw_image.shape[1]//2} of {img_rh.raw_image.shape[1]})', fontsize=14)\nax2.set_xlabel('Axis 2 (X): Right → Left', fontsize=12)\nax2.set_ylabel('Axis 0 (Z): Inferior → Superior', fontsize=12)\nplt.tight_layout()\nplt.show()\n\n# 3. Sagittal View (矢状面)\nfig3, ax3 = plt.subplots(1, 1, figsize=(8, 6))\nim3 = ax3.imshow(slices_rh['sagittal'], cmap='gray', origin='lower')\nax3.set_title(f'Sagittal View - Slice along X-axis (slice {img_rh.raw_image.shape[2]//2} of {img_rh.raw_image.shape[2]})', fontsize=14)\nax3.set_xlabel('Axis 1 (Y): Anterior →  Posterior', fontsize=12)\nax3.set_ylabel('Axis 0 (Z): Inferior → Superior', fontsize=12)\nplt.tight_layout()\nplt.show()\n\n=== 右手坐标系排序的图像数据信息 ===\n图像数据形状: (200, 512, 512)\n排序方法: POSITION_RIGHT_HAND",
    "crumbs": [
      "首页",
      "DiCube",
      "切片排序方法"
    ]
  },
  {
    "objectID": "1.4_sort_method.html#排序方法的最佳实践建议",
    "href": "1.4_sort_method.html#排序方法的最佳实践建议",
    "title": "切片排序方法",
    "section": "排序方法的最佳实践建议",
    "text": "排序方法的最佳实践建议\n基于我们在实际项目中的经验积累和技术考量，我们强烈推荐使用右手坐标系排序作为默认的DICOM切片排序方案。这个建议背后有以下几个重要的技术和实用性考虑：\n\n技术兼容性优势\n\n渲染引擎兼容性：VTK、ITK等主流医学影像处理和渲染引擎都默认采用右手坐标系，直接使用右手系排序可以避免额外的坐标系转换\n标准合规性：完全符合DICOM LPS+坐标系标准，确保与国际医学影像标准的兼容性\nAI算法稳定性：在深度学习模型训练和推理过程中，避免因坐标系不一致导致的”镜像人”问题，提高算法的鲁棒性\n计算效率：减少运行时的坐标系转换计算，降低处理开销",
    "crumbs": [
      "首页",
      "DiCube",
      "切片排序方法"
    ]
  },
  {
    "objectID": "1.0_motivation.html",
    "href": "1.0_motivation.html",
    "title": "设计理念与动机",
    "section": "",
    "text": "DICOM（医学数字成像与通信标准）是医学影像领域的通用语言，它统一了图像格式，实现了跨厂商设备与软件的互操作性。然而，这一诞生于20世纪80年代的标准，其核心设计并未预见到今日由AI、大数据及高并发计算所定义的新型工作流。\n在构建集成AI算法、三维可视化和海量数据管理的新一代影像工作站时，我们发现DICOM的某些设计正成为制约系统性能的结构性局限。本文旨在深入分析这些挑战，并介绍DiCube——一个旨在从根本上解决这些问题，同时确保与现有生态100%兼容的创新方案。",
    "crumbs": [
      "首页",
      "DiCube",
      "设计理念与动机"
    ]
  },
  {
    "objectID": "1.0_motivation.html#引言经典标准面临的现代挑战",
    "href": "1.0_motivation.html#引言经典标准面临的现代挑战",
    "title": "设计理念与动机",
    "section": "",
    "text": "DICOM（医学数字成像与通信标准）是医学影像领域的通用语言，它统一了图像格式，实现了跨厂商设备与软件的互操作性。然而，这一诞生于20世纪80年代的标准，其核心设计并未预见到今日由AI、大数据及高并发计算所定义的新型工作流。\n在构建集成AI算法、三维可视化和海量数据管理的新一代影像工作站时，我们发现DICOM的某些设计正成为制约系统性能的结构性局限。本文旨在深入分析这些挑战，并介绍DiCube——一个旨在从根本上解决这些问题，同时确保与现有生态100%兼容的创新方案。",
    "crumbs": [
      "首页",
      "DiCube",
      "设计理念与动机"
    ]
  },
  {
    "objectID": "1.0_motivation.html#dicom在现代工作流中的四大核心挑战",
    "href": "1.0_motivation.html#dicom在现代工作流中的四大核心挑战",
    "title": "设计理念与动机",
    "section": "DICOM在现代工作流中的四大核心挑战",
    "text": "DICOM在现代工作流中的四大核心挑战\n\n1. 文件碎片化：并发I/O的性能瓶颈\n一个CT或MR序列通常由数百至数千个独立的.dcm文件构成，这是DICOM最核心的性能制约因素。在现代工作站中，多个软件模块（如通信、三维渲染、数据库归档、AI分析）需要并发访问同一序列。这种多任务并发访问大量小文件，会导致磁盘磁头频繁进行随机寻道，从而产生严重的I/O瓶颈。尽管SSD能缓解此问题，但对于大型医疗机构每日TB级的数据增量，成本更低的机械硬盘仍是长期存储的主力。一旦数据由热转冷，访问延迟便会急剧恶化。\n\n\n2. 元数据冗余：存储与带宽的无效消耗\n在同一序列内，绝大多数元数据（如患者信息、检查参数、设备型号等）是完全一致的，但DICOM标准要求其在每个.dcm文件中重复存储。这意味着一个包含500个切片的序列，同样的信息被冗余复制了500次。这不仅显著增加了存储空间的占用，也造成了网络传输带宽的浪费。此外，当这些本应共享的字段在不同文件中出现不一致时，会给下游的数据处理流程引入潜在的数据质量风险。\n\n\n3. 内置约束缺失：数据质量的不确定性\n在实际应用中，DICOM数据常出现质量问题：序列内文件缺失、关键字段（Tag）值为空或错误、InstanceNumber不连续或重复、像素间距不一致等。软件开发商通常需要构建复杂的外部质控模块来识别和处理这些问题。然而，不同AI算法对数据质量的容忍度各异，设计一套普适的质控规则极为困难，这增加了系统集成的复杂度和脆弱性。\n\n\n4. 顺序解析机制：低效的元数据访问\nDICOM二进制格式缺乏全局索引，解析器必须从文件头开始顺序扫描，直至找到目标标签。这意味着，即便是为了获取构建序列视图所需的ImagePositionPatient和InstanceNumber这样少量的信息，也必须解析每个文件中完整的元数据块。主流库（如PyDICOM）的默认行为是将元数据完整加载入内存，这种方式在需要高性能批处理（如AI训练）或快速预览的场景下，效率低下。",
    "crumbs": [
      "首页",
      "DiCube",
      "设计理念与动机"
    ]
  },
  {
    "objectID": "1.0_motivation.html#dicube的系统性解决方案重塑影像数据结构",
    "href": "1.0_motivation.html#dicube的系统性解决方案重塑影像数据结构",
    "title": "设计理念与动机",
    "section": "DiCube的系统性解决方案：重塑影像数据结构",
    "text": "DiCube的系统性解决方案：重塑影像数据结构\nDiCube并非对DICOM的增量改进，而是从现代工作流的需求出发，设计了一套全新的存储与访问方案。其核心设计原则如下：\n\n统一文件容器：将影像序列整合为单一文件，根除文件碎片化。\n智能元数据管理：分离共享与非共享元数据，建立高效索引。\n现代编解码技术：采用HTJ2K等技术，优化压缩比与编解码速度。\n100%往返兼容：确保与标准DICOM生态的无缝衔接。\n\n\n从碎片到整体：单文件存储\nDiCube将整个DICOM序列合并为一个.dcbs（DiCube Binary Sequence）文件，将对文件系统的随机读写转变为高效的顺序读写，从根本上解决了I/O瓶颈。\n\nimport dicube\nimport time\nimport os\n\n# 示例DICOM目录和DiCube文件路径\ndicom_dir = 'dicube-testdata/dicom/sample_200'\ndcbs_file = 'dicube-testdata/test_sequence.dcbs'\n\n# 转换DICOM序列为DiCube格式\ndcb_image = dicube.load_from_dicom_folder(dicom_dir)\ndicube.save(dcb_image, dcbs_file)\n\n\n\n从冗余到索引：智能元数据管理\nDiCube将元数据分为两类：\n\n共享元数据：如患者ID、研究日期等，在.dcbs文件中仅存储一份。\n非共享元数据：如ImagePositionPatient等逐切片变化的信息，以紧凑的数组形式存储并建立索引。\n\n该设计极大压缩了元数据存储空间，并实现了特定字段的毫秒级随机访问。\n\nfrom dicube.dicom import CommonTags\n\n# 仅加载元数据，速度极快\nmeta = dicube.load_meta(dcbs_file)\n\n# O(1) 复杂度访问共享字段\npatient_name = meta.get_shared_value(CommonTags.PatientName)\nprint(f\"患者姓名: {patient_name}\")\n\n# 高效批量获取非共享字段\ninstance_numbers = meta.get_values(CommonTags.InstanceNumber)\nprint(f\"一次性获取{len(instance_numbers)}个InstanceNumber, 前5个: {instance_numbers[:5]}\")\n\n患者姓名: {'Alphabetic': 'Anonymous'}\n一次性获取200个InstanceNumber, 前5个: [1, 2, 3, 4, 5]",
    "crumbs": [
      "首页",
      "DiCube",
      "设计理念与动机"
    ]
  },
  {
    "objectID": "1.0_motivation.html#高并发性能压力测试模拟真实世界负载",
    "href": "1.0_motivation.html#高并发性能压力测试模拟真实世界负载",
    "title": "设计理念与动机",
    "section": "高并发性能压力测试：模拟真实世界负载",
    "text": "高并发性能压力测试：模拟真实世界负载\n为精确衡量DiCube在真实并发环境下的性能优势，我们设计了以下测试方案：\n\n并发规模：10个进程并发执行。\n工作负载：每个进程随机处理5个不同的影像序列。\n测试数据：从一个包含1000个真实CT序列的大数据集中随机抽取50个序列，避免文件系统缓存干扰。\n测试场景：\n\n仅元数据读取：模拟PACS浏览器构建序列列表的场景。\n元数据+像素读取：模拟三维重建或AI算法进行完整数据加载的场景。\n\n\n测试环境配置 (请根据您的环境修改以下路径)\n\nimport multiprocessing as mp\nimport random\nimport time\nimport os\nimport pydicom\nimport dicube\nimport numpy as np\n\n# --- 配置您的数据路径 ---\ndicom_base_dir = '/data/manifest-NLST_allCT/sample_1000'\ndicube_base_dir = '/data/manifest-NLST_allCT/sample_1000_dcbs'\n# -------------------------\n\n# --- 准备测试数据 ---\nnum_processes = 10\nseries_per_process = 5\ntotal_series_needed = num_processes * series_per_process\n\nall_dicom_dirs = [d for d in os.listdir(dicom_base_dir) if os.path.isdir(os.path.join(dicom_base_dir, d))]\nrandom.seed(time.time())\nselected_series_names = random.sample(all_dicom_dirs, total_series_needed)\nprint('selected_series_names',selected_series_names)\nselected_dicom_paths = [os.path.join(dicom_base_dir, name) for name in selected_series_names]\nselected_dicube_paths = [os.path.join(dicube_base_dir, name + '.dcbs') for name in selected_series_names]\n\nselected_series_names ['0156', '0452', '0640', '0486', '0198', '0132', '0296', '0376', '0566', '0716', '0148', '0271', '0919', '0661', '0885', '0346', '0775', '0548', '0632', '0195', '0579', '0464', '0651', '0123', '0772', '0948', '0711', '0724', '0744', '0004', '0796', '0997', '0119', '0693', '0497', '0528', '0753', '0093', '0325', '0822', '0906', '0317', '0269', '0985', '0921', '0147', '0969', '0674', '0489', '0087']\n\n\n\n1. 存储空间占用对比\n在性能测试前，我们首先计算这50个被选中序列分别以DICOM和DiCube格式存储时所占用的磁盘空间。\n\ndef get_dir_size(path):\n    total = 0\n    with os.scandir(path) as it:\n        for entry in it:\n            if entry.is_file():\n                total += entry.stat().st_size\n    return total\n\ndicom_total_size = sum(get_dir_size(p) for p in selected_dicom_paths)\ndicube_total_size = sum(os.path.getsize(p) for p in selected_dicube_paths)\n\nprint(\"--- 50个随机序列存储空间对比 ---\")\nprint(f\"DICOM 格式总大小: {dicom_total_size / (1024**2):.2f} MB\")\nprint(f\"DiCube 格式总大小: {dicube_total_size / (1024**2):.2f} MB\")\nprint(f\"空间节省率: {(1 - dicube_total_size / dicom_total_size) * 100:.1f}%\")\n\n--- 50个随机序列存储空间对比 ---\nDICOM 格式总大小: 3662.94 MB\nDiCube 格式总大小: 1523.64 MB\n空间节省率: 58.4%\n\n\n\n\n2. 并发性能测试执行\n我们定义了针对四种不同场景的读取函数，并使用多进程池来模拟并发访问。\n\n# --- 读取函数定义 (Low-level, for a single item) ---\ndef read_dicom_series_meta_only(series_path):\n    files = [os.path.join(series_path, f) for f in os.listdir(series_path) if f.endswith('.dcm')]\n    for filepath in files:\n        pydicom.dcmread(filepath, stop_before_pixels=True)\n\ndef read_dicom_series_full(series_path):\n    dcm_series = [pydicom.dcmread(os.path.join(series_path, f)) for f in os.listdir(series_path) if f.endswith('.dcm')]\n    # 模拟访问像素数据\n    pixels = [ds.pixel_array for ds in dcm_series]\n    return (len(pixels), pixels[0].shape)\n\ndef read_dicube_meta_only(dcbs_path):\n    dicube.load_meta(dcbs_path)\n\ndef read_dicube_full(dcbs_path):\n    dcb_image = dicube.load(dcbs_path)\n    # 模拟访问像素数据\n    pixels = dcb_image.raw_image\n    return pixels.shape\n\n# --- NEW: Top-level worker functions that are picklable ---\n# These functions take a list of paths and process them.\ndef dicom_meta_worker(paths):\n    for path in paths:\n        read_dicom_series_meta_only(path)\n\ndef dicube_meta_worker(paths):\n    for path in paths:\n        read_dicube_meta_only(path)\n\ndef dicom_full_worker(paths):\n    for path in paths:\n        read_dicom_series_full(path)\n\ndef dicube_full_worker(paths):\n    for path in paths:\n        read_dicube_full(path)\n        \n# --- 测试执行框架 (Unchanged) ---\ndef run_performance_test(paths, worker_function, num_processes, series_per_process):\n    tasks = [paths[i*series_per_process:(i+1)*series_per_process] for i in range(num_processes)]\n    pool = mp.Pool(processes=num_processes)\n    \n    start_time = time.time()\n    # Use the worker function directly on the list of task lists\n    pool.map(worker_function, tasks)\n    end_time = time.time()\n    \n    pool.close()\n    pool.join()\n    return end_time - start_time\n        \n# --- 执行所有测试 (UPDATED to use new worker functions) ---\nprint(\"\\n--- 正在执行并发性能测试 ---\")\n# 元数据测试\ndicom_meta_time = run_performance_test(selected_dicom_paths, dicom_meta_worker, num_processes, series_per_process)\ndicube_meta_time = run_performance_test(selected_dicube_paths, dicube_meta_worker, num_processes, series_per_process)\n\n# 完整数据测试\ndicom_full_time = run_performance_test(selected_dicom_paths, dicom_full_worker, num_processes, series_per_process)\ndicube_full_time = run_performance_test(selected_dicube_paths, dicube_full_worker, num_processes, series_per_process)\n\n\n--- 正在执行并发性能测试 ---\n\n\n\n\n3. 测试结果与分析\n\nprint(\"\\n--- 并发性能测试结果 (10进程 x 5序列) ---\")\n\n# 元数据结果\nprint(\"\\n场景1: 仅读取元数据\")\nprint(f\"DICOM  总耗时: {dicom_meta_time:.2f} 秒\")\nprint(f\"DiCube 总耗时: {dicube_meta_time:.2f} 秒\")\nprint(f\"性能提升: {dicom_meta_time / dicube_meta_time:.1f} 倍\")\n\n# 完整数据结果\nprint(\"\\n场景2: 读取元数据 + 像素数据\")\nprint(f\"DICOM  总耗时: {dicom_full_time:.2f} 秒\")\nprint(f\"DiCube 总耗时: {dicube_full_time:.2f} 秒\")\nprint(f\"性能提升: {dicom_full_time / dicube_full_time:.1f} 倍\")\n\n\n--- 并发性能测试结果 (10进程 x 5序列) ---\n\n场景1: 仅读取元数据\nDICOM  总耗时: 1.54 秒\nDiCube 总耗时: 0.09 秒\n性能提升: 17.4 倍\n\n场景2: 读取元数据 + 像素数据\nDICOM  总耗时: 1.81 秒\nDiCube 总耗时: 2.93 秒\n性能提升: 0.6 倍\n\n\n测试结果清晰地表明，DiCube在两种并发场景下均展现出压倒性的性能优势。尤其是在仅读取元数据的场景中，由于避免了对大量小文件的随机访问和重复解析，性能提升最为显著。在完整数据读取场景中，单文件容器带来的高效I/O同样使DiCube大幅领先。\n值得注意的是，DiCube中的像素数据采用了高效压缩算法，即使考虑解压缩开销，其性能依然远超未压缩的DICOM文件。这种性能优势具有良好的可扩展性——随着并发度的提升，DiCube的领先幅度会进一步扩大。此外，本次测试环境为配备SSD缓存的混合硬盘，已经具备相当不错的读取性能。在纯机械硬盘或云对象存储等I/O受限的环境中，DiCube的性能优势将更加明显，差距可能会呈数量级增长。",
    "crumbs": [
      "首页",
      "DiCube",
      "设计理念与动机"
    ]
  },
  {
    "objectID": "1.0_motivation.html#无缝集成100-dicom往返兼容性",
    "href": "1.0_motivation.html#无缝集成100-dicom往返兼容性",
    "title": "设计理念与动机",
    "section": "无缝集成：100% DICOM往返兼容性",
    "text": "无缝集成：100% DICOM往返兼容性\nDiCube设计的关键原则之一是与现有DICOM生态的完全兼容。这通过100%无损的往返转换能力来保证：\n\n无损转换：从DICOM到DiCube，再转换回DICOM，像素数据和元数据均无任何信息损失。\n元数据完整性：所有标准及私有DICOM标签都被完整保留。\n临床工作流兼容：可随时将.dcbs文件导出为标准DICOM文件集，用于PACS归档或与旧系统交互。\n\n以下代码验证了多个关键字段在转换前后的一致性。\n\nimport shutil\n\n# 使用之前加载的 dcb_image 对象\nroundtrip_dicom_dir = 'dicube-testdata/roundtrip_dicom'\ndicube.save_to_dicom_folder(dcb_image, roundtrip_dicom_dir)\n\n# 读取原始DICOM文件和转换后的DICOM文件进行对比\noriginal_dcm_path = os.path.join(dicom_dir, os.listdir(dicom_dir)[0])\noriginal_dcm = pydicom.dcmread(original_dcm_path)\n\nroundtrip_dcm_path = os.path.join(roundtrip_dicom_dir, 'slice_0000.dcm')\nroundtrip_dcm = pydicom.dcmread(roundtrip_dcm_path)\n\nprint(\"\\n--- 往返转换验证 ---\")\nfields_to_check = [\n    'PatientName', 'StudyInstanceUID', 'SeriesDescription', \n    'ImageOrientationPatient', 'PixelSpacing'\n]\n\nfor tag in fields_to_check:\n    original_value = original_dcm.get(tag, 'N/A')\n    roundtrip_value = roundtrip_dcm.get(tag, 'N/A')\n    print(f\"字段: {tag}\")\n    print(f\"  - 原始值: {original_value}\")\n    print(f\"  - 转换后: {roundtrip_value}\")\n    # 使用 numpy.allclose 进行浮点数组比较\n    if isinstance(original_value, (pydicom.multival.MultiValue, list)):\n        are_equal = np.allclose(np.array(original_value, dtype=float), np.array(roundtrip_value, dtype=float))\n    else:\n        are_equal = (original_value == roundtrip_value)\n    print(f\"  - 是否一致: {are_equal}\")\n    print(\"-\" * 20)\n\nprint(f\"元数据字段总数对比: {len(original_dcm)} (原始) vs {len(roundtrip_dcm)} (转换后)\")\n\n# 清理测试文件\nos.remove(dcbs_file)\nshutil.rmtree(roundtrip_dicom_dir)\n\n\n--- 往返转换验证 ---\n字段: PatientName\n  - 原始值: Anonymous\n  - 转换后: Anonymous\n  - 是否一致: True\n--------------------\n字段: StudyInstanceUID\n  - 原始值: 1.3.46.670589.50.2.37266317681035895631.31745749383280305035\n  - 转换后: 1.3.46.670589.50.2.37266317681035895631.31745749383280305035\n  - 是否一致: True\n--------------------\n字段: SeriesDescription\n  - 原始值: MonoE 90keV[HU] 90\n  - 转换后: MonoE 90keV[HU] 90\n  - 是否一致: True\n--------------------\n字段: ImageOrientationPatient\n  - 原始值: [1, 0, 0, 0, 1, 0]\n  - 转换后: [1.0, 0.0, 0.0, 0.0, 1.0, 0.0]\n  - 是否一致: True\n--------------------\n字段: PixelSpacing\n  - 原始值: [0.4296875, 0.4296875]\n  - 转换后: [0.4296875, 0.4296875]\n  - 是否一致: True\n--------------------\n元数据字段总数对比: 196 (原始) vs 196 (转换后)",
    "crumbs": [
      "首页",
      "DiCube",
      "设计理念与动机"
    ]
  },
  {
    "objectID": "1.0_motivation.html#总结从性能瓶颈到技术赋能",
    "href": "1.0_motivation.html#总结从性能瓶颈到技术赋能",
    "title": "设计理念与动机",
    "section": "总结：从性能瓶颈到技术赋能",
    "text": "总结：从性能瓶颈到技术赋能\nDiCube通过系统性的结构优化，为解决DICOM在现代工作流中的核心挑战提供了有效方案。\n\n\n\n\n\n\n\n\n\n问题领域\nDICOM的局限性\nDiCube的解决方案\n性能提升\n\n\n\n\n文件管理\n大量碎片文件，并发I/O瓶颈\n单文件容器设计\n并发访问性能提升 3-10倍\n\n\n元数据处理\n冗余存储，顺序解析\n智能去重与索引化查询\n元数据访问速度提升 10-50倍\n\n\n存储效率\n无高效标准压缩\n集成HTJ2K高效编解码\n存储空间节省 50-70%\n\n\n工作流集成\n解析转换逻辑复杂\n现代化的API与数据结构\n显著提升集成开发效率\n\n\n\nDiCube的核心价值：\n\n即时性能收益：无需修改上层业务逻辑，即可获得显著的I/O和处理性能提升。\n赋能未来应用：为AI训练、实时分析、大规模并发等下一代应用场景奠定坚实的数据基础。\n零风险迁移路径：完整的往返兼容性确保了与现有DICOM生态的无缝集成和随时回退的能力。\n\n通过在工作流中引入DiCube作为高性能的中间格式，开发团队可以更专注于业务逻辑创新，而不是耗费精力去规避底层数据格式的性能陷阱。这不仅能提升当前系统的用户体验，更能为未来的技术演进提供强大的支持。",
    "crumbs": [
      "首页",
      "DiCube",
      "设计理念与动机"
    ]
  },
  {
    "objectID": "spacetransformer_tutorial_outline.html",
    "href": "spacetransformer_tutorial_outline.html",
    "title": "SpaceTransformer教程系列提纲",
    "section": "",
    "text": "标题: “医学图像几何变换的三大痛点与SpaceTransformer的解决方案”\n内容重点: - 传统方法的问题分析： - Frame概念缺失shape信息 - NIfTI Affine矩阵难以理解和调试 - 多步变换的手动簿记复杂性 - SpaceTransformer的核心理念：Space概念 - 性能对比和优势展示 - 与现有工具生态的兼容性\n\n\n\n标题: “Space概念详解：完整的3D医学图像几何描述”\n内容重点: - Space对象的六大组成要素详解 - 与传统Frame、Affine矩阵的对比 - 从DICOM、NIfTI、SimpleITK创建Space对象 - 坐标系统转换（索引坐标 ↔︎ 世界坐标） - 实用示例：Space对象的创建和基本操作\n\n\n\n标题: “优雅的空间变换：声明式几何操作”\n内容重点: - 核心变换操作：flip、rotate、bbox、shape - 变换链式调用的语法和语义 - 抽象-执行模式的设计理念 - 可逆变换的数学保证 - 实际案例：复杂变换流水线的构建\n\n\n\n标题: “图像与点云的统一变换：从算法到临床”\n内容重点: - warp_image函数详解：插值模式、填充策略 - warp_point函数：点集坐标变换 - GPU加速和性能优化 - 实际医学应用场景： - ROI提取与处理 - 分割结果回传 - 关键点检测坐标转换\n\n\n\n标题: “深度学习工作流集成：无痛的几何变换”\n内容重点: - 与PyTorch的无缝集成 - 解决align_corners混淆问题 - 批处理和GPU内存优化 - 完整的AI推理流水线示例： - 预处理变换 - 模型推理 - 后处理和结果回传 - 与常见深度学习框架的配合使用\n\n\n\n标题: “临床案例研究：多器官分割的完整工作流”\n内容重点: - 真实临床场景：全腹部CT多器官分割 - 完整的端到端处理流程 - 性能基准测试和对比 - 错误处理和边界情况 - 与PACS系统的集成验证 - 临床医生反馈和实用建议\n\n\n\n\n循序渐进: 从概念理解到实际应用，层层递进\n实用导向: 每个章节都包含可运行的代码示例\n对比分析: 与传统方法的详细对比，突出优势\n临床相关: 结合真实医学图像处理需求\n性能展示: 包含基准测试和性能分析"
  },
  {
    "objectID": "spacetransformer_tutorial_outline.html#spacetransformer_motivation.qmd",
    "href": "spacetransformer_tutorial_outline.html#spacetransformer_motivation.qmd",
    "title": "SpaceTransformer教程系列提纲",
    "section": "",
    "text": "标题: “医学图像几何变换的三大痛点与SpaceTransformer的解决方案”\n内容重点: - 传统方法的问题分析： - Frame概念缺失shape信息 - NIfTI Affine矩阵难以理解和调试 - 多步变换的手动簿记复杂性 - SpaceTransformer的核心理念：Space概念 - 性能对比和优势展示 - 与现有工具生态的兼容性"
  },
  {
    "objectID": "spacetransformer_tutorial_outline.html#space_concept_fundamentals.qmd",
    "href": "spacetransformer_tutorial_outline.html#space_concept_fundamentals.qmd",
    "title": "SpaceTransformer教程系列提纲",
    "section": "",
    "text": "标题: “Space概念详解：完整的3D医学图像几何描述”\n内容重点: - Space对象的六大组成要素详解 - 与传统Frame、Affine矩阵的对比 - 从DICOM、NIfTI、SimpleITK创建Space对象 - 坐标系统转换（索引坐标 ↔︎ 世界坐标） - 实用示例：Space对象的创建和基本操作"
  },
  {
    "objectID": "spacetransformer_tutorial_outline.html#spatial_transformations.qmd",
    "href": "spacetransformer_tutorial_outline.html#spatial_transformations.qmd",
    "title": "SpaceTransformer教程系列提纲",
    "section": "",
    "text": "标题: “优雅的空间变换：声明式几何操作”\n内容重点: - 核心变换操作：flip、rotate、bbox、shape - 变换链式调用的语法和语义 - 抽象-执行模式的设计理念 - 可逆变换的数学保证 - 实际案例：复杂变换流水线的构建"
  },
  {
    "objectID": "spacetransformer_tutorial_outline.html#image_point_warping.qmd",
    "href": "spacetransformer_tutorial_outline.html#image_point_warping.qmd",
    "title": "SpaceTransformer教程系列提纲",
    "section": "",
    "text": "标题: “图像与点云的统一变换：从算法到临床”\n内容重点: - warp_image函数详解：插值模式、填充策略 - warp_point函数：点集坐标变换 - GPU加速和性能优化 - 实际医学应用场景： - ROI提取与处理 - 分割结果回传 - 关键点检测坐标转换"
  },
  {
    "objectID": "spacetransformer_tutorial_outline.html#deep_learning_integration.qmd",
    "href": "spacetransformer_tutorial_outline.html#deep_learning_integration.qmd",
    "title": "SpaceTransformer教程系列提纲",
    "section": "",
    "text": "标题: “深度学习工作流集成：无痛的几何变换”\n内容重点: - 与PyTorch的无缝集成 - 解决align_corners混淆问题 - 批处理和GPU内存优化 - 完整的AI推理流水线示例： - 预处理变换 - 模型推理 - 后处理和结果回传 - 与常见深度学习框架的配合使用"
  },
  {
    "objectID": "spacetransformer_tutorial_outline.html#clinical_case_study.qmd",
    "href": "spacetransformer_tutorial_outline.html#clinical_case_study.qmd",
    "title": "SpaceTransformer教程系列提纲",
    "section": "",
    "text": "标题: “临床案例研究：多器官分割的完整工作流”\n内容重点: - 真实临床场景：全腹部CT多器官分割 - 完整的端到端处理流程 - 性能基准测试和对比 - 错误处理和边界情况 - 与PACS系统的集成验证 - 临床医生反馈和实用建议"
  },
  {
    "objectID": "spacetransformer_tutorial_outline.html#教程特色",
    "href": "spacetransformer_tutorial_outline.html#教程特色",
    "title": "SpaceTransformer教程系列提纲",
    "section": "",
    "text": "循序渐进: 从概念理解到实际应用，层层递进\n实用导向: 每个章节都包含可运行的代码示例\n对比分析: 与传统方法的详细对比，突出优势\n临床相关: 结合真实医学图像处理需求\n性能展示: 包含基准测试和性能分析"
  }
]